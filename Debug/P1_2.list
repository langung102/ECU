
P1_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007258  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e8c  080073e8  080073e8  000173e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008274  08008274  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008274  08008274  00018274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800827c  0800827c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800827c  0800827c  0001827c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008280  08008280  00018280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000200  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000290  20000290  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000156e8  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002af5  00000000  00000000  000357a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001250  00000000  00000000  000382a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001128  00000000  00000000  000394f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000221a7  00000000  00000000  0003a618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015033  00000000  00000000  0005c7bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2bb4  00000000  00000000  000717f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001443a6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051b8  00000000  00000000  001443f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080073d0 	.word	0x080073d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	080073d0 	.word	0x080073d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <spi1_communication>:
function :	SPI1 send data
parameter:
send_char:	sned data
******************************************************************************/
uint8_t spi1_communication(uint8_t send_char)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
	uint8_t chRetry = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	73fb      	strb	r3, [r7, #15]
	uint8_t chTemp = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	73bb      	strb	r3, [r7, #14]

	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_TX) {
 8000586:	e007      	b.n	8000598 <spi1_communication+0x24>
		if (++ chRetry > 200) {
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	3301      	adds	r3, #1
 800058c:	73fb      	strb	r3, [r7, #15]
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	2bc8      	cmp	r3, #200	; 0xc8
 8000592:	d901      	bls.n	8000598 <spi1_communication+0x24>
			return 0;
 8000594:	2300      	movs	r3, #0
 8000596:	e02d      	b.n	80005f4 <spi1_communication+0x80>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_TX) {
 8000598:	4818      	ldr	r0, [pc, #96]	; (80005fc <spi1_communication+0x88>)
 800059a:	f004 fc91 	bl	8004ec0 <HAL_SPI_GetState>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b03      	cmp	r3, #3
 80005a2:	d0f1      	beq.n	8000588 <spi1_communication+0x14>
		}
	}

	HAL_SPI_Transmit(&hspi1, &send_char, 1, 1000);
 80005a4:	1df9      	adds	r1, r7, #7
 80005a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005aa:	2201      	movs	r2, #1
 80005ac:	4813      	ldr	r0, [pc, #76]	; (80005fc <spi1_communication+0x88>)
 80005ae:	f003 ff8e 	bl	80044ce <HAL_SPI_Transmit>

	chRetry=0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	73fb      	strb	r3, [r7, #15]
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_RX) {
 80005b6:	e007      	b.n	80005c8 <spi1_communication+0x54>
		if (++ chRetry > 200) {
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
 80005ba:	3301      	adds	r3, #1
 80005bc:	73fb      	strb	r3, [r7, #15]
 80005be:	7bfb      	ldrb	r3, [r7, #15]
 80005c0:	2bc8      	cmp	r3, #200	; 0xc8
 80005c2:	d901      	bls.n	80005c8 <spi1_communication+0x54>
			return 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	e015      	b.n	80005f4 <spi1_communication+0x80>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY_RX) {
 80005c8:	480c      	ldr	r0, [pc, #48]	; (80005fc <spi1_communication+0x88>)
 80005ca:	f004 fc79 	bl	8004ec0 <HAL_SPI_GetState>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b04      	cmp	r3, #4
 80005d2:	d0f1      	beq.n	80005b8 <spi1_communication+0x44>
		}
	}

	HAL_SPI_Receive(&hspi1, &chTemp, 1, 1000);
 80005d4:	f107 010e 	add.w	r1, r7, #14
 80005d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005dc:	2201      	movs	r2, #1
 80005de:	4807      	ldr	r0, [pc, #28]	; (80005fc <spi1_communication+0x88>)
 80005e0:	f004 f8b1 	bl	8004746 <HAL_SPI_Receive>

	/* Wait until the BSY flag is set */
	while(HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY) {
 80005e4:	bf00      	nop
 80005e6:	4805      	ldr	r0, [pc, #20]	; (80005fc <spi1_communication+0x88>)
 80005e8:	f004 fc6a 	bl	8004ec0 <HAL_SPI_GetState>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b02      	cmp	r3, #2
 80005f0:	d0f9      	beq.n	80005e6 <spi1_communication+0x72>

	}

	return chTemp;
 80005f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	200000ac 	.word	0x200000ac

08000600 <lcd_write_byte>:
parameter:
  chByte : send data
  chCmd  : command or data
******************************************************************************/
void lcd_write_byte(uint8_t chByte, uint8_t chCmd)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	460a      	mov	r2, r1
 800060a:	71fb      	strb	r3, [r7, #7]
 800060c:	4613      	mov	r3, r2
 800060e:	71bb      	strb	r3, [r7, #6]
    if (chCmd) {
 8000610:	79bb      	ldrb	r3, [r7, #6]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d006      	beq.n	8000624 <lcd_write_byte+0x24>
        LCD_DC_H();
 8000616:	2201      	movs	r2, #1
 8000618:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061c:	480d      	ldr	r0, [pc, #52]	; (8000654 <lcd_write_byte+0x54>)
 800061e:	f003 fa01 	bl	8003a24 <HAL_GPIO_WritePin>
 8000622:	e005      	b.n	8000630 <lcd_write_byte+0x30>
    } else {
        LCD_DC_L();
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062a:	480a      	ldr	r0, [pc, #40]	; (8000654 <lcd_write_byte+0x54>)
 800062c:	f003 f9fa 	bl	8003a24 <HAL_GPIO_WritePin>
    }

    LCD_CS_L();
 8000630:	2200      	movs	r2, #0
 8000632:	2180      	movs	r1, #128	; 0x80
 8000634:	4807      	ldr	r0, [pc, #28]	; (8000654 <lcd_write_byte+0x54>)
 8000636:	f003 f9f5 	bl	8003a24 <HAL_GPIO_WritePin>
    spi1_communication(chByte);
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ff99 	bl	8000574 <spi1_communication>
    LCD_CS_H();
 8000642:	2201      	movs	r2, #1
 8000644:	2180      	movs	r1, #128	; 0x80
 8000646:	4803      	ldr	r0, [pc, #12]	; (8000654 <lcd_write_byte+0x54>)
 8000648:	f003 f9ec 	bl	8003a24 <HAL_GPIO_WritePin>
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40020400 	.word	0x40020400

08000658 <lcd_write_command>:
parameter:
     chByte : send data
		 chCmd  : command or data
******************************************************************************/
void lcd_write_command(uint8_t chRegister, uint8_t chValue)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	460a      	mov	r2, r1
 8000662:	71fb      	strb	r3, [r7, #7]
 8000664:	4613      	mov	r3, r2
 8000666:	71bb      	strb	r3, [r7, #6]
	lcd_write_byte(chRegister, LCD_CMD);
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff ffc7 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8000672:	79bb      	ldrb	r3, [r7, #6]
 8000674:	2101      	movs	r1, #1
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ffc2 	bl	8000600 <lcd_write_byte>
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <delay_ms>:
/******************************************************************************
Function Name  : delay
			parameter: ms
******************************************************************************/
void delay_ms(uint32_t ms)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	uint32_t j=5000;
 800068c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000690:	60fb      	str	r3, [r7, #12]
	for(;ms>2;ms--)
 8000692:	e008      	b.n	80006a6 <delay_ms+0x22>
		for(;j>2;j--){
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	3b01      	subs	r3, #1
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	2b02      	cmp	r3, #2
 800069e:	d8f9      	bhi.n	8000694 <delay_ms+0x10>
	for(;ms>2;ms--)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3b01      	subs	r3, #1
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2b02      	cmp	r3, #2
 80006aa:	d8f6      	bhi.n	800069a <delay_ms+0x16>

		}
}
 80006ac:	bf00      	nop
 80006ae:	bf00      	nop
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
	...

080006bc <lcd_init>:
/******************************************************************************
Function Name  : initials lcd control pin
			parameter:
******************************************************************************/
void lcd_init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	LCD_RST_H();
 80006c0:	2201      	movs	r2, #1
 80006c2:	2104      	movs	r1, #4
 80006c4:	4881      	ldr	r0, [pc, #516]	; (80008cc <lcd_init+0x210>)
 80006c6:	f003 f9ad 	bl	8003a24 <HAL_GPIO_WritePin>
	LCD_CS_H();
 80006ca:	2201      	movs	r2, #1
 80006cc:	2180      	movs	r1, #128	; 0x80
 80006ce:	487f      	ldr	r0, [pc, #508]	; (80008cc <lcd_init+0x210>)
 80006d0:	f003 f9a8 	bl	8003a24 <HAL_GPIO_WritePin>
	LCD_BKL_H();
 80006d4:	2201      	movs	r2, #1
 80006d6:	2140      	movs	r1, #64	; 0x40
 80006d8:	487c      	ldr	r0, [pc, #496]	; (80008cc <lcd_init+0x210>)
 80006da:	f003 f9a3 	bl	8003a24 <HAL_GPIO_WritePin>
#ifdef 	ST7789_DEVICE
	LCD_RST_H();
 80006de:	2201      	movs	r2, #1
 80006e0:	2104      	movs	r1, #4
 80006e2:	487a      	ldr	r0, [pc, #488]	; (80008cc <lcd_init+0x210>)
 80006e4:	f003 f99e 	bl	8003a24 <HAL_GPIO_WritePin>
	delay_ms(5);
 80006e8:	2005      	movs	r0, #5
 80006ea:	f7ff ffcb 	bl	8000684 <delay_ms>
	LCD_RST_L();
 80006ee:	2200      	movs	r2, #0
 80006f0:	2104      	movs	r1, #4
 80006f2:	4876      	ldr	r0, [pc, #472]	; (80008cc <lcd_init+0x210>)
 80006f4:	f003 f996 	bl	8003a24 <HAL_GPIO_WritePin>
	delay_ms(5);
 80006f8:	2005      	movs	r0, #5
 80006fa:	f7ff ffc3 	bl	8000684 <delay_ms>
	LCD_RST_H();
 80006fe:	2201      	movs	r2, #1
 8000700:	2104      	movs	r1, #4
 8000702:	4872      	ldr	r0, [pc, #456]	; (80008cc <lcd_init+0x210>)
 8000704:	f003 f98e 	bl	8003a24 <HAL_GPIO_WritePin>
	delay_ms(5);
 8000708:	2005      	movs	r0, #5
 800070a:	f7ff ffbb 	bl	8000684 <delay_ms>
	LCD_CS_H();
 800070e:	2201      	movs	r2, #1
 8000710:	2180      	movs	r1, #128	; 0x80
 8000712:	486e      	ldr	r0, [pc, #440]	; (80008cc <lcd_init+0x210>)
 8000714:	f003 f986 	bl	8003a24 <HAL_GPIO_WritePin>
	lcd_write_command(0x07,0x00);
	lcd_write_command(0x08,0x01);
	lcd_write_command(0x09,0x3F);

#elif defined ST7789_DEVICE
	lcd_write_byte(0x11,LCD_CMD);
 8000718:	2100      	movs	r1, #0
 800071a:	2011      	movs	r0, #17
 800071c:	f7ff ff70 	bl	8000600 <lcd_write_byte>
	delay_ms(10);
 8000720:	200a      	movs	r0, #10
 8000722:	f7ff ffaf 	bl	8000684 <delay_ms>
	lcd_write_command(0x36,0x00);
 8000726:	2100      	movs	r1, #0
 8000728:	2036      	movs	r0, #54	; 0x36
 800072a:	f7ff ff95 	bl	8000658 <lcd_write_command>
	lcd_write_command(0x3a,0x05);
 800072e:	2105      	movs	r1, #5
 8000730:	203a      	movs	r0, #58	; 0x3a
 8000732:	f7ff ff91 	bl	8000658 <lcd_write_command>
	lcd_write_byte(0xb2,LCD_CMD);
 8000736:	2100      	movs	r1, #0
 8000738:	20b2      	movs	r0, #178	; 0xb2
 800073a:	f7ff ff61 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x0c,LCD_DATA);
 800073e:	2101      	movs	r1, #1
 8000740:	200c      	movs	r0, #12
 8000742:	f7ff ff5d 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x0c,LCD_DATA);
 8000746:	2101      	movs	r1, #1
 8000748:	200c      	movs	r0, #12
 800074a:	f7ff ff59 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 800074e:	2101      	movs	r1, #1
 8000750:	2000      	movs	r0, #0
 8000752:	f7ff ff55 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x33,LCD_DATA);
 8000756:	2101      	movs	r1, #1
 8000758:	2033      	movs	r0, #51	; 0x33
 800075a:	f7ff ff51 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x33,LCD_DATA);
 800075e:	2101      	movs	r1, #1
 8000760:	2033      	movs	r0, #51	; 0x33
 8000762:	f7ff ff4d 	bl	8000600 <lcd_write_byte>
	lcd_write_command(0xb7,0x35);
 8000766:	2135      	movs	r1, #53	; 0x35
 8000768:	20b7      	movs	r0, #183	; 0xb7
 800076a:	f7ff ff75 	bl	8000658 <lcd_write_command>
	lcd_write_command(0xbb,0x28);
 800076e:	2128      	movs	r1, #40	; 0x28
 8000770:	20bb      	movs	r0, #187	; 0xbb
 8000772:	f7ff ff71 	bl	8000658 <lcd_write_command>
	lcd_write_command(0xc0,0x3c);
 8000776:	213c      	movs	r1, #60	; 0x3c
 8000778:	20c0      	movs	r0, #192	; 0xc0
 800077a:	f7ff ff6d 	bl	8000658 <lcd_write_command>
	lcd_write_command(0xc2,0x01);
 800077e:	2101      	movs	r1, #1
 8000780:	20c2      	movs	r0, #194	; 0xc2
 8000782:	f7ff ff69 	bl	8000658 <lcd_write_command>
	lcd_write_command(0xc3,0x0b);
 8000786:	210b      	movs	r1, #11
 8000788:	20c3      	movs	r0, #195	; 0xc3
 800078a:	f7ff ff65 	bl	8000658 <lcd_write_command>
	lcd_write_command(0xc4,0x20);
 800078e:	2120      	movs	r1, #32
 8000790:	20c4      	movs	r0, #196	; 0xc4
 8000792:	f7ff ff61 	bl	8000658 <lcd_write_command>
	lcd_write_command(0xc6,0x0f);
 8000796:	210f      	movs	r1, #15
 8000798:	20c6      	movs	r0, #198	; 0xc6
 800079a:	f7ff ff5d 	bl	8000658 <lcd_write_command>
	lcd_write_byte(0xD0,LCD_CMD);
 800079e:	2100      	movs	r1, #0
 80007a0:	20d0      	movs	r0, #208	; 0xd0
 80007a2:	f7ff ff2d 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0xa4,LCD_DATA);
 80007a6:	2101      	movs	r1, #1
 80007a8:	20a4      	movs	r0, #164	; 0xa4
 80007aa:	f7ff ff29 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0xa1,LCD_DATA);
 80007ae:	2101      	movs	r1, #1
 80007b0:	20a1      	movs	r0, #161	; 0xa1
 80007b2:	f7ff ff25 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0xe0,LCD_CMD);
 80007b6:	2100      	movs	r1, #0
 80007b8:	20e0      	movs	r0, #224	; 0xe0
 80007ba:	f7ff ff21 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0xd0,LCD_DATA);
 80007be:	2101      	movs	r1, #1
 80007c0:	20d0      	movs	r0, #208	; 0xd0
 80007c2:	f7ff ff1d 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x01,LCD_DATA);
 80007c6:	2101      	movs	r1, #1
 80007c8:	2001      	movs	r0, #1
 80007ca:	f7ff ff19 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x08,LCD_DATA);
 80007ce:	2101      	movs	r1, #1
 80007d0:	2008      	movs	r0, #8
 80007d2:	f7ff ff15 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x0f,LCD_DATA);
 80007d6:	2101      	movs	r1, #1
 80007d8:	200f      	movs	r0, #15
 80007da:	f7ff ff11 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x11,LCD_DATA);
 80007de:	2101      	movs	r1, #1
 80007e0:	2011      	movs	r0, #17
 80007e2:	f7ff ff0d 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x2a,LCD_DATA);
 80007e6:	2101      	movs	r1, #1
 80007e8:	202a      	movs	r0, #42	; 0x2a
 80007ea:	f7ff ff09 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x36,LCD_DATA);
 80007ee:	2101      	movs	r1, #1
 80007f0:	2036      	movs	r0, #54	; 0x36
 80007f2:	f7ff ff05 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x55,LCD_DATA);
 80007f6:	2101      	movs	r1, #1
 80007f8:	2055      	movs	r0, #85	; 0x55
 80007fa:	f7ff ff01 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x44,LCD_DATA);
 80007fe:	2101      	movs	r1, #1
 8000800:	2044      	movs	r0, #68	; 0x44
 8000802:	f7ff fefd 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x3a,LCD_DATA);
 8000806:	2101      	movs	r1, #1
 8000808:	203a      	movs	r0, #58	; 0x3a
 800080a:	f7ff fef9 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x0b,LCD_DATA);
 800080e:	2101      	movs	r1, #1
 8000810:	200b      	movs	r0, #11
 8000812:	f7ff fef5 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x06,LCD_DATA);
 8000816:	2101      	movs	r1, #1
 8000818:	2006      	movs	r0, #6
 800081a:	f7ff fef1 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x11,LCD_DATA);
 800081e:	2101      	movs	r1, #1
 8000820:	2011      	movs	r0, #17
 8000822:	f7ff feed 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x20,LCD_DATA);
 8000826:	2101      	movs	r1, #1
 8000828:	2020      	movs	r0, #32
 800082a:	f7ff fee9 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0xe1,LCD_CMD);
 800082e:	2100      	movs	r1, #0
 8000830:	20e1      	movs	r0, #225	; 0xe1
 8000832:	f7ff fee5 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0xd0,LCD_DATA);
 8000836:	2101      	movs	r1, #1
 8000838:	20d0      	movs	r0, #208	; 0xd0
 800083a:	f7ff fee1 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x02,LCD_DATA);
 800083e:	2101      	movs	r1, #1
 8000840:	2002      	movs	r0, #2
 8000842:	f7ff fedd 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x07,LCD_DATA);
 8000846:	2101      	movs	r1, #1
 8000848:	2007      	movs	r0, #7
 800084a:	f7ff fed9 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x0a,LCD_DATA);
 800084e:	2101      	movs	r1, #1
 8000850:	200a      	movs	r0, #10
 8000852:	f7ff fed5 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x0b,LCD_DATA);
 8000856:	2101      	movs	r1, #1
 8000858:	200b      	movs	r0, #11
 800085a:	f7ff fed1 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x18,LCD_DATA);
 800085e:	2101      	movs	r1, #1
 8000860:	2018      	movs	r0, #24
 8000862:	f7ff fecd 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x34,LCD_DATA);
 8000866:	2101      	movs	r1, #1
 8000868:	2034      	movs	r0, #52	; 0x34
 800086a:	f7ff fec9 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x43,LCD_DATA);
 800086e:	2101      	movs	r1, #1
 8000870:	2043      	movs	r0, #67	; 0x43
 8000872:	f7ff fec5 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x4a,LCD_DATA);
 8000876:	2101      	movs	r1, #1
 8000878:	204a      	movs	r0, #74	; 0x4a
 800087a:	f7ff fec1 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x2b,LCD_DATA);
 800087e:	2101      	movs	r1, #1
 8000880:	202b      	movs	r0, #43	; 0x2b
 8000882:	f7ff febd 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x1b,LCD_DATA);
 8000886:	2101      	movs	r1, #1
 8000888:	201b      	movs	r0, #27
 800088a:	f7ff feb9 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x1c,LCD_DATA);
 800088e:	2101      	movs	r1, #1
 8000890:	201c      	movs	r0, #28
 8000892:	f7ff feb5 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x22,LCD_DATA);
 8000896:	2101      	movs	r1, #1
 8000898:	2022      	movs	r0, #34	; 0x22
 800089a:	f7ff feb1 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x1f,LCD_DATA);
 800089e:	2101      	movs	r1, #1
 80008a0:	201f      	movs	r0, #31
 80008a2:	f7ff fead 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x29,LCD_CMD);
 80008a6:	2100      	movs	r1, #0
 80008a8:	2029      	movs	r0, #41	; 0x29
 80008aa:	f7ff fea9 	bl	8000600 <lcd_write_byte>
	lcd_write_command(0x51,0xff);
 80008ae:	21ff      	movs	r1, #255	; 0xff
 80008b0:	2051      	movs	r0, #81	; 0x51
 80008b2:	f7ff fed1 	bl	8000658 <lcd_write_command>
	lcd_write_command(0x55,0xB0);
 80008b6:	21b0      	movs	r1, #176	; 0xb0
 80008b8:	2055      	movs	r0, #85	; 0x55
 80008ba:	f7ff fecd 	bl	8000658 <lcd_write_command>
#endif

	lcd_clear_screen(WHITE);
 80008be:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80008c2:	f000 f805 	bl	80008d0 <lcd_clear_screen>
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40020400 	.word	0x40020400

080008d0 <lcd_clear_screen>:
Function Name  : clear lcd screen
			parameter:
				hwColor: background color
******************************************************************************/
void lcd_clear_screen(uint16_t hwColor)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	80fb      	strh	r3, [r7, #6]
	uint32_t i, wCount = LCD_WIDTH;
 80008da:	23f0      	movs	r3, #240	; 0xf0
 80008dc:	60bb      	str	r3, [r7, #8]
	wCount *= LCD_HEIGHT;
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	4613      	mov	r3, r2
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	4413      	add	r3, r2
 80008e6:	019b      	lsls	r3, r3, #6
 80008e8:	60bb      	str	r3, [r7, #8]

#ifdef HX8347D_DEVICE
	lcd_set_cursor(0, 0);
	lcd_write_byte(0x22, LCD_CMD);
#elif defined ST7789_DEVICE
	lcd_write_byte(0x2A,LCD_CMD);
 80008ea:	2100      	movs	r1, #0
 80008ec:	202a      	movs	r0, #42	; 0x2a
 80008ee:	f7ff fe87 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 80008f2:	2101      	movs	r1, #1
 80008f4:	2000      	movs	r0, #0
 80008f6:	f7ff fe83 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 80008fa:	2101      	movs	r1, #1
 80008fc:	2000      	movs	r0, #0
 80008fe:	f7ff fe7f 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 8000902:	2101      	movs	r1, #1
 8000904:	2000      	movs	r0, #0
 8000906:	f7ff fe7b 	bl	8000600 <lcd_write_byte>
	lcd_write_byte((LCD_WIDTH-1)&0xff,LCD_DATA);
 800090a:	2101      	movs	r1, #1
 800090c:	20ef      	movs	r0, #239	; 0xef
 800090e:	f7ff fe77 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x2B,LCD_CMD);
 8000912:	2100      	movs	r1, #0
 8000914:	202b      	movs	r0, #43	; 0x2b
 8000916:	f7ff fe73 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 800091a:	2101      	movs	r1, #1
 800091c:	2000      	movs	r0, #0
 800091e:	f7ff fe6f 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 8000922:	2101      	movs	r1, #1
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff fe6b 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(((LCD_HEIGHT-1)>>8)&0xff,LCD_DATA);
 800092a:	2101      	movs	r1, #1
 800092c:	2001      	movs	r0, #1
 800092e:	f7ff fe67 	bl	8000600 <lcd_write_byte>
	lcd_write_byte((LCD_HEIGHT-1)&0xff,LCD_DATA);
 8000932:	2101      	movs	r1, #1
 8000934:	203f      	movs	r0, #63	; 0x3f
 8000936:	f7ff fe63 	bl	8000600 <lcd_write_byte>
	lcd_write_byte(0x2C,LCD_CMD);
 800093a:	2100      	movs	r1, #0
 800093c:	202c      	movs	r0, #44	; 0x2c
 800093e:	f7ff fe5f 	bl	8000600 <lcd_write_byte>
#endif
	LCD_CS_L();
 8000942:	2200      	movs	r2, #0
 8000944:	2180      	movs	r1, #128	; 0x80
 8000946:	4814      	ldr	r0, [pc, #80]	; (8000998 <lcd_clear_screen+0xc8>)
 8000948:	f003 f86c 	bl	8003a24 <HAL_GPIO_WritePin>
	LCD_DC_H();
 800094c:	2201      	movs	r2, #1
 800094e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000952:	4811      	ldr	r0, [pc, #68]	; (8000998 <lcd_clear_screen+0xc8>)
 8000954:	f003 f866 	bl	8003a24 <HAL_GPIO_WritePin>
	for(i=0;i<wCount;i++){
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	e00e      	b.n	800097c <lcd_clear_screen+0xac>
//		spi1_communication(hwColor>>8);

		spi1_communication(hwColor>>8);
		spi1_communication((uint8_t)(hwColor&0xff));
#elif defined ST7789_DEVICE
		spi1_communication(hwColor>>8);
 800095e:	88fb      	ldrh	r3, [r7, #6]
 8000960:	0a1b      	lsrs	r3, r3, #8
 8000962:	b29b      	uxth	r3, r3
 8000964:	b2db      	uxtb	r3, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff fe04 	bl	8000574 <spi1_communication>
		spi1_communication((uint8_t)(hwColor&0xff));
 800096c:	88fb      	ldrh	r3, [r7, #6]
 800096e:	b2db      	uxtb	r3, r3
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fdff 	bl	8000574 <spi1_communication>
	for(i=0;i<wCount;i++){
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	3301      	adds	r3, #1
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	429a      	cmp	r2, r3
 8000982:	d3ec      	bcc.n	800095e <lcd_clear_screen+0x8e>
#endif
	}
	LCD_CS_H();
 8000984:	2201      	movs	r2, #1
 8000986:	2180      	movs	r1, #128	; 0x80
 8000988:	4803      	ldr	r0, [pc, #12]	; (8000998 <lcd_clear_screen+0xc8>)
 800098a:	f003 f84b 	bl	8003a24 <HAL_GPIO_WritePin>
}
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40020400 	.word	0x40020400

0800099c <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t ECU_lock = 1;
uint8_t rand_byte[4];
char lcd_str[20];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af02      	add	r7, sp, #8
 80009a2:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader1 ,RxData1);
 80009a4:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80009a6:	4a14      	ldr	r2, [pc, #80]	; (80009f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80009a8:	2100      	movs	r1, #0
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f002 f993 	bl	8002cd6 <HAL_CAN_GetRxMessage>
	HAL_UART_Transmit(&huart1, lcd_str, sprintf(lcd_str, "%d:%d:%d:%d\r\n", RxData1[2], RxData1[3], RxData1[4], RxData1[5]), 1000);
 80009b0:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80009b2:	789b      	ldrb	r3, [r3, #2]
 80009b4:	4619      	mov	r1, r3
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80009b8:	78db      	ldrb	r3, [r3, #3]
 80009ba:	4618      	mov	r0, r3
 80009bc:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80009be:	791b      	ldrb	r3, [r3, #4]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80009c4:	795b      	ldrb	r3, [r3, #5]
 80009c6:	9301      	str	r3, [sp, #4]
 80009c8:	9200      	str	r2, [sp, #0]
 80009ca:	4603      	mov	r3, r0
 80009cc:	460a      	mov	r2, r1
 80009ce:	490b      	ldr	r1, [pc, #44]	; (80009fc <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80009d0:	480b      	ldr	r0, [pc, #44]	; (8000a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80009d2:	f006 f88f 	bl	8006af4 <siprintf>
 80009d6:	4603      	mov	r3, r0
 80009d8:	b29a      	uxth	r2, r3
 80009da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009de:	4908      	ldr	r1, [pc, #32]	; (8000a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80009e0:	4808      	ldr	r0, [pc, #32]	; (8000a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80009e2:	f005 f898 	bl	8005b16 <HAL_UART_Transmit>
	datacheck1 = 1;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	701a      	strb	r2, [r3, #0]
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	2000023c 	.word	0x2000023c
 80009f8:	20000218 	.word	0x20000218
 80009fc:	080073e8 	.word	0x080073e8
 8000a00:	20000264 	.word	0x20000264
 8000a04:	200001bc 	.word	0x200001bc
 8000a08:	20000258 	.word	0x20000258

08000a0c <handle_22>:

void handle_22() {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
	if(datacheck1) {
 8000a12:	4b2d      	ldr	r3, [pc, #180]	; (8000ac8 <handle_22+0xbc>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d052      	beq.n	8000ac0 <handle_22+0xb4>
		HAL_ADC_Start(&hadc1);
 8000a1a:	482c      	ldr	r0, [pc, #176]	; (8000acc <handle_22+0xc0>)
 8000a1c:	f001 faa4 	bl	8001f68 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000a20:	f04f 31ff 	mov.w	r1, #4294967295
 8000a24:	4829      	ldr	r0, [pc, #164]	; (8000acc <handle_22+0xc0>)
 8000a26:	f001 fba4 	bl	8002172 <HAL_ADC_PollForConversion>
		uint16_t adcValue = HAL_ADC_GetValue(&hadc1);
 8000a2a:	4828      	ldr	r0, [pc, #160]	; (8000acc <handle_22+0xc0>)
 8000a2c:	f001 fc2c 	bl	8002288 <HAL_ADC_GetValue>
 8000a30:	4603      	mov	r3, r0
 8000a32:	80fb      	strh	r3, [r7, #6]
		HAL_ADC_Stop(&hadc1);
 8000a34:	4825      	ldr	r0, [pc, #148]	; (8000acc <handle_22+0xc0>)
 8000a36:	f001 fb69 	bl	800210c <HAL_ADC_Stop>

		TxHeader1.DLC   = 5;
 8000a3a:	4b25      	ldr	r3, [pc, #148]	; (8000ad0 <handle_22+0xc4>)
 8000a3c:	2205      	movs	r2, #5
 8000a3e:	611a      	str	r2, [r3, #16]
		TxHeader1.IDE   = CAN_ID_STD;
 8000a40:	4b23      	ldr	r3, [pc, #140]	; (8000ad0 <handle_22+0xc4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
		TxHeader1.RTR   = CAN_RTR_DATA;
 8000a46:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <handle_22+0xc4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
		TxHeader1.StdId = 0x012;
 8000a4c:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <handle_22+0xc4>)
 8000a4e:	2212      	movs	r2, #18
 8000a50:	601a      	str	r2, [r3, #0]

		TxData1[0] = RxHeader1.IDE + 0x40;
 8000a52:	4b20      	ldr	r3, [pc, #128]	; (8000ad4 <handle_22+0xc8>)
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	3340      	adds	r3, #64	; 0x40
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <handle_22+0xcc>)
 8000a5e:	701a      	strb	r2, [r3, #0]
		TxData1[1] = RxData1[0];
 8000a60:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <handle_22+0xd0>)
 8000a62:	781a      	ldrb	r2, [r3, #0]
 8000a64:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <handle_22+0xcc>)
 8000a66:	705a      	strb	r2, [r3, #1]
		TxData1[2] = RxData1[1];
 8000a68:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <handle_22+0xd0>)
 8000a6a:	785a      	ldrb	r2, [r3, #1]
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <handle_22+0xcc>)
 8000a6e:	709a      	strb	r2, [r3, #2]
		TxData1[3] = (adcValue >> 8) & 0xFF;
 8000a70:	88fb      	ldrh	r3, [r7, #6]
 8000a72:	0a1b      	lsrs	r3, r3, #8
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <handle_22+0xcc>)
 8000a7a:	70da      	strb	r2, [r3, #3]
		TxData1[4] = (adcValue >> 0) & 0XFF;
 8000a7c:	88fb      	ldrh	r3, [r7, #6]
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <handle_22+0xcc>)
 8000a82:	711a      	strb	r2, [r3, #4]
		HAL_UART_Transmit(&huart1, (void *)str , sprintf(str, "%d\r\n", adcValue), 1000);
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	461a      	mov	r2, r3
 8000a88:	4915      	ldr	r1, [pc, #84]	; (8000ae0 <handle_22+0xd4>)
 8000a8a:	4816      	ldr	r0, [pc, #88]	; (8000ae4 <handle_22+0xd8>)
 8000a8c:	f006 f832 	bl	8006af4 <siprintf>
 8000a90:	4603      	mov	r3, r0
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a98:	4912      	ldr	r1, [pc, #72]	; (8000ae4 <handle_22+0xd8>)
 8000a9a:	4813      	ldr	r0, [pc, #76]	; (8000ae8 <handle_22+0xdc>)
 8000a9c:	f005 f83b 	bl	8005b16 <HAL_UART_Transmit>
		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, TxData1, &TxMailbox) == HAL_OK) {
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <handle_22+0xe0>)
 8000aa2:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <handle_22+0xcc>)
 8000aa4:	490a      	ldr	r1, [pc, #40]	; (8000ad0 <handle_22+0xc4>)
 8000aa6:	4812      	ldr	r0, [pc, #72]	; (8000af0 <handle_22+0xe4>)
 8000aa8:	f002 f83a 	bl	8002b20 <HAL_CAN_AddTxMessage>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d103      	bne.n	8000aba <handle_22+0xae>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	480f      	ldr	r0, [pc, #60]	; (8000af4 <handle_22+0xe8>)
 8000ab6:	f002 ffce 	bl	8003a56 <HAL_GPIO_TogglePin>
		}
		datacheck1 = 0;
 8000aba:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <handle_22+0xbc>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	701a      	strb	r2, [r3, #0]
	}
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000258 	.word	0x20000258
 8000acc:	20000104 	.word	0x20000104
 8000ad0:	20000200 	.word	0x20000200
 8000ad4:	20000218 	.word	0x20000218
 8000ad8:	20000234 	.word	0x20000234
 8000adc:	2000023c 	.word	0x2000023c
 8000ae0:	080073f8 	.word	0x080073f8
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	200001bc 	.word	0x200001bc
 8000aec:	20000244 	.word	0x20000244
 8000af0:	2000014c 	.word	0x2000014c
 8000af4:	40020400 	.word	0x40020400

08000af8 <handle_2E>:

void handle_2E() {
 8000af8:	b5b0      	push	{r4, r5, r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af04      	add	r7, sp, #16
    if (datacheck1) {
 8000afe:	4b78      	ldr	r3, [pc, #480]	; (8000ce0 <handle_2E+0x1e8>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	f000 80e8 	beq.w	8000cd8 <handle_2E+0x1e0>
      uint8_t frame_type = (RxData1[0] >> 4) & 0xFF;
 8000b08:	4b76      	ldr	r3, [pc, #472]	; (8000ce4 <handle_2E+0x1ec>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	091b      	lsrs	r3, r3, #4
 8000b0e:	71fb      	strb	r3, [r7, #7]
      if (frame_type == 0x01) {
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d15b      	bne.n	8000bce <handle_2E+0xd6>
    	  ST7789_Fill_Color(BLACK);
 8000b16:	2000      	movs	r0, #0
 8000b18:	f000 fdc4 	bl	80016a4 <ST7789_Fill_Color>
    	  ST7789_WriteString(10, 20, "Waiting...", Font_11x18, RED, WHITE);
 8000b1c:	4b72      	ldr	r3, [pc, #456]	; (8000ce8 <handle_2E+0x1f0>)
 8000b1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b22:	9202      	str	r2, [sp, #8]
 8000b24:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000b28:	9201      	str	r2, [sp, #4]
 8000b2a:	685a      	ldr	r2, [r3, #4]
 8000b2c:	9200      	str	r2, [sp, #0]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a6e      	ldr	r2, [pc, #440]	; (8000cec <handle_2E+0x1f4>)
 8000b32:	2114      	movs	r1, #20
 8000b34:	200a      	movs	r0, #10
 8000b36:	f000 fe73 	bl	8001820 <ST7789_WriteString>

          buffer[0] = RxData1[5];
 8000b3a:	4b6a      	ldr	r3, [pc, #424]	; (8000ce4 <handle_2E+0x1ec>)
 8000b3c:	795a      	ldrb	r2, [r3, #5]
 8000b3e:	4b6c      	ldr	r3, [pc, #432]	; (8000cf0 <handle_2E+0x1f8>)
 8000b40:	701a      	strb	r2, [r3, #0]
          buffer[1] = RxData1[6];
 8000b42:	4b68      	ldr	r3, [pc, #416]	; (8000ce4 <handle_2E+0x1ec>)
 8000b44:	799a      	ldrb	r2, [r3, #6]
 8000b46:	4b6a      	ldr	r3, [pc, #424]	; (8000cf0 <handle_2E+0x1f8>)
 8000b48:	705a      	strb	r2, [r3, #1]
          buffer[2] = RxData1[7];
 8000b4a:	4b66      	ldr	r3, [pc, #408]	; (8000ce4 <handle_2E+0x1ec>)
 8000b4c:	79da      	ldrb	r2, [r3, #7]
 8000b4e:	4b68      	ldr	r3, [pc, #416]	; (8000cf0 <handle_2E+0x1f8>)
 8000b50:	709a      	strb	r2, [r3, #2]
          DID_curlen = 3;
 8000b52:	4b68      	ldr	r3, [pc, #416]	; (8000cf4 <handle_2E+0x1fc>)
 8000b54:	2203      	movs	r2, #3
 8000b56:	801a      	strh	r2, [r3, #0]
          DID_len = (RxData1[0] & 0x0F) + RxData1[1];
 8000b58:	4b62      	ldr	r3, [pc, #392]	; (8000ce4 <handle_2E+0x1ec>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	f003 030f 	and.w	r3, r3, #15
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	4b5f      	ldr	r3, [pc, #380]	; (8000ce4 <handle_2E+0x1ec>)
 8000b66:	785b      	ldrb	r3, [r3, #1]
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	4413      	add	r3, r2
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	4b62      	ldr	r3, [pc, #392]	; (8000cf8 <handle_2E+0x200>)
 8000b70:	801a      	strh	r2, [r3, #0]

    	  TxHeader1.DLC   = 4;
 8000b72:	4b62      	ldr	r3, [pc, #392]	; (8000cfc <handle_2E+0x204>)
 8000b74:	2204      	movs	r2, #4
 8000b76:	611a      	str	r2, [r3, #16]
    	  TxHeader1.IDE   = CAN_ID_STD;
 8000b78:	4b60      	ldr	r3, [pc, #384]	; (8000cfc <handle_2E+0x204>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
          TxHeader1.RTR   = CAN_RTR_DATA;
 8000b7e:	4b5f      	ldr	r3, [pc, #380]	; (8000cfc <handle_2E+0x204>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	60da      	str	r2, [r3, #12]
          TxHeader1.StdId = 0x210;
 8000b84:	4b5d      	ldr	r3, [pc, #372]	; (8000cfc <handle_2E+0x204>)
 8000b86:	f44f 7204 	mov.w	r2, #528	; 0x210
 8000b8a:	601a      	str	r2, [r3, #0]

          //PCI
          TxData1[0] = 0x30;
 8000b8c:	4b5c      	ldr	r3, [pc, #368]	; (8000d00 <handle_2E+0x208>)
 8000b8e:	2230      	movs	r2, #48	; 0x30
 8000b90:	701a      	strb	r2, [r3, #0]
          //SID
          TxData1[1] = RxHeader1.IDE + 0x40;
 8000b92:	4b5c      	ldr	r3, [pc, #368]	; (8000d04 <handle_2E+0x20c>)
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	3340      	adds	r3, #64	; 0x40
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	4b58      	ldr	r3, [pc, #352]	; (8000d00 <handle_2E+0x208>)
 8000b9e:	705a      	strb	r2, [r3, #1]
          //DID
          TxData1[2] = RxData1[0];
 8000ba0:	4b50      	ldr	r3, [pc, #320]	; (8000ce4 <handle_2E+0x1ec>)
 8000ba2:	781a      	ldrb	r2, [r3, #0]
 8000ba4:	4b56      	ldr	r3, [pc, #344]	; (8000d00 <handle_2E+0x208>)
 8000ba6:	709a      	strb	r2, [r3, #2]
          TxData1[3] = RxData1[1];
 8000ba8:	4b4e      	ldr	r3, [pc, #312]	; (8000ce4 <handle_2E+0x1ec>)
 8000baa:	785a      	ldrb	r2, [r3, #1]
 8000bac:	4b54      	ldr	r3, [pc, #336]	; (8000d00 <handle_2E+0x208>)
 8000bae:	70da      	strb	r2, [r3, #3]

          if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, TxData1, &TxMailbox) == HAL_OK) {
 8000bb0:	4b55      	ldr	r3, [pc, #340]	; (8000d08 <handle_2E+0x210>)
 8000bb2:	4a53      	ldr	r2, [pc, #332]	; (8000d00 <handle_2E+0x208>)
 8000bb4:	4951      	ldr	r1, [pc, #324]	; (8000cfc <handle_2E+0x204>)
 8000bb6:	4855      	ldr	r0, [pc, #340]	; (8000d0c <handle_2E+0x214>)
 8000bb8:	f001 ffb2 	bl	8002b20 <HAL_CAN_AddTxMessage>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f040 8087 	bne.w	8000cd2 <handle_2E+0x1da>
        	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	4852      	ldr	r0, [pc, #328]	; (8000d10 <handle_2E+0x218>)
 8000bc8:	f002 ff45 	bl	8003a56 <HAL_GPIO_TogglePin>
 8000bcc:	e081      	b.n	8000cd2 <handle_2E+0x1da>
          }
      } else if (frame_type == 0x02 && DID_curlen != DID_len) {
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d17e      	bne.n	8000cd2 <handle_2E+0x1da>
 8000bd4:	4b47      	ldr	r3, [pc, #284]	; (8000cf4 <handle_2E+0x1fc>)
 8000bd6:	881a      	ldrh	r2, [r3, #0]
 8000bd8:	4b47      	ldr	r3, [pc, #284]	; (8000cf8 <handle_2E+0x200>)
 8000bda:	881b      	ldrh	r3, [r3, #0]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d078      	beq.n	8000cd2 <handle_2E+0x1da>
    	  DID_curlen += RxHeader1.DLC - 1;
 8000be0:	4b48      	ldr	r3, [pc, #288]	; (8000d04 <handle_2E+0x20c>)
 8000be2:	691b      	ldr	r3, [r3, #16]
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	4b43      	ldr	r3, [pc, #268]	; (8000cf4 <handle_2E+0x1fc>)
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	4b40      	ldr	r3, [pc, #256]	; (8000cf4 <handle_2E+0x1fc>)
 8000bf4:	801a      	strh	r2, [r3, #0]
          buffer[3] = RxData1[1];
 8000bf6:	4b3b      	ldr	r3, [pc, #236]	; (8000ce4 <handle_2E+0x1ec>)
 8000bf8:	785a      	ldrb	r2, [r3, #1]
 8000bfa:	4b3d      	ldr	r3, [pc, #244]	; (8000cf0 <handle_2E+0x1f8>)
 8000bfc:	70da      	strb	r2, [r3, #3]
          buffer[4] = RxData1[2];
 8000bfe:	4b39      	ldr	r3, [pc, #228]	; (8000ce4 <handle_2E+0x1ec>)
 8000c00:	789a      	ldrb	r2, [r3, #2]
 8000c02:	4b3b      	ldr	r3, [pc, #236]	; (8000cf0 <handle_2E+0x1f8>)
 8000c04:	711a      	strb	r2, [r3, #4]
          buffer[5] = RxData1[3];
 8000c06:	4b37      	ldr	r3, [pc, #220]	; (8000ce4 <handle_2E+0x1ec>)
 8000c08:	78da      	ldrb	r2, [r3, #3]
 8000c0a:	4b39      	ldr	r3, [pc, #228]	; (8000cf0 <handle_2E+0x1f8>)
 8000c0c:	715a      	strb	r2, [r3, #5]

          if (DID_curlen == DID_len) {
 8000c0e:	4b39      	ldr	r3, [pc, #228]	; (8000cf4 <handle_2E+0x1fc>)
 8000c10:	881a      	ldrh	r2, [r3, #0]
 8000c12:	4b39      	ldr	r3, [pc, #228]	; (8000cf8 <handle_2E+0x200>)
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d15b      	bne.n	8000cd2 <handle_2E+0x1da>
        	  TxHeader1.DLC   = 4;
 8000c1a:	4b38      	ldr	r3, [pc, #224]	; (8000cfc <handle_2E+0x204>)
 8000c1c:	2204      	movs	r2, #4
 8000c1e:	611a      	str	r2, [r3, #16]
        	  TxHeader1.IDE   = CAN_ID_STD;
 8000c20:	4b36      	ldr	r3, [pc, #216]	; (8000cfc <handle_2E+0x204>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
        	  TxHeader1.RTR   = CAN_RTR_DATA;
 8000c26:	4b35      	ldr	r3, [pc, #212]	; (8000cfc <handle_2E+0x204>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	60da      	str	r2, [r3, #12]
        	  TxHeader1.StdId = 0x210;
 8000c2c:	4b33      	ldr	r3, [pc, #204]	; (8000cfc <handle_2E+0x204>)
 8000c2e:	f44f 7204 	mov.w	r2, #528	; 0x210
 8000c32:	601a      	str	r2, [r3, #0]

              //PCI
              TxData1[0] = 0x30;
 8000c34:	4b32      	ldr	r3, [pc, #200]	; (8000d00 <handle_2E+0x208>)
 8000c36:	2230      	movs	r2, #48	; 0x30
 8000c38:	701a      	strb	r2, [r3, #0]
              //SID
              TxData1[1] = RxHeader1.IDE + 0x40;
 8000c3a:	4b32      	ldr	r3, [pc, #200]	; (8000d04 <handle_2E+0x20c>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	3340      	adds	r3, #64	; 0x40
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	4b2e      	ldr	r3, [pc, #184]	; (8000d00 <handle_2E+0x208>)
 8000c46:	705a      	strb	r2, [r3, #1]
              //DID
              TxData1[2] = RxData1[0];
 8000c48:	4b26      	ldr	r3, [pc, #152]	; (8000ce4 <handle_2E+0x1ec>)
 8000c4a:	781a      	ldrb	r2, [r3, #0]
 8000c4c:	4b2c      	ldr	r3, [pc, #176]	; (8000d00 <handle_2E+0x208>)
 8000c4e:	709a      	strb	r2, [r3, #2]
              TxData1[3] = RxData1[1];
 8000c50:	4b24      	ldr	r3, [pc, #144]	; (8000ce4 <handle_2E+0x1ec>)
 8000c52:	785a      	ldrb	r2, [r3, #1]
 8000c54:	4b2a      	ldr	r3, [pc, #168]	; (8000d00 <handle_2E+0x208>)
 8000c56:	70da      	strb	r2, [r3, #3]

              DID_len = 0;
 8000c58:	4b27      	ldr	r3, [pc, #156]	; (8000cf8 <handle_2E+0x200>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	801a      	strh	r2, [r3, #0]
              DID_curlen = 0;
 8000c5e:	4b25      	ldr	r3, [pc, #148]	; (8000cf4 <handle_2E+0x1fc>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	801a      	strh	r2, [r3, #0]
              sprintf(lcd_str, "Data received: %02x;%02x;%02x;%02x;%02x", buffer[0],buffer[1],buffer[2],buffer[3],buffer[4],buffer[5]);
 8000c64:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <handle_2E+0x1f8>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	461c      	mov	r4, r3
 8000c6a:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <handle_2E+0x1f8>)
 8000c6c:	785b      	ldrb	r3, [r3, #1]
 8000c6e:	461d      	mov	r5, r3
 8000c70:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <handle_2E+0x1f8>)
 8000c72:	789b      	ldrb	r3, [r3, #2]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b1e      	ldr	r3, [pc, #120]	; (8000cf0 <handle_2E+0x1f8>)
 8000c78:	78db      	ldrb	r3, [r3, #3]
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <handle_2E+0x1f8>)
 8000c7e:	791b      	ldrb	r3, [r3, #4]
 8000c80:	4618      	mov	r0, r3
 8000c82:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <handle_2E+0x1f8>)
 8000c84:	795b      	ldrb	r3, [r3, #5]
 8000c86:	9303      	str	r3, [sp, #12]
 8000c88:	9002      	str	r0, [sp, #8]
 8000c8a:	9101      	str	r1, [sp, #4]
 8000c8c:	9200      	str	r2, [sp, #0]
 8000c8e:	462b      	mov	r3, r5
 8000c90:	4622      	mov	r2, r4
 8000c92:	4920      	ldr	r1, [pc, #128]	; (8000d14 <handle_2E+0x21c>)
 8000c94:	4820      	ldr	r0, [pc, #128]	; (8000d18 <handle_2E+0x220>)
 8000c96:	f005 ff2d 	bl	8006af4 <siprintf>
              ST7789_WriteString(10, 20, lcd_str, Font_11x18, RED, WHITE);
 8000c9a:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <handle_2E+0x1f0>)
 8000c9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ca0:	9202      	str	r2, [sp, #8]
 8000ca2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000ca6:	9201      	str	r2, [sp, #4]
 8000ca8:	685a      	ldr	r2, [r3, #4]
 8000caa:	9200      	str	r2, [sp, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a1a      	ldr	r2, [pc, #104]	; (8000d18 <handle_2E+0x220>)
 8000cb0:	2114      	movs	r1, #20
 8000cb2:	200a      	movs	r0, #10
 8000cb4:	f000 fdb4 	bl	8001820 <ST7789_WriteString>
              if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, TxData1, &TxMailbox) == HAL_OK) {
 8000cb8:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <handle_2E+0x210>)
 8000cba:	4a11      	ldr	r2, [pc, #68]	; (8000d00 <handle_2E+0x208>)
 8000cbc:	490f      	ldr	r1, [pc, #60]	; (8000cfc <handle_2E+0x204>)
 8000cbe:	4813      	ldr	r0, [pc, #76]	; (8000d0c <handle_2E+0x214>)
 8000cc0:	f001 ff2e 	bl	8002b20 <HAL_CAN_AddTxMessage>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d103      	bne.n	8000cd2 <handle_2E+0x1da>
            	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000cca:	2101      	movs	r1, #1
 8000ccc:	4810      	ldr	r0, [pc, #64]	; (8000d10 <handle_2E+0x218>)
 8000cce:	f002 fec2 	bl	8003a56 <HAL_GPIO_TogglePin>
              }
         }
      }
      datacheck1 = 0;
 8000cd2:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <handle_2E+0x1e8>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
    }
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bdb0      	pop	{r4, r5, r7, pc}
 8000ce0:	20000258 	.word	0x20000258
 8000ce4:	2000023c 	.word	0x2000023c
 8000ce8:	20000000 	.word	0x20000000
 8000cec:	08007400 	.word	0x08007400
 8000cf0:	20000248 	.word	0x20000248
 8000cf4:	2000025c 	.word	0x2000025c
 8000cf8:	2000025a 	.word	0x2000025a
 8000cfc:	20000200 	.word	0x20000200
 8000d00:	20000234 	.word	0x20000234
 8000d04:	20000218 	.word	0x20000218
 8000d08:	20000244 	.word	0x20000244
 8000d0c:	2000014c 	.word	0x2000014c
 8000d10:	40020400 	.word	0x40020400
 8000d14:	0800740c 	.word	0x0800740c
 8000d18:	20000264 	.word	0x20000264

08000d1c <handle_27>:

void handle_27() {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, !ECU_lock);
 8000d20:	4b45      	ldr	r3, [pc, #276]	; (8000e38 <handle_27+0x11c>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	bf0c      	ite	eq
 8000d28:	2301      	moveq	r3, #1
 8000d2a:	2300      	movne	r3, #0
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	461a      	mov	r2, r3
 8000d30:	2102      	movs	r1, #2
 8000d32:	4842      	ldr	r0, [pc, #264]	; (8000e3c <handle_27+0x120>)
 8000d34:	f002 fe76 	bl	8003a24 <HAL_GPIO_WritePin>
	  if (datacheck1) {
 8000d38:	4b41      	ldr	r3, [pc, #260]	; (8000e40 <handle_27+0x124>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d079      	beq.n	8000e34 <handle_27+0x118>
		  if (RxData1[1] == 0x01) {
 8000d40:	4b40      	ldr	r3, [pc, #256]	; (8000e44 <handle_27+0x128>)
 8000d42:	785b      	ldrb	r3, [r3, #1]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d138      	bne.n	8000dba <handle_27+0x9e>
			  rand_byte[0] = 1;
 8000d48:	4b3f      	ldr	r3, [pc, #252]	; (8000e48 <handle_27+0x12c>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	701a      	strb	r2, [r3, #0]
			  rand_byte[1] = 2;
 8000d4e:	4b3e      	ldr	r3, [pc, #248]	; (8000e48 <handle_27+0x12c>)
 8000d50:	2202      	movs	r2, #2
 8000d52:	705a      	strb	r2, [r3, #1]
			  rand_byte[2] = 3;
 8000d54:	4b3c      	ldr	r3, [pc, #240]	; (8000e48 <handle_27+0x12c>)
 8000d56:	2203      	movs	r2, #3
 8000d58:	709a      	strb	r2, [r3, #2]
			  rand_byte[3] = 4;
 8000d5a:	4b3b      	ldr	r3, [pc, #236]	; (8000e48 <handle_27+0x12c>)
 8000d5c:	2204      	movs	r2, #4
 8000d5e:	70da      	strb	r2, [r3, #3]
			  TxHeader1.DLC   = 6;
 8000d60:	4b3a      	ldr	r3, [pc, #232]	; (8000e4c <handle_27+0x130>)
 8000d62:	2206      	movs	r2, #6
 8000d64:	611a      	str	r2, [r3, #16]
			  TxHeader1.IDE   = CAN_ID_STD;
 8000d66:	4b39      	ldr	r3, [pc, #228]	; (8000e4c <handle_27+0x130>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
			  TxHeader1.RTR   = CAN_RTR_DATA;
 8000d6c:	4b37      	ldr	r3, [pc, #220]	; (8000e4c <handle_27+0x130>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
			  TxHeader1.StdId = 0x210;
 8000d72:	4b36      	ldr	r3, [pc, #216]	; (8000e4c <handle_27+0x130>)
 8000d74:	f44f 7204 	mov.w	r2, #528	; 0x210
 8000d78:	601a      	str	r2, [r3, #0]

			  TxData1[0] = RxData1[0] + 0x40;
 8000d7a:	4b32      	ldr	r3, [pc, #200]	; (8000e44 <handle_27+0x128>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	3340      	adds	r3, #64	; 0x40
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4b33      	ldr	r3, [pc, #204]	; (8000e50 <handle_27+0x134>)
 8000d84:	701a      	strb	r2, [r3, #0]
			  TxData1[1] = 0x01;
 8000d86:	4b32      	ldr	r3, [pc, #200]	; (8000e50 <handle_27+0x134>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	705a      	strb	r2, [r3, #1]
			  TxData1[2] = rand_byte[0];
 8000d8c:	4b2e      	ldr	r3, [pc, #184]	; (8000e48 <handle_27+0x12c>)
 8000d8e:	781a      	ldrb	r2, [r3, #0]
 8000d90:	4b2f      	ldr	r3, [pc, #188]	; (8000e50 <handle_27+0x134>)
 8000d92:	709a      	strb	r2, [r3, #2]
			  TxData1[3] = rand_byte[1];
 8000d94:	4b2c      	ldr	r3, [pc, #176]	; (8000e48 <handle_27+0x12c>)
 8000d96:	785a      	ldrb	r2, [r3, #1]
 8000d98:	4b2d      	ldr	r3, [pc, #180]	; (8000e50 <handle_27+0x134>)
 8000d9a:	70da      	strb	r2, [r3, #3]
			  TxData1[4] = rand_byte[2];
 8000d9c:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <handle_27+0x12c>)
 8000d9e:	789a      	ldrb	r2, [r3, #2]
 8000da0:	4b2b      	ldr	r3, [pc, #172]	; (8000e50 <handle_27+0x134>)
 8000da2:	711a      	strb	r2, [r3, #4]
			  TxData1[5] = rand_byte[3];
 8000da4:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <handle_27+0x12c>)
 8000da6:	78da      	ldrb	r2, [r3, #3]
 8000da8:	4b29      	ldr	r3, [pc, #164]	; (8000e50 <handle_27+0x134>)
 8000daa:	715a      	strb	r2, [r3, #5]

			  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, TxData1, &TxMailbox) == HAL_OK) {
 8000dac:	4b29      	ldr	r3, [pc, #164]	; (8000e54 <handle_27+0x138>)
 8000dae:	4a28      	ldr	r2, [pc, #160]	; (8000e50 <handle_27+0x134>)
 8000db0:	4926      	ldr	r1, [pc, #152]	; (8000e4c <handle_27+0x130>)
 8000db2:	4829      	ldr	r0, [pc, #164]	; (8000e58 <handle_27+0x13c>)
 8000db4:	f001 feb4 	bl	8002b20 <HAL_CAN_AddTxMessage>
			  } else {
//				  HAL_Delay(10000);
			  }
		  }
	  }
}
 8000db8:	e03c      	b.n	8000e34 <handle_27+0x118>
		  } else if (RxData1[1] == 0x02) {
 8000dba:	4b22      	ldr	r3, [pc, #136]	; (8000e44 <handle_27+0x128>)
 8000dbc:	785b      	ldrb	r3, [r3, #1]
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d138      	bne.n	8000e34 <handle_27+0x118>
			  if((RxData1[2] == (rand_byte[0] + 1)) &&
 8000dc2:	4b20      	ldr	r3, [pc, #128]	; (8000e44 <handle_27+0x128>)
 8000dc4:	789b      	ldrb	r3, [r3, #2]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <handle_27+0x12c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d130      	bne.n	8000e34 <handle_27+0x118>
				 (RxData1[3] == (rand_byte[1] + 1)) &&
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <handle_27+0x128>)
 8000dd4:	78db      	ldrb	r3, [r3, #3]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <handle_27+0x12c>)
 8000dda:	785b      	ldrb	r3, [r3, #1]
 8000ddc:	3301      	adds	r3, #1
			  if((RxData1[2] == (rand_byte[0] + 1)) &&
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d128      	bne.n	8000e34 <handle_27+0x118>
				 (RxData1[4] == (rand_byte[2] + 1)) &&
 8000de2:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <handle_27+0x128>)
 8000de4:	791b      	ldrb	r3, [r3, #4]
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <handle_27+0x12c>)
 8000dea:	789b      	ldrb	r3, [r3, #2]
 8000dec:	3301      	adds	r3, #1
				 (RxData1[3] == (rand_byte[1] + 1)) &&
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d120      	bne.n	8000e34 <handle_27+0x118>
				 (RxData1[5] == (rand_byte[3] + 1)))
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <handle_27+0x128>)
 8000df4:	795b      	ldrb	r3, [r3, #5]
 8000df6:	461a      	mov	r2, r3
 8000df8:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <handle_27+0x12c>)
 8000dfa:	78db      	ldrb	r3, [r3, #3]
 8000dfc:	3301      	adds	r3, #1
				 (RxData1[4] == (rand_byte[2] + 1)) &&
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d118      	bne.n	8000e34 <handle_27+0x118>
				  TxHeader1.DLC   = 6;
 8000e02:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <handle_27+0x130>)
 8000e04:	2206      	movs	r2, #6
 8000e06:	611a      	str	r2, [r3, #16]
				  TxHeader1.IDE   = CAN_ID_STD;
 8000e08:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <handle_27+0x130>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
				  TxHeader1.RTR   = CAN_RTR_DATA;
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <handle_27+0x130>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	60da      	str	r2, [r3, #12]
				  TxHeader1.StdId = 0x210;
 8000e14:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <handle_27+0x130>)
 8000e16:	f44f 7204 	mov.w	r2, #528	; 0x210
 8000e1a:	601a      	str	r2, [r3, #0]
				  TxData1[0] = RxData1[0] + 0x40;
 8000e1c:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <handle_27+0x128>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	3340      	adds	r3, #64	; 0x40
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <handle_27+0x134>)
 8000e26:	701a      	strb	r2, [r3, #0]
				  TxData1[1] = 0x02;
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <handle_27+0x134>)
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	705a      	strb	r2, [r3, #1]
				  ECU_lock = 0;
 8000e2e:	4b02      	ldr	r3, [pc, #8]	; (8000e38 <handle_27+0x11c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	2000001c 	.word	0x2000001c
 8000e3c:	40020400 	.word	0x40020400
 8000e40:	20000258 	.word	0x20000258
 8000e44:	2000023c 	.word	0x2000023c
 8000e48:	20000260 	.word	0x20000260
 8000e4c:	20000200 	.word	0x20000200
 8000e50:	20000234 	.word	0x20000234
 8000e54:	20000244 	.word	0x20000244
 8000e58:	2000014c 	.word	0x2000014c

08000e5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e62:	f000 ffa7 	bl	8001db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e66:	f000 f841 	bl	8000eec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e6a:	f000 f9f9 	bl	8001260 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000e6e:	f000 f8f9 	bl	8001064 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8000e72:	f000 f9cb 	bl	800120c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000e76:	f000 f97d 	bl	8001174 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000e7a:	f000 f8a1 	bl	8000fc0 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000e7e:	f000 f943 	bl	8001108 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e82:	4817      	ldr	r0, [pc, #92]	; (8000ee0 <main+0x84>)
 8000e84:	f004 f9be 	bl	8005204 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start(&hadc1);
 8000e88:	4816      	ldr	r0, [pc, #88]	; (8000ee4 <main+0x88>)
 8000e8a:	f001 f86d 	bl	8001f68 <HAL_ADC_Start>
  HAL_CAN_Start(&hcan1);
 8000e8e:	4816      	ldr	r0, [pc, #88]	; (8000ee8 <main+0x8c>)
 8000e90:	f001 fe02 	bl	8002a98 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000e94:	2102      	movs	r1, #2
 8000e96:	4814      	ldr	r0, [pc, #80]	; (8000ee8 <main+0x8c>)
 8000e98:	f002 f82f 	bl	8002efa <HAL_CAN_ActivateNotification>

  lcd_init();
 8000e9c:	f7ff fc0e 	bl	80006bc <lcd_init>
  ST7789_Init();
 8000ea0:	f000 fb62 	bl	8001568 <ST7789_Init>
  ST7789_Fill_Color(WHITE);
 8000ea4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000ea8:	f000 fbfc 	bl	80016a4 <ST7789_Fill_Color>

  uint8_t service = 0x27;
 8000eac:	2327      	movs	r3, #39	; 0x27
 8000eae:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 switch (service) {
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	2b2e      	cmp	r3, #46	; 0x2e
 8000eb4:	d009      	beq.n	8000eca <main+0x6e>
 8000eb6:	2b2e      	cmp	r3, #46	; 0x2e
 8000eb8:	dc0d      	bgt.n	8000ed6 <main+0x7a>
 8000eba:	2b22      	cmp	r3, #34	; 0x22
 8000ebc:	d002      	beq.n	8000ec4 <main+0x68>
 8000ebe:	2b27      	cmp	r3, #39	; 0x27
 8000ec0:	d006      	beq.n	8000ed0 <main+0x74>
			break;
		case 0x27:
			handle_27();
			break;
		default:
			break;
 8000ec2:	e008      	b.n	8000ed6 <main+0x7a>
			handle_22();
 8000ec4:	f7ff fda2 	bl	8000a0c <handle_22>
			break;
 8000ec8:	e006      	b.n	8000ed8 <main+0x7c>
			handle_2E();
 8000eca:	f7ff fe15 	bl	8000af8 <handle_2E>
			break;
 8000ece:	e003      	b.n	8000ed8 <main+0x7c>
			handle_27();
 8000ed0:	f7ff ff24 	bl	8000d1c <handle_27>
			break;
 8000ed4:	e000      	b.n	8000ed8 <main+0x7c>
			break;
 8000ed6:	bf00      	nop
	 }
	 HAL_Delay(20);
 8000ed8:	2014      	movs	r0, #20
 8000eda:	f000 ffdd 	bl	8001e98 <HAL_Delay>
	 switch (service) {
 8000ede:	e7e7      	b.n	8000eb0 <main+0x54>
 8000ee0:	20000174 	.word	0x20000174
 8000ee4:	20000104 	.word	0x20000104
 8000ee8:	2000014c 	.word	0x2000014c

08000eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b094      	sub	sp, #80	; 0x50
 8000ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef2:	f107 0320 	add.w	r3, r7, #32
 8000ef6:	2230      	movs	r2, #48	; 0x30
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f005 fdf2 	bl	8006ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f00:	f107 030c 	add.w	r3, r7, #12
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f10:	2300      	movs	r3, #0
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <SystemClock_Config+0xcc>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	4a27      	ldr	r2, [pc, #156]	; (8000fb8 <SystemClock_Config+0xcc>)
 8000f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f20:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <SystemClock_Config+0xcc>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <SystemClock_Config+0xd0>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a21      	ldr	r2, [pc, #132]	; (8000fbc <SystemClock_Config+0xd0>)
 8000f36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3a:	6013      	str	r3, [r2, #0]
 8000f3c:	4b1f      	ldr	r3, [pc, #124]	; (8000fbc <SystemClock_Config+0xd0>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f52:	2302      	movs	r3, #2
 8000f54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000f60:	23a0      	movs	r3, #160	; 0xa0
 8000f62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f64:	2302      	movs	r3, #2
 8000f66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f68:	2304      	movs	r3, #4
 8000f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6c:	f107 0320 	add.w	r3, r7, #32
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 fd8b 	bl	8003a8c <HAL_RCC_OscConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f7c:	f000 f9e6 	bl	800134c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f80:	230f      	movs	r3, #15
 8000f82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f84:	2302      	movs	r3, #2
 8000f86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	2105      	movs	r1, #5
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f002 ffec 	bl	8003f7c <HAL_RCC_ClockConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000faa:	f000 f9cf 	bl	800134c <Error_Handler>
  }
}
 8000fae:	bf00      	nop
 8000fb0:	3750      	adds	r7, #80	; 0x50
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40007000 	.word	0x40007000

08000fc0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fd2:	4b21      	ldr	r3, [pc, #132]	; (8001058 <MX_ADC1_Init+0x98>)
 8000fd4:	4a21      	ldr	r2, [pc, #132]	; (800105c <MX_ADC1_Init+0x9c>)
 8000fd6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <MX_ADC1_Init+0x98>)
 8000fda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fde:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fe0:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <MX_ADC1_Init+0x98>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <MX_ADC1_Init+0x98>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fec:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <MX_ADC1_Init+0x98>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ff2:	4b19      	ldr	r3, [pc, #100]	; (8001058 <MX_ADC1_Init+0x98>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <MX_ADC1_Init+0x98>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <MX_ADC1_Init+0x98>)
 8001002:	4a17      	ldr	r2, [pc, #92]	; (8001060 <MX_ADC1_Init+0xa0>)
 8001004:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <MX_ADC1_Init+0x98>)
 8001008:	2200      	movs	r2, #0
 800100a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <MX_ADC1_Init+0x98>)
 800100e:	2201      	movs	r2, #1
 8001010:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_ADC1_Init+0x98>)
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_ADC1_Init+0x98>)
 800101c:	2201      	movs	r2, #1
 800101e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001020:	480d      	ldr	r0, [pc, #52]	; (8001058 <MX_ADC1_Init+0x98>)
 8001022:	f000 ff5d 	bl	8001ee0 <HAL_ADC_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800102c:	f000 f98e 	bl	800134c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001030:	230e      	movs	r3, #14
 8001032:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001034:	2301      	movs	r3, #1
 8001036:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103c:	463b      	mov	r3, r7
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_ADC1_Init+0x98>)
 8001042:	f001 f92f 	bl	80022a4 <HAL_ADC_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800104c:	f000 f97e 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000104 	.word	0x20000104
 800105c:	40012000 	.word	0x40012000
 8001060:	0f000001 	.word	0x0f000001

08001064 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800106a:	4b25      	ldr	r3, [pc, #148]	; (8001100 <MX_CAN1_Init+0x9c>)
 800106c:	4a25      	ldr	r2, [pc, #148]	; (8001104 <MX_CAN1_Init+0xa0>)
 800106e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001070:	4b23      	ldr	r3, [pc, #140]	; (8001100 <MX_CAN1_Init+0x9c>)
 8001072:	2210      	movs	r2, #16
 8001074:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001076:	4b22      	ldr	r3, [pc, #136]	; (8001100 <MX_CAN1_Init+0x9c>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800107c:	4b20      	ldr	r3, [pc, #128]	; (8001100 <MX_CAN1_Init+0x9c>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001082:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <MX_CAN1_Init+0x9c>)
 8001084:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001088:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <MX_CAN1_Init+0x9c>)
 800108c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001090:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001092:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <MX_CAN1_Init+0x9c>)
 8001094:	2200      	movs	r2, #0
 8001096:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <MX_CAN1_Init+0x9c>)
 800109a:	2200      	movs	r2, #0
 800109c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <MX_CAN1_Init+0x9c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <MX_CAN1_Init+0x9c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <MX_CAN1_Init+0x9c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <MX_CAN1_Init+0x9c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80010b6:	4812      	ldr	r0, [pc, #72]	; (8001100 <MX_CAN1_Init+0x9c>)
 80010b8:	f001 fb12 	bl	80026e0 <HAL_CAN_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80010c2:	f000 f943 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80010c6:	2301      	movs	r3, #1
 80010c8:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 1;  // which filter bank to use from the assigned ones
 80010ca:	2301      	movs	r3, #1
 80010cc:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80010e6:	2301      	movs	r3, #1
 80010e8:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 80010ea:	2314      	movs	r3, #20
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80010ee:	463b      	mov	r3, r7
 80010f0:	4619      	mov	r1, r3
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <MX_CAN1_Init+0x9c>)
 80010f4:	f001 fbf0 	bl	80028d8 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 80010f8:	bf00      	nop
 80010fa:	3728      	adds	r7, #40	; 0x28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	2000014c 	.word	0x2000014c
 8001104:	40006400 	.word	0x40006400

08001108 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800110c:	4b17      	ldr	r3, [pc, #92]	; (800116c <MX_SPI1_Init+0x64>)
 800110e:	4a18      	ldr	r2, [pc, #96]	; (8001170 <MX_SPI1_Init+0x68>)
 8001110:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001112:	4b16      	ldr	r3, [pc, #88]	; (800116c <MX_SPI1_Init+0x64>)
 8001114:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001118:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <MX_SPI1_Init+0x64>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <MX_SPI1_Init+0x64>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <MX_SPI1_Init+0x64>)
 8001128:	2202      	movs	r2, #2
 800112a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <MX_SPI1_Init+0x64>)
 800112e:	2200      	movs	r2, #0
 8001130:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MX_SPI1_Init+0x64>)
 8001134:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001138:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <MX_SPI1_Init+0x64>)
 800113c:	2208      	movs	r2, #8
 800113e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001140:	4b0a      	ldr	r3, [pc, #40]	; (800116c <MX_SPI1_Init+0x64>)
 8001142:	2200      	movs	r2, #0
 8001144:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <MX_SPI1_Init+0x64>)
 8001148:	2200      	movs	r2, #0
 800114a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <MX_SPI1_Init+0x64>)
 800114e:	2200      	movs	r2, #0
 8001150:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <MX_SPI1_Init+0x64>)
 8001154:	220a      	movs	r2, #10
 8001156:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001158:	4804      	ldr	r0, [pc, #16]	; (800116c <MX_SPI1_Init+0x64>)
 800115a:	f003 f92f 	bl	80043bc <HAL_SPI_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001164:	f000 f8f2 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200000ac 	.word	0x200000ac
 8001170:	40013000 	.word	0x40013000

08001174 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117a:	f107 0308 	add.w	r3, r7, #8
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001188:	463b      	mov	r3, r7
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001190:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <MX_TIM2_Init+0x94>)
 8001192:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001196:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <MX_TIM2_Init+0x94>)
 800119a:	2263      	movs	r2, #99	; 0x63
 800119c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119e:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <MX_TIM2_Init+0x94>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <MX_TIM2_Init+0x94>)
 80011a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <MX_TIM2_Init+0x94>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <MX_TIM2_Init+0x94>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011b8:	4813      	ldr	r0, [pc, #76]	; (8001208 <MX_TIM2_Init+0x94>)
 80011ba:	f003 ffd3 	bl	8005164 <HAL_TIM_Base_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011c4:	f000 f8c2 	bl	800134c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	4619      	mov	r1, r3
 80011d4:	480c      	ldr	r0, [pc, #48]	; (8001208 <MX_TIM2_Init+0x94>)
 80011d6:	f004 f98d 	bl	80054f4 <HAL_TIM_ConfigClockSource>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011e0:	f000 f8b4 	bl	800134c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e4:	2300      	movs	r3, #0
 80011e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ec:	463b      	mov	r3, r7
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_TIM2_Init+0x94>)
 80011f2:	f004 fbb3 	bl	800595c <HAL_TIMEx_MasterConfigSynchronization>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011fc:	f000 f8a6 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001200:	bf00      	nop
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000174 	.word	0x20000174

0800120c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_USART1_UART_Init+0x4c>)
 8001212:	4a12      	ldr	r2, [pc, #72]	; (800125c <MX_USART1_UART_Init+0x50>)
 8001214:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <MX_USART1_UART_Init+0x4c>)
 8001218:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800121c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_USART1_UART_Init+0x4c>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_USART1_UART_Init+0x4c>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <MX_USART1_UART_Init+0x4c>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_USART1_UART_Init+0x4c>)
 8001232:	220c      	movs	r2, #12
 8001234:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <MX_USART1_UART_Init+0x4c>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_USART1_UART_Init+0x4c>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <MX_USART1_UART_Init+0x4c>)
 8001244:	f004 fc1a 	bl	8005a7c <HAL_UART_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800124e:	f000 f87d 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200001bc 	.word	0x200001bc
 800125c:	40011000 	.word	0x40011000

08001260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	4b2d      	ldr	r3, [pc, #180]	; (8001330 <MX_GPIO_Init+0xd0>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a2c      	ldr	r2, [pc, #176]	; (8001330 <MX_GPIO_Init+0xd0>)
 8001280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <MX_GPIO_Init+0xd0>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b26      	ldr	r3, [pc, #152]	; (8001330 <MX_GPIO_Init+0xd0>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a25      	ldr	r2, [pc, #148]	; (8001330 <MX_GPIO_Init+0xd0>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b23      	ldr	r3, [pc, #140]	; (8001330 <MX_GPIO_Init+0xd0>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <MX_GPIO_Init+0xd0>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a1e      	ldr	r2, [pc, #120]	; (8001330 <MX_GPIO_Init+0xd0>)
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <MX_GPIO_Init+0xd0>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	4b18      	ldr	r3, [pc, #96]	; (8001330 <MX_GPIO_Init+0xd0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a17      	ldr	r2, [pc, #92]	; (8001330 <MX_GPIO_Init+0xd0>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <MX_GPIO_Init+0xd0>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|LED1_Pin|GPIO_PIN_2|GPIO_PIN_6
 80012e6:	2200      	movs	r2, #0
 80012e8:	f240 31c7 	movw	r1, #967	; 0x3c7
 80012ec:	4811      	ldr	r0, [pc, #68]	; (8001334 <MX_GPIO_Init+0xd4>)
 80012ee:	f002 fb99 	bl	8003a24 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Pin LED1_Pin PB2 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = LED_Pin|LED1_Pin|GPIO_PIN_2|GPIO_PIN_6
 80012f2:	f240 33c7 	movw	r3, #967	; 0x3c7
 80012f6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	480a      	ldr	r0, [pc, #40]	; (8001334 <MX_GPIO_Init+0xd4>)
 800130c:	f002 f9ee 	bl	80036ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001310:	2310      	movs	r3, #16
 8001312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001314:	2300      	movs	r3, #0
 8001316:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001318:	2301      	movs	r3, #1
 800131a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	4804      	ldr	r0, [pc, #16]	; (8001334 <MX_GPIO_Init+0xd4>)
 8001324:	f002 f9e2 	bl	80036ec <HAL_GPIO_Init>

}
 8001328:	bf00      	nop
 800132a:	3728      	adds	r7, #40	; 0x28
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40023800 	.word	0x40023800
 8001334:	40020400 	.word	0x40020400

08001338 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]

}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001350:	b672      	cpsid	i
}
 8001352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001354:	e7fe      	b.n	8001354 <Error_Handler+0x8>
	...

08001358 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8001362:	2200      	movs	r2, #0
 8001364:	2180      	movs	r1, #128	; 0x80
 8001366:	480c      	ldr	r0, [pc, #48]	; (8001398 <ST7789_WriteCommand+0x40>)
 8001368:	f002 fb5c 	bl	8003a24 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 800136c:	2200      	movs	r2, #0
 800136e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001372:	4809      	ldr	r0, [pc, #36]	; (8001398 <ST7789_WriteCommand+0x40>)
 8001374:	f002 fb56 	bl	8003a24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001378:	1df9      	adds	r1, r7, #7
 800137a:	f04f 33ff 	mov.w	r3, #4294967295
 800137e:	2201      	movs	r2, #1
 8001380:	4806      	ldr	r0, [pc, #24]	; (800139c <ST7789_WriteCommand+0x44>)
 8001382:	f003 f8a4 	bl	80044ce <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001386:	2201      	movs	r2, #1
 8001388:	2180      	movs	r1, #128	; 0x80
 800138a:	4803      	ldr	r0, [pc, #12]	; (8001398 <ST7789_WriteCommand+0x40>)
 800138c:	f002 fb4a 	bl	8003a24 <HAL_GPIO_WritePin>
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40020400 	.word	0x40020400
 800139c:	200000ac 	.word	0x200000ac

080013a0 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 80013aa:	2200      	movs	r2, #0
 80013ac:	2180      	movs	r1, #128	; 0x80
 80013ae:	4816      	ldr	r0, [pc, #88]	; (8001408 <ST7789_WriteData+0x68>)
 80013b0:	f002 fb38 	bl	8003a24 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 80013b4:	2201      	movs	r2, #1
 80013b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ba:	4813      	ldr	r0, [pc, #76]	; (8001408 <ST7789_WriteData+0x68>)
 80013bc:	f002 fb32 	bl	8003a24 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 80013c0:	e015      	b.n	80013ee <ST7789_WriteData+0x4e>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013c8:	4293      	cmp	r3, r2
 80013ca:	bf28      	it	cs
 80013cc:	4613      	movcs	r3, r2
 80013ce:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80013d0:	89fa      	ldrh	r2, [r7, #14]
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	480c      	ldr	r0, [pc, #48]	; (800140c <ST7789_WriteData+0x6c>)
 80013da:	f003 f878 	bl	80044ce <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 80013de:	89fb      	ldrh	r3, [r7, #14]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	4413      	add	r3, r2
 80013e4:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80013e6:	89fb      	ldrh	r3, [r7, #14]
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1e6      	bne.n	80013c2 <ST7789_WriteData+0x22>
	}

	ST7789_UnSelect();
 80013f4:	2201      	movs	r2, #1
 80013f6:	2180      	movs	r1, #128	; 0x80
 80013f8:	4803      	ldr	r0, [pc, #12]	; (8001408 <ST7789_WriteData+0x68>)
 80013fa:	f002 fb13 	bl	8003a24 <HAL_GPIO_WritePin>
}
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40020400 	.word	0x40020400
 800140c:	200000ac 	.word	0x200000ac

08001410 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800141a:	2200      	movs	r2, #0
 800141c:	2180      	movs	r1, #128	; 0x80
 800141e:	480c      	ldr	r0, [pc, #48]	; (8001450 <ST7789_WriteSmallData+0x40>)
 8001420:	f002 fb00 	bl	8003a24 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8001424:	2201      	movs	r2, #1
 8001426:	f44f 7180 	mov.w	r1, #256	; 0x100
 800142a:	4809      	ldr	r0, [pc, #36]	; (8001450 <ST7789_WriteSmallData+0x40>)
 800142c:	f002 fafa 	bl	8003a24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8001430:	1df9      	adds	r1, r7, #7
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	2201      	movs	r2, #1
 8001438:	4806      	ldr	r0, [pc, #24]	; (8001454 <ST7789_WriteSmallData+0x44>)
 800143a:	f003 f848 	bl	80044ce <HAL_SPI_Transmit>
	ST7789_UnSelect();
 800143e:	2201      	movs	r2, #1
 8001440:	2180      	movs	r1, #128	; 0x80
 8001442:	4803      	ldr	r0, [pc, #12]	; (8001450 <ST7789_WriteSmallData+0x40>)
 8001444:	f002 faee 	bl	8003a24 <HAL_GPIO_WritePin>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40020400 	.word	0x40020400
 8001454:	200000ac 	.word	0x200000ac

08001458 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8001462:	2036      	movs	r0, #54	; 0x36
 8001464:	f7ff ff78 	bl	8001358 <ST7789_WriteCommand>
	switch (m) {
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	2b03      	cmp	r3, #3
 800146c:	d81a      	bhi.n	80014a4 <ST7789_SetRotation+0x4c>
 800146e:	a201      	add	r2, pc, #4	; (adr r2, 8001474 <ST7789_SetRotation+0x1c>)
 8001470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001474:	08001485 	.word	0x08001485
 8001478:	0800148d 	.word	0x0800148d
 800147c:	08001495 	.word	0x08001495
 8001480:	0800149d 	.word	0x0800149d
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8001484:	20c0      	movs	r0, #192	; 0xc0
 8001486:	f7ff ffc3 	bl	8001410 <ST7789_WriteSmallData>
		break;
 800148a:	e00c      	b.n	80014a6 <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 800148c:	20a0      	movs	r0, #160	; 0xa0
 800148e:	f7ff ffbf 	bl	8001410 <ST7789_WriteSmallData>
		break;
 8001492:	e008      	b.n	80014a6 <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8001494:	2000      	movs	r0, #0
 8001496:	f7ff ffbb 	bl	8001410 <ST7789_WriteSmallData>
		break;
 800149a:	e004      	b.n	80014a6 <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 800149c:	2060      	movs	r0, #96	; 0x60
 800149e:	f7ff ffb7 	bl	8001410 <ST7789_WriteSmallData>
		break;
 80014a2:	e000      	b.n	80014a6 <ST7789_SetRotation+0x4e>
	default:
		break;
 80014a4:	bf00      	nop
	}
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop

080014b0 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80014b0:	b590      	push	{r4, r7, lr}
 80014b2:	b087      	sub	sp, #28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4604      	mov	r4, r0
 80014b8:	4608      	mov	r0, r1
 80014ba:	4611      	mov	r1, r2
 80014bc:	461a      	mov	r2, r3
 80014be:	4623      	mov	r3, r4
 80014c0:	80fb      	strh	r3, [r7, #6]
 80014c2:	4603      	mov	r3, r0
 80014c4:	80bb      	strh	r3, [r7, #4]
 80014c6:	460b      	mov	r3, r1
 80014c8:	807b      	strh	r3, [r7, #2]
 80014ca:	4613      	mov	r3, r2
 80014cc:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 80014ce:	2200      	movs	r2, #0
 80014d0:	2180      	movs	r1, #128	; 0x80
 80014d2:	4824      	ldr	r0, [pc, #144]	; (8001564 <ST7789_SetAddressWindow+0xb4>)
 80014d4:	f002 faa6 	bl	8003a24 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	82fb      	strh	r3, [r7, #22]
 80014dc:	887b      	ldrh	r3, [r7, #2]
 80014de:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 80014e0:	88bb      	ldrh	r3, [r7, #4]
 80014e2:	827b      	strh	r3, [r7, #18]
 80014e4:	883b      	ldrh	r3, [r7, #0]
 80014e6:	823b      	strh	r3, [r7, #16]

	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET);
 80014e8:	202a      	movs	r0, #42	; 0x2a
 80014ea:	f7ff ff35 	bl	8001358 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 80014ee:	8afb      	ldrh	r3, [r7, #22]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	733b      	strb	r3, [r7, #12]
 80014f8:	8afb      	ldrh	r3, [r7, #22]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	737b      	strb	r3, [r7, #13]
 80014fe:	8abb      	ldrh	r3, [r7, #20]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	b29b      	uxth	r3, r3
 8001504:	b2db      	uxtb	r3, r3
 8001506:	73bb      	strb	r3, [r7, #14]
 8001508:	8abb      	ldrh	r3, [r7, #20]
 800150a:	b2db      	uxtb	r3, r3
 800150c:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 800150e:	f107 030c 	add.w	r3, r7, #12
 8001512:	2104      	movs	r1, #4
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff43 	bl	80013a0 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 800151a:	202b      	movs	r0, #43	; 0x2b
 800151c:	f7ff ff1c 	bl	8001358 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8001520:	8a7b      	ldrh	r3, [r7, #18]
 8001522:	0a1b      	lsrs	r3, r3, #8
 8001524:	b29b      	uxth	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	723b      	strb	r3, [r7, #8]
 800152a:	8a7b      	ldrh	r3, [r7, #18]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	727b      	strb	r3, [r7, #9]
 8001530:	8a3b      	ldrh	r3, [r7, #16]
 8001532:	0a1b      	lsrs	r3, r3, #8
 8001534:	b29b      	uxth	r3, r3
 8001536:	b2db      	uxtb	r3, r3
 8001538:	72bb      	strb	r3, [r7, #10]
 800153a:	8a3b      	ldrh	r3, [r7, #16]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8001540:	f107 0308 	add.w	r3, r7, #8
 8001544:	2104      	movs	r1, #4
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff ff2a 	bl	80013a0 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 800154c:	202c      	movs	r0, #44	; 0x2c
 800154e:	f7ff ff03 	bl	8001358 <ST7789_WriteCommand>
	ST7789_UnSelect();
 8001552:	2201      	movs	r2, #1
 8001554:	2180      	movs	r1, #128	; 0x80
 8001556:	4803      	ldr	r0, [pc, #12]	; (8001564 <ST7789_SetAddressWindow+0xb4>)
 8001558:	f002 fa64 	bl	8003a24 <HAL_GPIO_WritePin>
}
 800155c:	bf00      	nop
 800155e:	371c      	adds	r7, #28
 8001560:	46bd      	mov	sp, r7
 8001562:	bd90      	pop	{r4, r7, pc}
 8001564:	40020400 	.word	0x40020400

08001568 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b08b      	sub	sp, #44	; 0x2c
 800156c:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(25);
 800156e:	2019      	movs	r0, #25
 8001570:	f000 fc92 	bl	8001e98 <HAL_Delay>
    ST7789_RST_Clr();
 8001574:	2200      	movs	r2, #0
 8001576:	2104      	movs	r1, #4
 8001578:	4846      	ldr	r0, [pc, #280]	; (8001694 <ST7789_Init+0x12c>)
 800157a:	f002 fa53 	bl	8003a24 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 800157e:	2019      	movs	r0, #25
 8001580:	f000 fc8a 	bl	8001e98 <HAL_Delay>
    ST7789_RST_Set();
 8001584:	2201      	movs	r2, #1
 8001586:	2104      	movs	r1, #4
 8001588:	4842      	ldr	r0, [pc, #264]	; (8001694 <ST7789_Init+0x12c>)
 800158a:	f002 fa4b 	bl	8003a24 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800158e:	2032      	movs	r0, #50	; 0x32
 8001590:	f000 fc82 	bl	8001e98 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8001594:	203a      	movs	r0, #58	; 0x3a
 8001596:	f7ff fedf 	bl	8001358 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 800159a:	2055      	movs	r0, #85	; 0x55
 800159c:	f7ff ff38 	bl	8001410 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 80015a0:	20b2      	movs	r0, #178	; 0xb2
 80015a2:	f7ff fed9 	bl	8001358 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80015a6:	4a3c      	ldr	r2, [pc, #240]	; (8001698 <ST7789_Init+0x130>)
 80015a8:	f107 0320 	add.w	r3, r7, #32
 80015ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015b0:	6018      	str	r0, [r3, #0]
 80015b2:	3304      	adds	r3, #4
 80015b4:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 80015b6:	f107 0320 	add.w	r3, r7, #32
 80015ba:	2105      	movs	r1, #5
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff feef 	bl	80013a0 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 80015c2:	2001      	movs	r0, #1
 80015c4:	f7ff ff48 	bl	8001458 <ST7789_SetRotation>

	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 80015c8:	20b7      	movs	r0, #183	; 0xb7
 80015ca:	f7ff fec5 	bl	8001358 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 80015ce:	2035      	movs	r0, #53	; 0x35
 80015d0:	f7ff ff1e 	bl	8001410 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 80015d4:	20bb      	movs	r0, #187	; 0xbb
 80015d6:	f7ff febf 	bl	8001358 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 80015da:	2019      	movs	r0, #25
 80015dc:	f7ff ff18 	bl	8001410 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL
 80015e0:	20c0      	movs	r0, #192	; 0xc0
 80015e2:	f7ff feb9 	bl	8001358 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 80015e6:	202c      	movs	r0, #44	; 0x2c
 80015e8:	f7ff ff12 	bl	8001410 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 80015ec:	20c2      	movs	r0, #194	; 0xc2
 80015ee:	f7ff feb3 	bl	8001358 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 80015f2:	2001      	movs	r0, #1
 80015f4:	f7ff ff0c 	bl	8001410 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 80015f8:	20c3      	movs	r0, #195	; 0xc3
 80015fa:	f7ff fead 	bl	8001358 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 80015fe:	2012      	movs	r0, #18
 8001600:	f7ff ff06 	bl	8001410 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8001604:	20c4      	movs	r0, #196	; 0xc4
 8001606:	f7ff fea7 	bl	8001358 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 800160a:	2020      	movs	r0, #32
 800160c:	f7ff ff00 	bl	8001410 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8001610:	20c6      	movs	r0, #198	; 0xc6
 8001612:	f7ff fea1 	bl	8001358 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8001616:	200f      	movs	r0, #15
 8001618:	f7ff fefa 	bl	8001410 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 800161c:	20d0      	movs	r0, #208	; 0xd0
 800161e:	f7ff fe9b 	bl	8001358 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8001622:	20a4      	movs	r0, #164	; 0xa4
 8001624:	f7ff fef4 	bl	8001410 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8001628:	20a1      	movs	r0, #161	; 0xa1
 800162a:	f7ff fef1 	bl	8001410 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 800162e:	20e0      	movs	r0, #224	; 0xe0
 8001630:	f7ff fe92 	bl	8001358 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8001634:	4b19      	ldr	r3, [pc, #100]	; (800169c <ST7789_Init+0x134>)
 8001636:	f107 0410 	add.w	r4, r7, #16
 800163a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800163c:	c407      	stmia	r4!, {r0, r1, r2}
 800163e:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001640:	f107 0310 	add.w	r3, r7, #16
 8001644:	210e      	movs	r1, #14
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff feaa 	bl	80013a0 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 800164c:	20e1      	movs	r0, #225	; 0xe1
 800164e:	f7ff fe83 	bl	8001358 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8001652:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <ST7789_Init+0x138>)
 8001654:	463c      	mov	r4, r7
 8001656:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001658:	c407      	stmia	r4!, {r0, r1, r2}
 800165a:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 800165c:	463b      	mov	r3, r7
 800165e:	210e      	movs	r1, #14
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fe9d 	bl	80013a0 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8001666:	2021      	movs	r0, #33	; 0x21
 8001668:	f7ff fe76 	bl	8001358 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 800166c:	2011      	movs	r0, #17
 800166e:	f7ff fe73 	bl	8001358 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8001672:	2013      	movs	r0, #19
 8001674:	f7ff fe70 	bl	8001358 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on
 8001678:	2029      	movs	r0, #41	; 0x29
 800167a:	f7ff fe6d 	bl	8001358 <ST7789_WriteCommand>

	HAL_Delay(50);
 800167e:	2032      	movs	r0, #50	; 0x32
 8001680:	f000 fc0a 	bl	8001e98 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8001684:	2000      	movs	r0, #0
 8001686:	f000 f80d 	bl	80016a4 <ST7789_Fill_Color>
}
 800168a:	bf00      	nop
 800168c:	372c      	adds	r7, #44	; 0x2c
 800168e:	46bd      	mov	sp, r7
 8001690:	bd90      	pop	{r4, r7, pc}
 8001692:	bf00      	nop
 8001694:	40020400 	.word	0x40020400
 8001698:	08007434 	.word	0x08007434
 800169c:	0800743c 	.word	0x0800743c
 80016a0:	0800744c 	.word	0x0800744c

080016a4 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80016ae:	23ef      	movs	r3, #239	; 0xef
 80016b0:	f240 123f 	movw	r2, #319	; 0x13f
 80016b4:	2100      	movs	r1, #0
 80016b6:	2000      	movs	r0, #0
 80016b8:	f7ff fefa 	bl	80014b0 <ST7789_SetAddressWindow>
	ST7789_Select();
 80016bc:	2200      	movs	r2, #0
 80016be:	2180      	movs	r1, #128	; 0x80
 80016c0:	4816      	ldr	r0, [pc, #88]	; (800171c <ST7789_Fill_Color+0x78>)
 80016c2:	f002 f9af 	bl	8003a24 <HAL_GPIO_WritePin>
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 80016c6:	2300      	movs	r3, #0
 80016c8:	81fb      	strh	r3, [r7, #14]
 80016ca:	e019      	b.n	8001700 <ST7789_Fill_Color+0x5c>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80016cc:	2300      	movs	r3, #0
 80016ce:	81bb      	strh	r3, [r7, #12]
 80016d0:	e010      	b.n	80016f4 <ST7789_Fill_Color+0x50>
					uint8_t data[] = {color >> 8, color & 0xFF};
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	723b      	strb	r3, [r7, #8]
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 80016e2:	f107 0308 	add.w	r3, r7, #8
 80016e6:	2102      	movs	r1, #2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fe59 	bl	80013a0 <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 80016ee:	89bb      	ldrh	r3, [r7, #12]
 80016f0:	3301      	adds	r3, #1
 80016f2:	81bb      	strh	r3, [r7, #12]
 80016f4:	89bb      	ldrh	r3, [r7, #12]
 80016f6:	2bef      	cmp	r3, #239	; 0xef
 80016f8:	d9eb      	bls.n	80016d2 <ST7789_Fill_Color+0x2e>
		for (i = 0; i < ST7789_WIDTH; i++)
 80016fa:	89fb      	ldrh	r3, [r7, #14]
 80016fc:	3301      	adds	r3, #1
 80016fe:	81fb      	strh	r3, [r7, #14]
 8001700:	89fb      	ldrh	r3, [r7, #14]
 8001702:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001706:	d3e1      	bcc.n	80016cc <ST7789_Fill_Color+0x28>
				}
	#endif
	ST7789_UnSelect();
 8001708:	2201      	movs	r2, #1
 800170a:	2180      	movs	r1, #128	; 0x80
 800170c:	4803      	ldr	r0, [pc, #12]	; (800171c <ST7789_Fill_Color+0x78>)
 800170e:	f002 f989 	bl	8003a24 <HAL_GPIO_WritePin>
}
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40020400 	.word	0x40020400

08001720 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001720:	b082      	sub	sp, #8
 8001722:	b590      	push	{r4, r7, lr}
 8001724:	b089      	sub	sp, #36	; 0x24
 8001726:	af00      	add	r7, sp, #0
 8001728:	637b      	str	r3, [r7, #52]	; 0x34
 800172a:	4603      	mov	r3, r0
 800172c:	80fb      	strh	r3, [r7, #6]
 800172e:	460b      	mov	r3, r1
 8001730:	80bb      	strh	r3, [r7, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8001736:	2200      	movs	r2, #0
 8001738:	2180      	movs	r1, #128	; 0x80
 800173a:	4838      	ldr	r0, [pc, #224]	; (800181c <ST7789_WriteChar+0xfc>)
 800173c:	f002 f972 	bl	8003a24 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8001740:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001744:	b29a      	uxth	r2, r3
 8001746:	88fb      	ldrh	r3, [r7, #6]
 8001748:	4413      	add	r3, r2
 800174a:	b29b      	uxth	r3, r3
 800174c:	3b01      	subs	r3, #1
 800174e:	b29c      	uxth	r4, r3
 8001750:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001754:	b29a      	uxth	r2, r3
 8001756:	88bb      	ldrh	r3, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	b29b      	uxth	r3, r3
 800175c:	3b01      	subs	r3, #1
 800175e:	b29b      	uxth	r3, r3
 8001760:	88b9      	ldrh	r1, [r7, #4]
 8001762:	88f8      	ldrh	r0, [r7, #6]
 8001764:	4622      	mov	r2, r4
 8001766:	f7ff fea3 	bl	80014b0 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
 800176e:	e043      	b.n	80017f8 <ST7789_WriteChar+0xd8>
		b = font.data[(ch - 32) * font.height + i];
 8001770:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001772:	78fb      	ldrb	r3, [r7, #3]
 8001774:	3b20      	subs	r3, #32
 8001776:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800177a:	fb01 f303 	mul.w	r3, r1, r3
 800177e:	4619      	mov	r1, r3
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	440b      	add	r3, r1
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	881b      	ldrh	r3, [r3, #0]
 800178a:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 800178c:	2300      	movs	r3, #0
 800178e:	61bb      	str	r3, [r7, #24]
 8001790:	e029      	b.n	80017e6 <ST7789_WriteChar+0xc6>
			if ((b << j) & 0x8000) {
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00e      	beq.n	80017c0 <ST7789_WriteChar+0xa0>
				uint8_t data[] = {color >> 8, color & 0xFF};
 80017a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80017a4:	0a1b      	lsrs	r3, r3, #8
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	743b      	strb	r3, [r7, #16]
 80017ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 80017b2:	f107 0310 	add.w	r3, r7, #16
 80017b6:	2102      	movs	r1, #2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fdf1 	bl	80013a0 <ST7789_WriteData>
 80017be:	e00f      	b.n	80017e0 <ST7789_WriteChar+0xc0>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 80017c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	733b      	strb	r3, [r7, #12]
 80017cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 80017d4:	f107 030c 	add.w	r3, r7, #12
 80017d8:	2102      	movs	r1, #2
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fde0 	bl	80013a0 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	3301      	adds	r3, #1
 80017e4:	61bb      	str	r3, [r7, #24]
 80017e6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80017ea:	461a      	mov	r2, r3
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d3cf      	bcc.n	8001792 <ST7789_WriteChar+0x72>
	for (i = 0; i < font.height; i++) {
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3301      	adds	r3, #1
 80017f6:	61fb      	str	r3, [r7, #28]
 80017f8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80017fc:	461a      	mov	r2, r3
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	4293      	cmp	r3, r2
 8001802:	d3b5      	bcc.n	8001770 <ST7789_WriteChar+0x50>
			}
		}
	}
	ST7789_UnSelect();
 8001804:	2201      	movs	r2, #1
 8001806:	2180      	movs	r1, #128	; 0x80
 8001808:	4804      	ldr	r0, [pc, #16]	; (800181c <ST7789_WriteChar+0xfc>)
 800180a:	f002 f90b 	bl	8003a24 <HAL_GPIO_WritePin>
}
 800180e:	bf00      	nop
 8001810:	3724      	adds	r7, #36	; 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001818:	b002      	add	sp, #8
 800181a:	4770      	bx	lr
 800181c:	40020400 	.word	0x40020400

08001820 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001820:	b082      	sub	sp, #8
 8001822:	b580      	push	{r7, lr}
 8001824:	b086      	sub	sp, #24
 8001826:	af04      	add	r7, sp, #16
 8001828:	603a      	str	r2, [r7, #0]
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	4603      	mov	r3, r0
 800182e:	80fb      	strh	r3, [r7, #6]
 8001830:	460b      	mov	r3, r1
 8001832:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8001834:	2200      	movs	r2, #0
 8001836:	2180      	movs	r1, #128	; 0x80
 8001838:	4822      	ldr	r0, [pc, #136]	; (80018c4 <ST7789_WriteString+0xa4>)
 800183a:	f002 f8f3 	bl	8003a24 <HAL_GPIO_WritePin>
	while (*str) {
 800183e:	e02e      	b.n	800189e <ST7789_WriteString+0x7e>
		if (x + font.width >= ST7789_WIDTH) {
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	7d3a      	ldrb	r2, [r7, #20]
 8001844:	4413      	add	r3, r2
 8001846:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800184a:	db13      	blt.n	8001874 <ST7789_WriteString+0x54>
			x = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8001850:	7d7b      	ldrb	r3, [r7, #21]
 8001852:	b29a      	uxth	r2, r3
 8001854:	88bb      	ldrh	r3, [r7, #4]
 8001856:	4413      	add	r3, r2
 8001858:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 800185a:	88bb      	ldrh	r3, [r7, #4]
 800185c:	7d7a      	ldrb	r2, [r7, #21]
 800185e:	4413      	add	r3, r2
 8001860:	2bef      	cmp	r3, #239	; 0xef
 8001862:	dc21      	bgt.n	80018a8 <ST7789_WriteString+0x88>
				break;
			}

			if (*str == ' ') {
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b20      	cmp	r3, #32
 800186a:	d103      	bne.n	8001874 <ST7789_WriteString+0x54>
				// skip spaces in the beginning of the new line
				str++;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	3301      	adds	r3, #1
 8001870:	603b      	str	r3, [r7, #0]
				continue;
 8001872:	e014      	b.n	800189e <ST7789_WriteString+0x7e>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	781a      	ldrb	r2, [r3, #0]
 8001878:	88b9      	ldrh	r1, [r7, #4]
 800187a:	88f8      	ldrh	r0, [r7, #6]
 800187c:	8c3b      	ldrh	r3, [r7, #32]
 800187e:	9302      	str	r3, [sp, #8]
 8001880:	8bbb      	ldrh	r3, [r7, #28]
 8001882:	9301      	str	r3, [sp, #4]
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f7ff ff49 	bl	8001720 <ST7789_WriteChar>
		x += font.width;
 800188e:	7d3b      	ldrb	r3, [r7, #20]
 8001890:	b29a      	uxth	r2, r3
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	4413      	add	r3, r2
 8001896:	80fb      	strh	r3, [r7, #6]
		str++;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	3301      	adds	r3, #1
 800189c:	603b      	str	r3, [r7, #0]
	while (*str) {
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1cc      	bne.n	8001840 <ST7789_WriteString+0x20>
 80018a6:	e000      	b.n	80018aa <ST7789_WriteString+0x8a>
				break;
 80018a8:	bf00      	nop
	}
	ST7789_UnSelect();
 80018aa:	2201      	movs	r2, #1
 80018ac:	2180      	movs	r1, #128	; 0x80
 80018ae:	4805      	ldr	r0, [pc, #20]	; (80018c4 <ST7789_WriteString+0xa4>)
 80018b0:	f002 f8b8 	bl	8003a24 <HAL_GPIO_WritePin>
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018be:	b002      	add	sp, #8
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40020400 	.word	0x40020400

080018c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	607b      	str	r3, [r7, #4]
 80018d2:	4b10      	ldr	r3, [pc, #64]	; (8001914 <HAL_MspInit+0x4c>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	4a0f      	ldr	r2, [pc, #60]	; (8001914 <HAL_MspInit+0x4c>)
 80018d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018dc:	6453      	str	r3, [r2, #68]	; 0x44
 80018de:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <HAL_MspInit+0x4c>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	603b      	str	r3, [r7, #0]
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_MspInit+0x4c>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	4a08      	ldr	r2, [pc, #32]	; (8001914 <HAL_MspInit+0x4c>)
 80018f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f8:	6413      	str	r3, [r2, #64]	; 0x40
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_MspInit+0x4c>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800

08001918 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a17      	ldr	r2, [pc, #92]	; (8001994 <HAL_ADC_MspInit+0x7c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d127      	bne.n	800198a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	4b16      	ldr	r3, [pc, #88]	; (8001998 <HAL_ADC_MspInit+0x80>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	4a15      	ldr	r2, [pc, #84]	; (8001998 <HAL_ADC_MspInit+0x80>)
 8001944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001948:	6453      	str	r3, [r2, #68]	; 0x44
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <HAL_ADC_MspInit+0x80>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <HAL_ADC_MspInit+0x80>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a0e      	ldr	r2, [pc, #56]	; (8001998 <HAL_ADC_MspInit+0x80>)
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <HAL_ADC_MspInit+0x80>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001972:	2310      	movs	r3, #16
 8001974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001976:	2303      	movs	r3, #3
 8001978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	4619      	mov	r1, r3
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <HAL_ADC_MspInit+0x84>)
 8001986:	f001 feb1 	bl	80036ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800198a:	bf00      	nop
 800198c:	3728      	adds	r7, #40	; 0x28
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40012000 	.word	0x40012000
 8001998:	40023800 	.word	0x40023800
 800199c:	40020800 	.word	0x40020800

080019a0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	; 0x28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a1d      	ldr	r2, [pc, #116]	; (8001a34 <HAL_CAN_MspInit+0x94>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d134      	bne.n	8001a2c <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <HAL_CAN_MspInit+0x98>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	4a1b      	ldr	r2, [pc, #108]	; (8001a38 <HAL_CAN_MspInit+0x98>)
 80019cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019d0:	6413      	str	r3, [r2, #64]	; 0x40
 80019d2:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <HAL_CAN_MspInit+0x98>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <HAL_CAN_MspInit+0x98>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a14      	ldr	r2, [pc, #80]	; (8001a38 <HAL_CAN_MspInit+0x98>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_CAN_MspInit+0x98>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80019fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80019fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a0c:	2309      	movs	r3, #9
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	4619      	mov	r1, r3
 8001a16:	4809      	ldr	r0, [pc, #36]	; (8001a3c <HAL_CAN_MspInit+0x9c>)
 8001a18:	f001 fe68 	bl	80036ec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2100      	movs	r1, #0
 8001a20:	2014      	movs	r0, #20
 8001a22:	f001 fd9a 	bl	800355a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001a26:	2014      	movs	r0, #20
 8001a28:	f001 fdb3 	bl	8003592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001a2c:	bf00      	nop
 8001a2e:	3728      	adds	r7, #40	; 0x28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40006400 	.word	0x40006400
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40020000 	.word	0x40020000

08001a40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08a      	sub	sp, #40	; 0x28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a34      	ldr	r2, [pc, #208]	; (8001b30 <HAL_SPI_MspInit+0xf0>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d161      	bne.n	8001b26 <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	4b33      	ldr	r3, [pc, #204]	; (8001b34 <HAL_SPI_MspInit+0xf4>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	4a32      	ldr	r2, [pc, #200]	; (8001b34 <HAL_SPI_MspInit+0xf4>)
 8001a6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a70:	6453      	str	r3, [r2, #68]	; 0x44
 8001a72:	4b30      	ldr	r3, [pc, #192]	; (8001b34 <HAL_SPI_MspInit+0xf4>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	4b2c      	ldr	r3, [pc, #176]	; (8001b34 <HAL_SPI_MspInit+0xf4>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a2b      	ldr	r2, [pc, #172]	; (8001b34 <HAL_SPI_MspInit+0xf4>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b29      	ldr	r3, [pc, #164]	; (8001b34 <HAL_SPI_MspInit+0xf4>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <HAL_SPI_MspInit+0xf4>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a24      	ldr	r2, [pc, #144]	; (8001b34 <HAL_SPI_MspInit+0xf4>)
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <HAL_SPI_MspInit+0xf4>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ab6:	2310      	movs	r3, #16
 8001ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ac6:	2305      	movs	r3, #5
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4819      	ldr	r0, [pc, #100]	; (8001b38 <HAL_SPI_MspInit+0xf8>)
 8001ad2:	f001 fe0b 	bl	80036ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ad6:	23c0      	movs	r3, #192	; 0xc0
 8001ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ada:	2302      	movs	r3, #2
 8001adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ae6:	2305      	movs	r3, #5
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	4619      	mov	r1, r3
 8001af0:	4811      	ldr	r0, [pc, #68]	; (8001b38 <HAL_SPI_MspInit+0xf8>)
 8001af2:	f001 fdfb 	bl	80036ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001af6:	2308      	movs	r3, #8
 8001af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afa:	2302      	movs	r3, #2
 8001afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001afe:	2301      	movs	r3, #1
 8001b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b02:	2303      	movs	r3, #3
 8001b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b06:	2305      	movs	r3, #5
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4619      	mov	r1, r3
 8001b10:	480a      	ldr	r0, [pc, #40]	; (8001b3c <HAL_SPI_MspInit+0xfc>)
 8001b12:	f001 fdeb 	bl	80036ec <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	2023      	movs	r0, #35	; 0x23
 8001b1c:	f001 fd1d 	bl	800355a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001b20:	2023      	movs	r0, #35	; 0x23
 8001b22:	f001 fd36 	bl	8003592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b26:	bf00      	nop
 8001b28:	3728      	adds	r7, #40	; 0x28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40013000 	.word	0x40013000
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40020000 	.word	0x40020000
 8001b3c:	40020400 	.word	0x40020400

08001b40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b50:	d115      	bne.n	8001b7e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <HAL_TIM_Base_MspInit+0x48>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <HAL_TIM_Base_MspInit+0x48>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6413      	str	r3, [r2, #64]	; 0x40
 8001b62:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <HAL_TIM_Base_MspInit+0x48>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2100      	movs	r1, #0
 8001b72:	201c      	movs	r0, #28
 8001b74:	f001 fcf1 	bl	800355a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b78:	201c      	movs	r0, #28
 8001b7a:	f001 fd0a 	bl	8003592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b7e:	bf00      	nop
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40023800 	.word	0x40023800

08001b8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08a      	sub	sp, #40	; 0x28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a1d      	ldr	r2, [pc, #116]	; (8001c20 <HAL_UART_MspInit+0x94>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d134      	bne.n	8001c18 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <HAL_UART_MspInit+0x98>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	4a1b      	ldr	r2, [pc, #108]	; (8001c24 <HAL_UART_MspInit+0x98>)
 8001bb8:	f043 0310 	orr.w	r3, r3, #16
 8001bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bbe:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <HAL_UART_MspInit+0x98>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	f003 0310 	and.w	r3, r3, #16
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <HAL_UART_MspInit+0x98>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a14      	ldr	r2, [pc, #80]	; (8001c24 <HAL_UART_MspInit+0x98>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <HAL_UART_MspInit+0x98>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001be6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bec:	2302      	movs	r3, #2
 8001bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bf8:	2307      	movs	r3, #7
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfc:	f107 0314 	add.w	r3, r7, #20
 8001c00:	4619      	mov	r1, r3
 8001c02:	4809      	ldr	r0, [pc, #36]	; (8001c28 <HAL_UART_MspInit+0x9c>)
 8001c04:	f001 fd72 	bl	80036ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	2025      	movs	r0, #37	; 0x25
 8001c0e:	f001 fca4 	bl	800355a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c12:	2025      	movs	r0, #37	; 0x25
 8001c14:	f001 fcbd 	bl	8003592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c18:	bf00      	nop
 8001c1a:	3728      	adds	r7, #40	; 0x28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40011000 	.word	0x40011000
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40020000 	.word	0x40020000

08001c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <NMI_Handler+0x4>

08001c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c36:	e7fe      	b.n	8001c36 <HardFault_Handler+0x4>

08001c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <MemManage_Handler+0x4>

08001c3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c42:	e7fe      	b.n	8001c42 <BusFault_Handler+0x4>

08001c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <UsageFault_Handler+0x4>

08001c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c78:	f000 f8ee 	bl	8001e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001c84:	4802      	ldr	r0, [pc, #8]	; (8001c90 <CAN1_RX0_IRQHandler+0x10>)
 8001c86:	f001 f95e 	bl	8002f46 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	2000014c 	.word	0x2000014c

08001c94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c98:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <TIM2_IRQHandler+0x10>)
 8001c9a:	f003 fb23 	bl	80052e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000174 	.word	0x20000174

08001ca8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001cac:	4802      	ldr	r0, [pc, #8]	; (8001cb8 <SPI1_IRQHandler+0x10>)
 8001cae:	f002 fffd 	bl	8004cac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200000ac 	.word	0x200000ac

08001cbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cc0:	4802      	ldr	r0, [pc, #8]	; (8001ccc <USART1_IRQHandler+0x10>)
 8001cc2:	f003 ffbb 	bl	8005c3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	200001bc 	.word	0x200001bc

08001cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd8:	4a14      	ldr	r2, [pc, #80]	; (8001d2c <_sbrk+0x5c>)
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <_sbrk+0x60>)
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce4:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <_sbrk+0x64>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d102      	bne.n	8001cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <_sbrk+0x64>)
 8001cee:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <_sbrk+0x68>)
 8001cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cf2:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <_sbrk+0x64>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d207      	bcs.n	8001d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d00:	f004 fec6 	bl	8006a90 <__errno>
 8001d04:	4603      	mov	r3, r0
 8001d06:	220c      	movs	r2, #12
 8001d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0e:	e009      	b.n	8001d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d10:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <_sbrk+0x64>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d16:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <_sbrk+0x64>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	4a05      	ldr	r2, [pc, #20]	; (8001d34 <_sbrk+0x64>)
 8001d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d22:	68fb      	ldr	r3, [r7, #12]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20020000 	.word	0x20020000
 8001d30:	00000400 	.word	0x00000400
 8001d34:	20000278 	.word	0x20000278
 8001d38:	20000290 	.word	0x20000290

08001d3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <SystemInit+0x20>)
 8001d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d46:	4a05      	ldr	r2, [pc, #20]	; (8001d5c <SystemInit+0x20>)
 8001d48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d64:	480d      	ldr	r0, [pc, #52]	; (8001d9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d66:	490e      	ldr	r1, [pc, #56]	; (8001da0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d68:	4a0e      	ldr	r2, [pc, #56]	; (8001da4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d6c:	e002      	b.n	8001d74 <LoopCopyDataInit>

08001d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d72:	3304      	adds	r3, #4

08001d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d78:	d3f9      	bcc.n	8001d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d7a:	4a0b      	ldr	r2, [pc, #44]	; (8001da8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d7c:	4c0b      	ldr	r4, [pc, #44]	; (8001dac <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d80:	e001      	b.n	8001d86 <LoopFillZerobss>

08001d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d84:	3204      	adds	r2, #4

08001d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d88:	d3fb      	bcc.n	8001d82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d8a:	f7ff ffd7 	bl	8001d3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d8e:	f004 fe85 	bl	8006a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d92:	f7ff f863 	bl	8000e5c <main>
  bx  lr    
 8001d96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001da4:	08008284 	.word	0x08008284
  ldr r2, =_sbss
 8001da8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001dac:	20000290 	.word	0x20000290

08001db0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001db0:	e7fe      	b.n	8001db0 <ADC_IRQHandler>
	...

08001db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001db8:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <HAL_Init+0x40>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	; (8001df4 <HAL_Init+0x40>)
 8001dbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_Init+0x40>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <HAL_Init+0x40>)
 8001dca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <HAL_Init+0x40>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a07      	ldr	r2, [pc, #28]	; (8001df4 <HAL_Init+0x40>)
 8001dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ddc:	2003      	movs	r0, #3
 8001dde:	f001 fbb1 	bl	8003544 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001de2:	200f      	movs	r0, #15
 8001de4:	f000 f808 	bl	8001df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001de8:	f7ff fd6e 	bl	80018c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40023c00 	.word	0x40023c00

08001df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e00:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <HAL_InitTick+0x54>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <HAL_InitTick+0x58>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e16:	4618      	mov	r0, r3
 8001e18:	f001 fbc9 	bl	80035ae <HAL_SYSTICK_Config>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e00e      	b.n	8001e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b0f      	cmp	r3, #15
 8001e2a:	d80a      	bhi.n	8001e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295
 8001e34:	f001 fb91 	bl	800355a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e38:	4a06      	ldr	r2, [pc, #24]	; (8001e54 <HAL_InitTick+0x5c>)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	e000      	b.n	8001e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000020 	.word	0x20000020
 8001e50:	20000028 	.word	0x20000028
 8001e54:	20000024 	.word	0x20000024

08001e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <HAL_IncTick+0x20>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	461a      	mov	r2, r3
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_IncTick+0x24>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4413      	add	r3, r2
 8001e68:	4a04      	ldr	r2, [pc, #16]	; (8001e7c <HAL_IncTick+0x24>)
 8001e6a:	6013      	str	r3, [r2, #0]
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	20000028 	.word	0x20000028
 8001e7c:	2000027c 	.word	0x2000027c

08001e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return uwTick;
 8001e84:	4b03      	ldr	r3, [pc, #12]	; (8001e94 <HAL_GetTick+0x14>)
 8001e86:	681b      	ldr	r3, [r3, #0]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	2000027c 	.word	0x2000027c

08001e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ea0:	f7ff ffee 	bl	8001e80 <HAL_GetTick>
 8001ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb0:	d005      	beq.n	8001ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <HAL_Delay+0x44>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4413      	add	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ebe:	bf00      	nop
 8001ec0:	f7ff ffde 	bl	8001e80 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d8f7      	bhi.n	8001ec0 <HAL_Delay+0x28>
  {
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	bf00      	nop
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000028 	.word	0x20000028

08001ee0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e033      	b.n	8001f5e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d109      	bne.n	8001f12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff fd0a 	bl	8001918 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f003 0310 	and.w	r3, r3, #16
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d118      	bne.n	8001f50 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f26:	f023 0302 	bic.w	r3, r3, #2
 8001f2a:	f043 0202 	orr.w	r2, r3, #2
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 fad8 	bl	80024e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f023 0303 	bic.w	r3, r3, #3
 8001f46:	f043 0201 	orr.w	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	641a      	str	r2, [r3, #64]	; 0x40
 8001f4e:	e001      	b.n	8001f54 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d101      	bne.n	8001f82 <HAL_ADC_Start+0x1a>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e0b2      	b.n	80020e8 <HAL_ADC_Start+0x180>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d018      	beq.n	8001fca <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0201 	orr.w	r2, r2, #1
 8001fa6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fa8:	4b52      	ldr	r3, [pc, #328]	; (80020f4 <HAL_ADC_Start+0x18c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a52      	ldr	r2, [pc, #328]	; (80020f8 <HAL_ADC_Start+0x190>)
 8001fae:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb2:	0c9a      	lsrs	r2, r3, #18
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4413      	add	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001fbc:	e002      	b.n	8001fc4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f9      	bne.n	8001fbe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d17a      	bne.n	80020ce <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001fe0:	f023 0301 	bic.w	r3, r3, #1
 8001fe4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d007      	beq.n	800200a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002002:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002016:	d106      	bne.n	8002026 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201c:	f023 0206 	bic.w	r2, r3, #6
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	645a      	str	r2, [r3, #68]	; 0x44
 8002024:	e002      	b.n	800202c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002034:	4b31      	ldr	r3, [pc, #196]	; (80020fc <HAL_ADC_Start+0x194>)
 8002036:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002040:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 031f 	and.w	r3, r3, #31
 800204a:	2b00      	cmp	r3, #0
 800204c:	d12a      	bne.n	80020a4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a2b      	ldr	r2, [pc, #172]	; (8002100 <HAL_ADC_Start+0x198>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d015      	beq.n	8002084 <HAL_ADC_Start+0x11c>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a29      	ldr	r2, [pc, #164]	; (8002104 <HAL_ADC_Start+0x19c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d105      	bne.n	800206e <HAL_ADC_Start+0x106>
 8002062:	4b26      	ldr	r3, [pc, #152]	; (80020fc <HAL_ADC_Start+0x194>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 031f 	and.w	r3, r3, #31
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00a      	beq.n	8002084 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a25      	ldr	r2, [pc, #148]	; (8002108 <HAL_ADC_Start+0x1a0>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d136      	bne.n	80020e6 <HAL_ADC_Start+0x17e>
 8002078:	4b20      	ldr	r3, [pc, #128]	; (80020fc <HAL_ADC_Start+0x194>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 0310 	and.w	r3, r3, #16
 8002080:	2b00      	cmp	r3, #0
 8002082:	d130      	bne.n	80020e6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d129      	bne.n	80020e6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020a0:	609a      	str	r2, [r3, #8]
 80020a2:	e020      	b.n	80020e6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a15      	ldr	r2, [pc, #84]	; (8002100 <HAL_ADC_Start+0x198>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d11b      	bne.n	80020e6 <HAL_ADC_Start+0x17e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d114      	bne.n	80020e6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	e00b      	b.n	80020e6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f043 0210 	orr.w	r2, r3, #16
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	f043 0201 	orr.w	r2, r3, #1
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	20000020 	.word	0x20000020
 80020f8:	431bde83 	.word	0x431bde83
 80020fc:	40012300 	.word	0x40012300
 8002100:	40012000 	.word	0x40012000
 8002104:	40012100 	.word	0x40012100
 8002108:	40012200 	.word	0x40012200

0800210c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800211a:	2b01      	cmp	r3, #1
 800211c:	d101      	bne.n	8002122 <HAL_ADC_Stop+0x16>
 800211e:	2302      	movs	r3, #2
 8002120:	e021      	b.n	8002166 <HAL_ADC_Stop+0x5a>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0201 	bic.w	r2, r2, #1
 8002138:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b00      	cmp	r3, #0
 8002146:	d109      	bne.n	800215c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002150:	f023 0301 	bic.w	r3, r3, #1
 8002154:	f043 0201 	orr.w	r2, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b084      	sub	sp, #16
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800218e:	d113      	bne.n	80021b8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800219a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800219e:	d10b      	bne.n	80021b8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	f043 0220 	orr.w	r2, r3, #32
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e063      	b.n	8002280 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80021b8:	f7ff fe62 	bl	8001e80 <HAL_GetTick>
 80021bc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021be:	e021      	b.n	8002204 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c6:	d01d      	beq.n	8002204 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d007      	beq.n	80021de <HAL_ADC_PollForConversion+0x6c>
 80021ce:	f7ff fe57 	bl	8001e80 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d212      	bcs.n	8002204 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d00b      	beq.n	8002204 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	f043 0204 	orr.w	r2, r3, #4
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e03d      	b.n	8002280 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b02      	cmp	r3, #2
 8002210:	d1d6      	bne.n	80021c0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f06f 0212 	mvn.w	r2, #18
 800221a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d123      	bne.n	800227e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800223a:	2b00      	cmp	r3, #0
 800223c:	d11f      	bne.n	800227e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002244:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002248:	2b00      	cmp	r3, #0
 800224a:	d006      	beq.n	800225a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002256:	2b00      	cmp	r3, #0
 8002258:	d111      	bne.n	800227e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d105      	bne.n	800227e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f043 0201 	orr.w	r2, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002296:	4618      	mov	r0, r3
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x1c>
 80022bc:	2302      	movs	r3, #2
 80022be:	e105      	b.n	80024cc <HAL_ADC_ConfigChannel+0x228>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b09      	cmp	r3, #9
 80022ce:	d925      	bls.n	800231c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68d9      	ldr	r1, [r3, #12]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	461a      	mov	r2, r3
 80022de:	4613      	mov	r3, r2
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	4413      	add	r3, r2
 80022e4:	3b1e      	subs	r3, #30
 80022e6:	2207      	movs	r2, #7
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43da      	mvns	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	400a      	ands	r2, r1
 80022f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68d9      	ldr	r1, [r3, #12]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	b29b      	uxth	r3, r3
 8002306:	4618      	mov	r0, r3
 8002308:	4603      	mov	r3, r0
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	4403      	add	r3, r0
 800230e:	3b1e      	subs	r3, #30
 8002310:	409a      	lsls	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	e022      	b.n	8002362 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6919      	ldr	r1, [r3, #16]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	b29b      	uxth	r3, r3
 8002328:	461a      	mov	r2, r3
 800232a:	4613      	mov	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	2207      	movs	r2, #7
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43da      	mvns	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	400a      	ands	r2, r1
 800233e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6919      	ldr	r1, [r3, #16]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	b29b      	uxth	r3, r3
 8002350:	4618      	mov	r0, r3
 8002352:	4603      	mov	r3, r0
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	4403      	add	r3, r0
 8002358:	409a      	lsls	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b06      	cmp	r3, #6
 8002368:	d824      	bhi.n	80023b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	3b05      	subs	r3, #5
 800237c:	221f      	movs	r2, #31
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43da      	mvns	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	400a      	ands	r2, r1
 800238a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	b29b      	uxth	r3, r3
 8002398:	4618      	mov	r0, r3
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	3b05      	subs	r3, #5
 80023a6:	fa00 f203 	lsl.w	r2, r0, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	635a      	str	r2, [r3, #52]	; 0x34
 80023b2:	e04c      	b.n	800244e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b0c      	cmp	r3, #12
 80023ba:	d824      	bhi.n	8002406 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	3b23      	subs	r3, #35	; 0x23
 80023ce:	221f      	movs	r2, #31
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43da      	mvns	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	400a      	ands	r2, r1
 80023dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	4618      	mov	r0, r3
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	3b23      	subs	r3, #35	; 0x23
 80023f8:	fa00 f203 	lsl.w	r2, r0, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	631a      	str	r2, [r3, #48]	; 0x30
 8002404:	e023      	b.n	800244e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	3b41      	subs	r3, #65	; 0x41
 8002418:	221f      	movs	r2, #31
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43da      	mvns	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	400a      	ands	r2, r1
 8002426:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	b29b      	uxth	r3, r3
 8002434:	4618      	mov	r0, r3
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	3b41      	subs	r3, #65	; 0x41
 8002442:	fa00 f203 	lsl.w	r2, r0, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800244e:	4b22      	ldr	r3, [pc, #136]	; (80024d8 <HAL_ADC_ConfigChannel+0x234>)
 8002450:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a21      	ldr	r2, [pc, #132]	; (80024dc <HAL_ADC_ConfigChannel+0x238>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d109      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x1cc>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b12      	cmp	r3, #18
 8002462:	d105      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a19      	ldr	r2, [pc, #100]	; (80024dc <HAL_ADC_ConfigChannel+0x238>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d123      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x21e>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b10      	cmp	r3, #16
 8002480:	d003      	beq.n	800248a <HAL_ADC_ConfigChannel+0x1e6>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b11      	cmp	r3, #17
 8002488:	d11b      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2b10      	cmp	r3, #16
 800249c:	d111      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800249e:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <HAL_ADC_ConfigChannel+0x23c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a10      	ldr	r2, [pc, #64]	; (80024e4 <HAL_ADC_ConfigChannel+0x240>)
 80024a4:	fba2 2303 	umull	r2, r3, r2, r3
 80024a8:	0c9a      	lsrs	r2, r3, #18
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024b4:	e002      	b.n	80024bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f9      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	40012300 	.word	0x40012300
 80024dc:	40012000 	.word	0x40012000
 80024e0:	20000020 	.word	0x20000020
 80024e4:	431bde83 	.word	0x431bde83

080024e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024f0:	4b79      	ldr	r3, [pc, #484]	; (80026d8 <ADC_Init+0x1f0>)
 80024f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	431a      	orrs	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800251c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6859      	ldr	r1, [r3, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	021a      	lsls	r2, r3, #8
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002540:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6859      	ldr	r1, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002562:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6899      	ldr	r1, [r3, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257a:	4a58      	ldr	r2, [pc, #352]	; (80026dc <ADC_Init+0x1f4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d022      	beq.n	80025c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800258e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6899      	ldr	r1, [r3, #8]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6899      	ldr	r1, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	e00f      	b.n	80025e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0202 	bic.w	r2, r2, #2
 80025f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6899      	ldr	r1, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	7e1b      	ldrb	r3, [r3, #24]
 8002600:	005a      	lsls	r2, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d01b      	beq.n	800264c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002622:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002632:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6859      	ldr	r1, [r3, #4]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	3b01      	subs	r3, #1
 8002640:	035a      	lsls	r2, r3, #13
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	e007      	b.n	800265c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800265a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800266a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	3b01      	subs	r3, #1
 8002678:	051a      	lsls	r2, r3, #20
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002690:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6899      	ldr	r1, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800269e:	025a      	lsls	r2, r3, #9
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6899      	ldr	r1, [r3, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	029a      	lsls	r2, r3, #10
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	609a      	str	r2, [r3, #8]
}
 80026cc:	bf00      	nop
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	40012300 	.word	0x40012300
 80026dc:	0f000001 	.word	0x0f000001

080026e0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e0ed      	b.n	80028ce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d102      	bne.n	8002704 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7ff f94e 	bl	80019a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0201 	orr.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002714:	f7ff fbb4 	bl	8001e80 <HAL_GetTick>
 8002718:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800271a:	e012      	b.n	8002742 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800271c:	f7ff fbb0 	bl	8001e80 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b0a      	cmp	r3, #10
 8002728:	d90b      	bls.n	8002742 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2205      	movs	r2, #5
 800273a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e0c5      	b.n	80028ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0e5      	beq.n	800271c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0202 	bic.w	r2, r2, #2
 800275e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002760:	f7ff fb8e 	bl	8001e80 <HAL_GetTick>
 8002764:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002766:	e012      	b.n	800278e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002768:	f7ff fb8a 	bl	8001e80 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b0a      	cmp	r3, #10
 8002774:	d90b      	bls.n	800278e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2205      	movs	r2, #5
 8002786:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e09f      	b.n	80028ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1e5      	bne.n	8002768 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	7e1b      	ldrb	r3, [r3, #24]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d108      	bne.n	80027b6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	e007      	b.n	80027c6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	7e5b      	ldrb	r3, [r3, #25]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d108      	bne.n	80027e0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	e007      	b.n	80027f0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	7e9b      	ldrb	r3, [r3, #26]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d108      	bne.n	800280a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0220 	orr.w	r2, r2, #32
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	e007      	b.n	800281a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0220 	bic.w	r2, r2, #32
 8002818:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	7edb      	ldrb	r3, [r3, #27]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d108      	bne.n	8002834 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0210 	bic.w	r2, r2, #16
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	e007      	b.n	8002844 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0210 	orr.w	r2, r2, #16
 8002842:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	7f1b      	ldrb	r3, [r3, #28]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d108      	bne.n	800285e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0208 	orr.w	r2, r2, #8
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	e007      	b.n	800286e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0208 	bic.w	r2, r2, #8
 800286c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	7f5b      	ldrb	r3, [r3, #29]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d108      	bne.n	8002888 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0204 	orr.w	r2, r2, #4
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	e007      	b.n	8002898 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0204 	bic.w	r2, r2, #4
 8002896:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	ea42 0103 	orr.w	r1, r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	1e5a      	subs	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80028d8:	b480      	push	{r7}
 80028da:	b087      	sub	sp, #28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ee:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80028f0:	7cfb      	ldrb	r3, [r7, #19]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d003      	beq.n	80028fe <HAL_CAN_ConfigFilter+0x26>
 80028f6:	7cfb      	ldrb	r3, [r7, #19]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	f040 80be 	bne.w	8002a7a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80028fe:	4b65      	ldr	r3, [pc, #404]	; (8002a94 <HAL_CAN_ConfigFilter+0x1bc>)
 8002900:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002908:	f043 0201 	orr.w	r2, r3, #1
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002918:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	021b      	lsls	r3, r3, #8
 800292e:	431a      	orrs	r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	f003 031f 	and.w	r3, r3, #31
 800293e:	2201      	movs	r2, #1
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	43db      	mvns	r3, r3
 8002950:	401a      	ands	r2, r3
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d123      	bne.n	80029a8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	43db      	mvns	r3, r3
 800296a:	401a      	ands	r2, r3
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002982:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	3248      	adds	r2, #72	; 0x48
 8002988:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800299c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800299e:	6979      	ldr	r1, [r7, #20]
 80029a0:	3348      	adds	r3, #72	; 0x48
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	440b      	add	r3, r1
 80029a6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d122      	bne.n	80029f6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	431a      	orrs	r2, r3
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80029d0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	3248      	adds	r2, #72	; 0x48
 80029d6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029ea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029ec:	6979      	ldr	r1, [r7, #20]
 80029ee:	3348      	adds	r3, #72	; 0x48
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	440b      	add	r3, r1
 80029f4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d109      	bne.n	8002a12 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	43db      	mvns	r3, r3
 8002a08:	401a      	ands	r2, r3
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002a10:	e007      	b.n	8002a22 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d109      	bne.n	8002a3e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	43db      	mvns	r3, r3
 8002a34:	401a      	ands	r2, r3
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002a3c:	e007      	b.n	8002a4e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	431a      	orrs	r2, r3
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d107      	bne.n	8002a66 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a6c:	f023 0201 	bic.w	r2, r3, #1
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002a76:	2300      	movs	r3, #0
 8002a78:	e006      	b.n	8002a88 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
  }
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	371c      	adds	r7, #28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	40006400 	.word	0x40006400

08002a98 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d12e      	bne.n	8002b0a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0201 	bic.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ac4:	f7ff f9dc 	bl	8001e80 <HAL_GetTick>
 8002ac8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002aca:	e012      	b.n	8002af2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002acc:	f7ff f9d8 	bl	8001e80 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b0a      	cmp	r3, #10
 8002ad8:	d90b      	bls.n	8002af2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2205      	movs	r2, #5
 8002aea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e012      	b.n	8002b18 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1e5      	bne.n	8002acc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	e006      	b.n	8002b18 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
  }
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b089      	sub	sp, #36	; 0x24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b34:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b3e:	7ffb      	ldrb	r3, [r7, #31]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d003      	beq.n	8002b4c <HAL_CAN_AddTxMessage+0x2c>
 8002b44:	7ffb      	ldrb	r3, [r7, #31]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	f040 80b8 	bne.w	8002cbc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10a      	bne.n	8002b6c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d105      	bne.n	8002b6c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 80a0 	beq.w	8002cac <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	0e1b      	lsrs	r3, r3, #24
 8002b70:	f003 0303 	and.w	r3, r3, #3
 8002b74:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d907      	bls.n	8002b8c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e09e      	b.n	8002cca <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	409a      	lsls	r2, r3
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10d      	bne.n	8002bba <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ba8:	68f9      	ldr	r1, [r7, #12]
 8002baa:	6809      	ldr	r1, [r1, #0]
 8002bac:	431a      	orrs	r2, r3
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	3318      	adds	r3, #24
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	440b      	add	r3, r1
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	e00f      	b.n	8002bda <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002bc4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002bca:	68f9      	ldr	r1, [r7, #12]
 8002bcc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002bce:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	3318      	adds	r3, #24
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	440b      	add	r3, r1
 8002bd8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6819      	ldr	r1, [r3, #0]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	691a      	ldr	r2, [r3, #16]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	3318      	adds	r3, #24
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	440b      	add	r3, r1
 8002bea:	3304      	adds	r3, #4
 8002bec:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	7d1b      	ldrb	r3, [r3, #20]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d111      	bne.n	8002c1a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	3318      	adds	r3, #24
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	4413      	add	r3, r2
 8002c02:	3304      	adds	r3, #4
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	6811      	ldr	r1, [r2, #0]
 8002c0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	3318      	adds	r3, #24
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	440b      	add	r3, r1
 8002c16:	3304      	adds	r3, #4
 8002c18:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3307      	adds	r3, #7
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	061a      	lsls	r2, r3, #24
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3306      	adds	r3, #6
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	041b      	lsls	r3, r3, #16
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3305      	adds	r3, #5
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	021b      	lsls	r3, r3, #8
 8002c34:	4313      	orrs	r3, r2
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	3204      	adds	r2, #4
 8002c3a:	7812      	ldrb	r2, [r2, #0]
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	6811      	ldr	r1, [r2, #0]
 8002c42:	ea43 0200 	orr.w	r2, r3, r0
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	440b      	add	r3, r1
 8002c4c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002c50:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3303      	adds	r3, #3
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	061a      	lsls	r2, r3, #24
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3302      	adds	r3, #2
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	041b      	lsls	r3, r3, #16
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3301      	adds	r3, #1
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	021b      	lsls	r3, r3, #8
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	7812      	ldrb	r2, [r2, #0]
 8002c72:	4610      	mov	r0, r2
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	6811      	ldr	r1, [r2, #0]
 8002c78:	ea43 0200 	orr.w	r2, r3, r0
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	440b      	add	r3, r1
 8002c82:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002c86:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	3318      	adds	r3, #24
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	4413      	add	r3, r2
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	6811      	ldr	r1, [r2, #0]
 8002c9a:	f043 0201 	orr.w	r2, r3, #1
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	3318      	adds	r3, #24
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	440b      	add	r3, r1
 8002ca6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	e00e      	b.n	8002cca <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e006      	b.n	8002cca <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
  }
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3724      	adds	r7, #36	; 0x24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b087      	sub	sp, #28
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
 8002ce2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cea:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cec:	7dfb      	ldrb	r3, [r7, #23]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d003      	beq.n	8002cfa <HAL_CAN_GetRxMessage+0x24>
 8002cf2:	7dfb      	ldrb	r3, [r7, #23]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	f040 80f3 	bne.w	8002ee0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10e      	bne.n	8002d1e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d116      	bne.n	8002d3c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e0e7      	b.n	8002eee <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d107      	bne.n	8002d3c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0d8      	b.n	8002eee <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	331b      	adds	r3, #27
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	4413      	add	r3, r2
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0204 	and.w	r2, r3, #4
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10c      	bne.n	8002d74 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	331b      	adds	r3, #27
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	4413      	add	r3, r2
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	0d5b      	lsrs	r3, r3, #21
 8002d6a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	e00b      	b.n	8002d8c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	331b      	adds	r3, #27
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	4413      	add	r3, r2
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	08db      	lsrs	r3, r3, #3
 8002d84:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	331b      	adds	r3, #27
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	4413      	add	r3, r2
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0202 	and.w	r2, r3, #2
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	331b      	adds	r3, #27
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	4413      	add	r3, r2
 8002dae:	3304      	adds	r3, #4
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 020f 	and.w	r2, r3, #15
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	331b      	adds	r3, #27
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	0a1b      	lsrs	r3, r3, #8
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	331b      	adds	r3, #27
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	4413      	add	r3, r2
 8002dde:	3304      	adds	r3, #4
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	0c1b      	lsrs	r3, r3, #16
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	0a1a      	lsrs	r2, r3, #8
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	3301      	adds	r3, #1
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	0c1a      	lsrs	r2, r3, #16
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	3302      	adds	r3, #2
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	0e1a      	lsrs	r2, r3, #24
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	3303      	adds	r3, #3
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	011b      	lsls	r3, r3, #4
 8002e56:	4413      	add	r3, r2
 8002e58:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	3304      	adds	r3, #4
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	0a1a      	lsrs	r2, r3, #8
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	3305      	adds	r3, #5
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	4413      	add	r3, r2
 8002e8a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	0c1a      	lsrs	r2, r3, #16
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	3306      	adds	r3, #6
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	0e1a      	lsrs	r2, r3, #24
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	3307      	adds	r3, #7
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d108      	bne.n	8002ecc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f042 0220 	orr.w	r2, r2, #32
 8002ec8:	60da      	str	r2, [r3, #12]
 8002eca:	e007      	b.n	8002edc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691a      	ldr	r2, [r3, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0220 	orr.w	r2, r2, #32
 8002eda:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	e006      	b.n	8002eee <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
  }
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	371c      	adds	r7, #28
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b085      	sub	sp, #20
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f0a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d002      	beq.n	8002f18 <HAL_CAN_ActivateNotification+0x1e>
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d109      	bne.n	8002f2c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6959      	ldr	r1, [r3, #20]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	e006      	b.n	8002f3a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
  }
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b08a      	sub	sp, #40	; 0x28
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d07c      	beq.n	8003086 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d023      	beq.n	8002fde <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f983 	bl	80032b4 <HAL_CAN_TxMailbox0CompleteCallback>
 8002fae:	e016      	b.n	8002fde <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	f003 0304 	and.w	r3, r3, #4
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d004      	beq.n	8002fc4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc2:	e00c      	b.n	8002fde <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d004      	beq.n	8002fd8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd6:	e002      	b.n	8002fde <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 f989 	bl	80032f0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d024      	beq.n	8003032 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ff0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f963 	bl	80032c8 <HAL_CAN_TxMailbox1CompleteCallback>
 8003002:	e016      	b.n	8003032 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300a:	2b00      	cmp	r3, #0
 800300c:	d004      	beq.n	8003018 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
 8003016:	e00c      	b.n	8003032 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800301e:	2b00      	cmp	r3, #0
 8003020:	d004      	beq.n	800302c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
 800302a:	e002      	b.n	8003032 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f969 	bl	8003304 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d024      	beq.n	8003086 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003044:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f943 	bl	80032dc <HAL_CAN_TxMailbox2CompleteCallback>
 8003056:	e016      	b.n	8003086 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d004      	beq.n	800306c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
 800306a:	e00c      	b.n	8003086 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d004      	beq.n	8003080 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
 800307e:	e002      	b.n	8003086 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f949 	bl	8003318 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00c      	beq.n	80030aa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f003 0310 	and.w	r3, r3, #16
 8003096:	2b00      	cmp	r3, #0
 8003098:	d007      	beq.n	80030aa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2210      	movs	r2, #16
 80030a8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00b      	beq.n	80030cc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d006      	beq.n	80030cc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2208      	movs	r2, #8
 80030c4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f930 	bl	800332c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d009      	beq.n	80030ea <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f003 0303 	and.w	r3, r3, #3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7fd fc59 	bl	800099c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00c      	beq.n	800310e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	f003 0310 	and.w	r3, r3, #16
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d007      	beq.n	800310e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003104:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2210      	movs	r2, #16
 800310c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	f003 0320 	and.w	r3, r3, #32
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00b      	beq.n	8003130 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d006      	beq.n	8003130 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2208      	movs	r2, #8
 8003128:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f912 	bl	8003354 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	f003 0310 	and.w	r3, r3, #16
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f8f9 	bl	8003340 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00b      	beq.n	8003170 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f003 0310 	and.w	r3, r3, #16
 800315e:	2b00      	cmp	r3, #0
 8003160:	d006      	beq.n	8003170 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2210      	movs	r2, #16
 8003168:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f8fc 	bl	8003368 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00b      	beq.n	8003192 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b00      	cmp	r3, #0
 8003182:	d006      	beq.n	8003192 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2208      	movs	r2, #8
 800318a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f8f5 	bl	800337c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d07b      	beq.n	8003294 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f003 0304 	and.w	r3, r3, #4
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d072      	beq.n	800328c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d008      	beq.n	80031c2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d008      	beq.n	80031de <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	f043 0302 	orr.w	r3, r3, #2
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d008      	beq.n	80031fa <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	f043 0304 	orr.w	r3, r3, #4
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003200:	2b00      	cmp	r3, #0
 8003202:	d043      	beq.n	800328c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800320a:	2b00      	cmp	r3, #0
 800320c:	d03e      	beq.n	800328c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003214:	2b60      	cmp	r3, #96	; 0x60
 8003216:	d02b      	beq.n	8003270 <HAL_CAN_IRQHandler+0x32a>
 8003218:	2b60      	cmp	r3, #96	; 0x60
 800321a:	d82e      	bhi.n	800327a <HAL_CAN_IRQHandler+0x334>
 800321c:	2b50      	cmp	r3, #80	; 0x50
 800321e:	d022      	beq.n	8003266 <HAL_CAN_IRQHandler+0x320>
 8003220:	2b50      	cmp	r3, #80	; 0x50
 8003222:	d82a      	bhi.n	800327a <HAL_CAN_IRQHandler+0x334>
 8003224:	2b40      	cmp	r3, #64	; 0x40
 8003226:	d019      	beq.n	800325c <HAL_CAN_IRQHandler+0x316>
 8003228:	2b40      	cmp	r3, #64	; 0x40
 800322a:	d826      	bhi.n	800327a <HAL_CAN_IRQHandler+0x334>
 800322c:	2b30      	cmp	r3, #48	; 0x30
 800322e:	d010      	beq.n	8003252 <HAL_CAN_IRQHandler+0x30c>
 8003230:	2b30      	cmp	r3, #48	; 0x30
 8003232:	d822      	bhi.n	800327a <HAL_CAN_IRQHandler+0x334>
 8003234:	2b10      	cmp	r3, #16
 8003236:	d002      	beq.n	800323e <HAL_CAN_IRQHandler+0x2f8>
 8003238:	2b20      	cmp	r3, #32
 800323a:	d005      	beq.n	8003248 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800323c:	e01d      	b.n	800327a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	f043 0308 	orr.w	r3, r3, #8
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003246:	e019      	b.n	800327c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	f043 0310 	orr.w	r3, r3, #16
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003250:	e014      	b.n	800327c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	f043 0320 	orr.w	r3, r3, #32
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800325a:	e00f      	b.n	800327c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003264:	e00a      	b.n	800327c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800326e:	e005      	b.n	800327c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003278:	e000      	b.n	800327c <HAL_CAN_IRQHandler+0x336>
            break;
 800327a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800328a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2204      	movs	r2, #4
 8003292:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	2b00      	cmp	r3, #0
 8003298:	d008      	beq.n	80032ac <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f872 	bl	8003390 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80032ac:	bf00      	nop
 80032ae:	3728      	adds	r7, #40	; 0x28
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033b4:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <__NVIC_SetPriorityGrouping+0x44>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033c0:	4013      	ands	r3, r2
 80033c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033d6:	4a04      	ldr	r2, [pc, #16]	; (80033e8 <__NVIC_SetPriorityGrouping+0x44>)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	60d3      	str	r3, [r2, #12]
}
 80033dc:	bf00      	nop
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033f0:	4b04      	ldr	r3, [pc, #16]	; (8003404 <__NVIC_GetPriorityGrouping+0x18>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	0a1b      	lsrs	r3, r3, #8
 80033f6:	f003 0307 	and.w	r3, r3, #7
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003416:	2b00      	cmp	r3, #0
 8003418:	db0b      	blt.n	8003432 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	f003 021f 	and.w	r2, r3, #31
 8003420:	4907      	ldr	r1, [pc, #28]	; (8003440 <__NVIC_EnableIRQ+0x38>)
 8003422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003426:	095b      	lsrs	r3, r3, #5
 8003428:	2001      	movs	r0, #1
 800342a:	fa00 f202 	lsl.w	r2, r0, r2
 800342e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	e000e100 	.word	0xe000e100

08003444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	6039      	str	r1, [r7, #0]
 800344e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003454:	2b00      	cmp	r3, #0
 8003456:	db0a      	blt.n	800346e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	b2da      	uxtb	r2, r3
 800345c:	490c      	ldr	r1, [pc, #48]	; (8003490 <__NVIC_SetPriority+0x4c>)
 800345e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003462:	0112      	lsls	r2, r2, #4
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	440b      	add	r3, r1
 8003468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800346c:	e00a      	b.n	8003484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	b2da      	uxtb	r2, r3
 8003472:	4908      	ldr	r1, [pc, #32]	; (8003494 <__NVIC_SetPriority+0x50>)
 8003474:	79fb      	ldrb	r3, [r7, #7]
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	3b04      	subs	r3, #4
 800347c:	0112      	lsls	r2, r2, #4
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	440b      	add	r3, r1
 8003482:	761a      	strb	r2, [r3, #24]
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	e000e100 	.word	0xe000e100
 8003494:	e000ed00 	.word	0xe000ed00

08003498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003498:	b480      	push	{r7}
 800349a:	b089      	sub	sp, #36	; 0x24
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f1c3 0307 	rsb	r3, r3, #7
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	bf28      	it	cs
 80034b6:	2304      	movcs	r3, #4
 80034b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	3304      	adds	r3, #4
 80034be:	2b06      	cmp	r3, #6
 80034c0:	d902      	bls.n	80034c8 <NVIC_EncodePriority+0x30>
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	3b03      	subs	r3, #3
 80034c6:	e000      	b.n	80034ca <NVIC_EncodePriority+0x32>
 80034c8:	2300      	movs	r3, #0
 80034ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034cc:	f04f 32ff 	mov.w	r2, #4294967295
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	43da      	mvns	r2, r3
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	401a      	ands	r2, r3
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034e0:	f04f 31ff 	mov.w	r1, #4294967295
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ea:	43d9      	mvns	r1, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f0:	4313      	orrs	r3, r2
         );
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3724      	adds	r7, #36	; 0x24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
	...

08003500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3b01      	subs	r3, #1
 800350c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003510:	d301      	bcc.n	8003516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003512:	2301      	movs	r3, #1
 8003514:	e00f      	b.n	8003536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003516:	4a0a      	ldr	r2, [pc, #40]	; (8003540 <SysTick_Config+0x40>)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3b01      	subs	r3, #1
 800351c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800351e:	210f      	movs	r1, #15
 8003520:	f04f 30ff 	mov.w	r0, #4294967295
 8003524:	f7ff ff8e 	bl	8003444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003528:	4b05      	ldr	r3, [pc, #20]	; (8003540 <SysTick_Config+0x40>)
 800352a:	2200      	movs	r2, #0
 800352c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800352e:	4b04      	ldr	r3, [pc, #16]	; (8003540 <SysTick_Config+0x40>)
 8003530:	2207      	movs	r2, #7
 8003532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	e000e010 	.word	0xe000e010

08003544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7ff ff29 	bl	80033a4 <__NVIC_SetPriorityGrouping>
}
 8003552:	bf00      	nop
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800355a:	b580      	push	{r7, lr}
 800355c:	b086      	sub	sp, #24
 800355e:	af00      	add	r7, sp, #0
 8003560:	4603      	mov	r3, r0
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	607a      	str	r2, [r7, #4]
 8003566:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003568:	2300      	movs	r3, #0
 800356a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800356c:	f7ff ff3e 	bl	80033ec <__NVIC_GetPriorityGrouping>
 8003570:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	68b9      	ldr	r1, [r7, #8]
 8003576:	6978      	ldr	r0, [r7, #20]
 8003578:	f7ff ff8e 	bl	8003498 <NVIC_EncodePriority>
 800357c:	4602      	mov	r2, r0
 800357e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003582:	4611      	mov	r1, r2
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff ff5d 	bl	8003444 <__NVIC_SetPriority>
}
 800358a:	bf00      	nop
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	4603      	mov	r3, r0
 800359a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800359c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff ff31 	bl	8003408 <__NVIC_EnableIRQ>
}
 80035a6:	bf00      	nop
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7ff ffa2 	bl	8003500 <SysTick_Config>
 80035bc:	4603      	mov	r3, r0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b084      	sub	sp, #16
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035d4:	f7fe fc54 	bl	8001e80 <HAL_GetTick>
 80035d8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d008      	beq.n	80035f8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2280      	movs	r2, #128	; 0x80
 80035ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e052      	b.n	800369e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0216 	bic.w	r2, r2, #22
 8003606:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695a      	ldr	r2, [r3, #20]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003616:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	2b00      	cmp	r3, #0
 800361e:	d103      	bne.n	8003628 <HAL_DMA_Abort+0x62>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003624:	2b00      	cmp	r3, #0
 8003626:	d007      	beq.n	8003638 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0208 	bic.w	r2, r2, #8
 8003636:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0201 	bic.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003648:	e013      	b.n	8003672 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800364a:	f7fe fc19 	bl	8001e80 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b05      	cmp	r3, #5
 8003656:	d90c      	bls.n	8003672 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2203      	movs	r2, #3
 8003662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e015      	b.n	800369e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e4      	bne.n	800364a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003684:	223f      	movs	r2, #63	; 0x3f
 8003686:	409a      	lsls	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d004      	beq.n	80036c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2280      	movs	r2, #128	; 0x80
 80036be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e00c      	b.n	80036de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2205      	movs	r2, #5
 80036c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0201 	bic.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
	...

080036ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b089      	sub	sp, #36	; 0x24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036fe:	2300      	movs	r3, #0
 8003700:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003702:	2300      	movs	r3, #0
 8003704:	61fb      	str	r3, [r7, #28]
 8003706:	e16b      	b.n	80039e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003708:	2201      	movs	r2, #1
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4013      	ands	r3, r2
 800371a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	429a      	cmp	r2, r3
 8003722:	f040 815a 	bne.w	80039da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	2b01      	cmp	r3, #1
 8003730:	d005      	beq.n	800373e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800373a:	2b02      	cmp	r3, #2
 800373c:	d130      	bne.n	80037a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	2203      	movs	r2, #3
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	43db      	mvns	r3, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4013      	ands	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4313      	orrs	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003774:	2201      	movs	r2, #1
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	43db      	mvns	r3, r3
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4013      	ands	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	091b      	lsrs	r3, r3, #4
 800378a:	f003 0201 	and.w	r2, r3, #1
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 0303 	and.w	r3, r3, #3
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d017      	beq.n	80037dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	2203      	movs	r2, #3
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	43db      	mvns	r3, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4013      	ands	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 0303 	and.w	r3, r3, #3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d123      	bne.n	8003830 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	08da      	lsrs	r2, r3, #3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3208      	adds	r2, #8
 80037f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	220f      	movs	r2, #15
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4013      	ands	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4313      	orrs	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	08da      	lsrs	r2, r3, #3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3208      	adds	r2, #8
 800382a:	69b9      	ldr	r1, [r7, #24]
 800382c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	2203      	movs	r2, #3
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	43db      	mvns	r3, r3
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4013      	ands	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f003 0203 	and.w	r2, r3, #3
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4313      	orrs	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 80b4 	beq.w	80039da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	4b60      	ldr	r3, [pc, #384]	; (80039f8 <HAL_GPIO_Init+0x30c>)
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	4a5f      	ldr	r2, [pc, #380]	; (80039f8 <HAL_GPIO_Init+0x30c>)
 800387c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003880:	6453      	str	r3, [r2, #68]	; 0x44
 8003882:	4b5d      	ldr	r3, [pc, #372]	; (80039f8 <HAL_GPIO_Init+0x30c>)
 8003884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800388e:	4a5b      	ldr	r2, [pc, #364]	; (80039fc <HAL_GPIO_Init+0x310>)
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	089b      	lsrs	r3, r3, #2
 8003894:	3302      	adds	r3, #2
 8003896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800389a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	220f      	movs	r2, #15
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	43db      	mvns	r3, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4013      	ands	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a52      	ldr	r2, [pc, #328]	; (8003a00 <HAL_GPIO_Init+0x314>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d02b      	beq.n	8003912 <HAL_GPIO_Init+0x226>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a51      	ldr	r2, [pc, #324]	; (8003a04 <HAL_GPIO_Init+0x318>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d025      	beq.n	800390e <HAL_GPIO_Init+0x222>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a50      	ldr	r2, [pc, #320]	; (8003a08 <HAL_GPIO_Init+0x31c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d01f      	beq.n	800390a <HAL_GPIO_Init+0x21e>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a4f      	ldr	r2, [pc, #316]	; (8003a0c <HAL_GPIO_Init+0x320>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d019      	beq.n	8003906 <HAL_GPIO_Init+0x21a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a4e      	ldr	r2, [pc, #312]	; (8003a10 <HAL_GPIO_Init+0x324>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d013      	beq.n	8003902 <HAL_GPIO_Init+0x216>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a4d      	ldr	r2, [pc, #308]	; (8003a14 <HAL_GPIO_Init+0x328>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00d      	beq.n	80038fe <HAL_GPIO_Init+0x212>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a4c      	ldr	r2, [pc, #304]	; (8003a18 <HAL_GPIO_Init+0x32c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d007      	beq.n	80038fa <HAL_GPIO_Init+0x20e>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a4b      	ldr	r2, [pc, #300]	; (8003a1c <HAL_GPIO_Init+0x330>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d101      	bne.n	80038f6 <HAL_GPIO_Init+0x20a>
 80038f2:	2307      	movs	r3, #7
 80038f4:	e00e      	b.n	8003914 <HAL_GPIO_Init+0x228>
 80038f6:	2308      	movs	r3, #8
 80038f8:	e00c      	b.n	8003914 <HAL_GPIO_Init+0x228>
 80038fa:	2306      	movs	r3, #6
 80038fc:	e00a      	b.n	8003914 <HAL_GPIO_Init+0x228>
 80038fe:	2305      	movs	r3, #5
 8003900:	e008      	b.n	8003914 <HAL_GPIO_Init+0x228>
 8003902:	2304      	movs	r3, #4
 8003904:	e006      	b.n	8003914 <HAL_GPIO_Init+0x228>
 8003906:	2303      	movs	r3, #3
 8003908:	e004      	b.n	8003914 <HAL_GPIO_Init+0x228>
 800390a:	2302      	movs	r3, #2
 800390c:	e002      	b.n	8003914 <HAL_GPIO_Init+0x228>
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <HAL_GPIO_Init+0x228>
 8003912:	2300      	movs	r3, #0
 8003914:	69fa      	ldr	r2, [r7, #28]
 8003916:	f002 0203 	and.w	r2, r2, #3
 800391a:	0092      	lsls	r2, r2, #2
 800391c:	4093      	lsls	r3, r2
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4313      	orrs	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003924:	4935      	ldr	r1, [pc, #212]	; (80039fc <HAL_GPIO_Init+0x310>)
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	089b      	lsrs	r3, r3, #2
 800392a:	3302      	adds	r3, #2
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003932:	4b3b      	ldr	r3, [pc, #236]	; (8003a20 <HAL_GPIO_Init+0x334>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	43db      	mvns	r3, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4013      	ands	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003956:	4a32      	ldr	r2, [pc, #200]	; (8003a20 <HAL_GPIO_Init+0x334>)
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800395c:	4b30      	ldr	r3, [pc, #192]	; (8003a20 <HAL_GPIO_Init+0x334>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	43db      	mvns	r3, r3
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4013      	ands	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	4313      	orrs	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003980:	4a27      	ldr	r2, [pc, #156]	; (8003a20 <HAL_GPIO_Init+0x334>)
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003986:	4b26      	ldr	r3, [pc, #152]	; (8003a20 <HAL_GPIO_Init+0x334>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	43db      	mvns	r3, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4013      	ands	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039aa:	4a1d      	ldr	r2, [pc, #116]	; (8003a20 <HAL_GPIO_Init+0x334>)
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039b0:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <HAL_GPIO_Init+0x334>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	43db      	mvns	r3, r3
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	4013      	ands	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039d4:	4a12      	ldr	r2, [pc, #72]	; (8003a20 <HAL_GPIO_Init+0x334>)
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	3301      	adds	r3, #1
 80039de:	61fb      	str	r3, [r7, #28]
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	2b0f      	cmp	r3, #15
 80039e4:	f67f ae90 	bls.w	8003708 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039e8:	bf00      	nop
 80039ea:	bf00      	nop
 80039ec:	3724      	adds	r7, #36	; 0x24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40023800 	.word	0x40023800
 80039fc:	40013800 	.word	0x40013800
 8003a00:	40020000 	.word	0x40020000
 8003a04:	40020400 	.word	0x40020400
 8003a08:	40020800 	.word	0x40020800
 8003a0c:	40020c00 	.word	0x40020c00
 8003a10:	40021000 	.word	0x40021000
 8003a14:	40021400 	.word	0x40021400
 8003a18:	40021800 	.word	0x40021800
 8003a1c:	40021c00 	.word	0x40021c00
 8003a20:	40013c00 	.word	0x40013c00

08003a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	807b      	strh	r3, [r7, #2]
 8003a30:	4613      	mov	r3, r2
 8003a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a34:	787b      	ldrb	r3, [r7, #1]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a3a:	887a      	ldrh	r2, [r7, #2]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a40:	e003      	b.n	8003a4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a42:	887b      	ldrh	r3, [r7, #2]
 8003a44:	041a      	lsls	r2, r3, #16
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	619a      	str	r2, [r3, #24]
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b085      	sub	sp, #20
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	460b      	mov	r3, r1
 8003a60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a68:	887a      	ldrh	r2, [r7, #2]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	041a      	lsls	r2, r3, #16
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	43d9      	mvns	r1, r3
 8003a74:	887b      	ldrh	r3, [r7, #2]
 8003a76:	400b      	ands	r3, r1
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	619a      	str	r2, [r3, #24]
}
 8003a7e:	bf00      	nop
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
	...

08003a8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e267      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d075      	beq.n	8003b96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aaa:	4b88      	ldr	r3, [pc, #544]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d00c      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ab6:	4b85      	ldr	r3, [pc, #532]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d112      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ac2:	4b82      	ldr	r3, [pc, #520]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ace:	d10b      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad0:	4b7e      	ldr	r3, [pc, #504]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d05b      	beq.n	8003b94 <HAL_RCC_OscConfig+0x108>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d157      	bne.n	8003b94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e242      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af0:	d106      	bne.n	8003b00 <HAL_RCC_OscConfig+0x74>
 8003af2:	4b76      	ldr	r3, [pc, #472]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a75      	ldr	r2, [pc, #468]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	e01d      	b.n	8003b3c <HAL_RCC_OscConfig+0xb0>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b08:	d10c      	bne.n	8003b24 <HAL_RCC_OscConfig+0x98>
 8003b0a:	4b70      	ldr	r3, [pc, #448]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a6f      	ldr	r2, [pc, #444]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	4b6d      	ldr	r3, [pc, #436]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a6c      	ldr	r2, [pc, #432]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	e00b      	b.n	8003b3c <HAL_RCC_OscConfig+0xb0>
 8003b24:	4b69      	ldr	r3, [pc, #420]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a68      	ldr	r2, [pc, #416]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b2e:	6013      	str	r3, [r2, #0]
 8003b30:	4b66      	ldr	r3, [pc, #408]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a65      	ldr	r2, [pc, #404]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d013      	beq.n	8003b6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b44:	f7fe f99c 	bl	8001e80 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b4c:	f7fe f998 	bl	8001e80 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b64      	cmp	r3, #100	; 0x64
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e207      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5e:	4b5b      	ldr	r3, [pc, #364]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0f0      	beq.n	8003b4c <HAL_RCC_OscConfig+0xc0>
 8003b6a:	e014      	b.n	8003b96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6c:	f7fe f988 	bl	8001e80 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b74:	f7fe f984 	bl	8001e80 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b64      	cmp	r3, #100	; 0x64
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e1f3      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b86:	4b51      	ldr	r3, [pc, #324]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1f0      	bne.n	8003b74 <HAL_RCC_OscConfig+0xe8>
 8003b92:	e000      	b.n	8003b96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d063      	beq.n	8003c6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ba2:	4b4a      	ldr	r3, [pc, #296]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 030c 	and.w	r3, r3, #12
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00b      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bae:	4b47      	ldr	r3, [pc, #284]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d11c      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bba:	4b44      	ldr	r3, [pc, #272]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d116      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bc6:	4b41      	ldr	r3, [pc, #260]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <HAL_RCC_OscConfig+0x152>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d001      	beq.n	8003bde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e1c7      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bde:	4b3b      	ldr	r3, [pc, #236]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	4937      	ldr	r1, [pc, #220]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bf2:	e03a      	b.n	8003c6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d020      	beq.n	8003c3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bfc:	4b34      	ldr	r3, [pc, #208]	; (8003cd0 <HAL_RCC_OscConfig+0x244>)
 8003bfe:	2201      	movs	r2, #1
 8003c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c02:	f7fe f93d 	bl	8001e80 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c0a:	f7fe f939 	bl	8001e80 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e1a8      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c1c:	4b2b      	ldr	r3, [pc, #172]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0f0      	beq.n	8003c0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c28:	4b28      	ldr	r3, [pc, #160]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	4925      	ldr	r1, [pc, #148]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	600b      	str	r3, [r1, #0]
 8003c3c:	e015      	b.n	8003c6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c3e:	4b24      	ldr	r3, [pc, #144]	; (8003cd0 <HAL_RCC_OscConfig+0x244>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c44:	f7fe f91c 	bl	8001e80 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c4c:	f7fe f918 	bl	8001e80 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e187      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c5e:	4b1b      	ldr	r3, [pc, #108]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1f0      	bne.n	8003c4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d036      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d016      	beq.n	8003cac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c7e:	4b15      	ldr	r3, [pc, #84]	; (8003cd4 <HAL_RCC_OscConfig+0x248>)
 8003c80:	2201      	movs	r2, #1
 8003c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c84:	f7fe f8fc 	bl	8001e80 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c8c:	f7fe f8f8 	bl	8001e80 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e167      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <HAL_RCC_OscConfig+0x240>)
 8003ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0f0      	beq.n	8003c8c <HAL_RCC_OscConfig+0x200>
 8003caa:	e01b      	b.n	8003ce4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cac:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <HAL_RCC_OscConfig+0x248>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb2:	f7fe f8e5 	bl	8001e80 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb8:	e00e      	b.n	8003cd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cba:	f7fe f8e1 	bl	8001e80 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d907      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e150      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	42470000 	.word	0x42470000
 8003cd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd8:	4b88      	ldr	r3, [pc, #544]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1ea      	bne.n	8003cba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 8097 	beq.w	8003e20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cf6:	4b81      	ldr	r3, [pc, #516]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10f      	bne.n	8003d22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d02:	2300      	movs	r3, #0
 8003d04:	60bb      	str	r3, [r7, #8]
 8003d06:	4b7d      	ldr	r3, [pc, #500]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	4a7c      	ldr	r2, [pc, #496]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d10:	6413      	str	r3, [r2, #64]	; 0x40
 8003d12:	4b7a      	ldr	r3, [pc, #488]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1a:	60bb      	str	r3, [r7, #8]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d22:	4b77      	ldr	r3, [pc, #476]	; (8003f00 <HAL_RCC_OscConfig+0x474>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d118      	bne.n	8003d60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d2e:	4b74      	ldr	r3, [pc, #464]	; (8003f00 <HAL_RCC_OscConfig+0x474>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a73      	ldr	r2, [pc, #460]	; (8003f00 <HAL_RCC_OscConfig+0x474>)
 8003d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d3a:	f7fe f8a1 	bl	8001e80 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d42:	f7fe f89d 	bl	8001e80 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e10c      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d54:	4b6a      	ldr	r3, [pc, #424]	; (8003f00 <HAL_RCC_OscConfig+0x474>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0f0      	beq.n	8003d42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d106      	bne.n	8003d76 <HAL_RCC_OscConfig+0x2ea>
 8003d68:	4b64      	ldr	r3, [pc, #400]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6c:	4a63      	ldr	r2, [pc, #396]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	6713      	str	r3, [r2, #112]	; 0x70
 8003d74:	e01c      	b.n	8003db0 <HAL_RCC_OscConfig+0x324>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2b05      	cmp	r3, #5
 8003d7c:	d10c      	bne.n	8003d98 <HAL_RCC_OscConfig+0x30c>
 8003d7e:	4b5f      	ldr	r3, [pc, #380]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d82:	4a5e      	ldr	r2, [pc, #376]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d84:	f043 0304 	orr.w	r3, r3, #4
 8003d88:	6713      	str	r3, [r2, #112]	; 0x70
 8003d8a:	4b5c      	ldr	r3, [pc, #368]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8e:	4a5b      	ldr	r2, [pc, #364]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d90:	f043 0301 	orr.w	r3, r3, #1
 8003d94:	6713      	str	r3, [r2, #112]	; 0x70
 8003d96:	e00b      	b.n	8003db0 <HAL_RCC_OscConfig+0x324>
 8003d98:	4b58      	ldr	r3, [pc, #352]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9c:	4a57      	ldr	r2, [pc, #348]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003d9e:	f023 0301 	bic.w	r3, r3, #1
 8003da2:	6713      	str	r3, [r2, #112]	; 0x70
 8003da4:	4b55      	ldr	r3, [pc, #340]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da8:	4a54      	ldr	r2, [pc, #336]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003daa:	f023 0304 	bic.w	r3, r3, #4
 8003dae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d015      	beq.n	8003de4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db8:	f7fe f862 	bl	8001e80 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dbe:	e00a      	b.n	8003dd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dc0:	f7fe f85e 	bl	8001e80 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e0cb      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd6:	4b49      	ldr	r3, [pc, #292]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0ee      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x334>
 8003de2:	e014      	b.n	8003e0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de4:	f7fe f84c 	bl	8001e80 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dea:	e00a      	b.n	8003e02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dec:	f7fe f848 	bl	8001e80 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e0b5      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e02:	4b3e      	ldr	r3, [pc, #248]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1ee      	bne.n	8003dec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e0e:	7dfb      	ldrb	r3, [r7, #23]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d105      	bne.n	8003e20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e14:	4b39      	ldr	r3, [pc, #228]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	4a38      	ldr	r2, [pc, #224]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 80a1 	beq.w	8003f6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e2a:	4b34      	ldr	r3, [pc, #208]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d05c      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d141      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3e:	4b31      	ldr	r3, [pc, #196]	; (8003f04 <HAL_RCC_OscConfig+0x478>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e44:	f7fe f81c 	bl	8001e80 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e4c:	f7fe f818 	bl	8001e80 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e087      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e5e:	4b27      	ldr	r3, [pc, #156]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f0      	bne.n	8003e4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69da      	ldr	r2, [r3, #28]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	019b      	lsls	r3, r3, #6
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e80:	085b      	lsrs	r3, r3, #1
 8003e82:	3b01      	subs	r3, #1
 8003e84:	041b      	lsls	r3, r3, #16
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8c:	061b      	lsls	r3, r3, #24
 8003e8e:	491b      	ldr	r1, [pc, #108]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e94:	4b1b      	ldr	r3, [pc, #108]	; (8003f04 <HAL_RCC_OscConfig+0x478>)
 8003e96:	2201      	movs	r2, #1
 8003e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9a:	f7fd fff1 	bl	8001e80 <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea2:	f7fd ffed 	bl	8001e80 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e05c      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb4:	4b11      	ldr	r3, [pc, #68]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0f0      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x416>
 8003ec0:	e054      	b.n	8003f6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec2:	4b10      	ldr	r3, [pc, #64]	; (8003f04 <HAL_RCC_OscConfig+0x478>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec8:	f7fd ffda 	bl	8001e80 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed0:	f7fd ffd6 	bl	8001e80 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e045      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee2:	4b06      	ldr	r3, [pc, #24]	; (8003efc <HAL_RCC_OscConfig+0x470>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x444>
 8003eee:	e03d      	b.n	8003f6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d107      	bne.n	8003f08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e038      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
 8003efc:	40023800 	.word	0x40023800
 8003f00:	40007000 	.word	0x40007000
 8003f04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f08:	4b1b      	ldr	r3, [pc, #108]	; (8003f78 <HAL_RCC_OscConfig+0x4ec>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d028      	beq.n	8003f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d121      	bne.n	8003f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d11a      	bne.n	8003f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f38:	4013      	ands	r3, r2
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d111      	bne.n	8003f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4e:	085b      	lsrs	r3, r3, #1
 8003f50:	3b01      	subs	r3, #1
 8003f52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d107      	bne.n	8003f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d001      	beq.n	8003f6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e000      	b.n	8003f6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	40023800 	.word	0x40023800

08003f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e0cc      	b.n	800412a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f90:	4b68      	ldr	r3, [pc, #416]	; (8004134 <HAL_RCC_ClockConfig+0x1b8>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d90c      	bls.n	8003fb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f9e:	4b65      	ldr	r3, [pc, #404]	; (8004134 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa6:	4b63      	ldr	r3, [pc, #396]	; (8004134 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d001      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0b8      	b.n	800412a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d020      	beq.n	8004006 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d005      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fd0:	4b59      	ldr	r3, [pc, #356]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	4a58      	ldr	r2, [pc, #352]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0308 	and.w	r3, r3, #8
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fe8:	4b53      	ldr	r3, [pc, #332]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	4a52      	ldr	r2, [pc, #328]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ff2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff4:	4b50      	ldr	r3, [pc, #320]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	494d      	ldr	r1, [pc, #308]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	4313      	orrs	r3, r2
 8004004:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d044      	beq.n	800409c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d107      	bne.n	800402a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401a:	4b47      	ldr	r3, [pc, #284]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d119      	bne.n	800405a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e07f      	b.n	800412a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b02      	cmp	r3, #2
 8004030:	d003      	beq.n	800403a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004036:	2b03      	cmp	r3, #3
 8004038:	d107      	bne.n	800404a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800403a:	4b3f      	ldr	r3, [pc, #252]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d109      	bne.n	800405a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e06f      	b.n	800412a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800404a:	4b3b      	ldr	r3, [pc, #236]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e067      	b.n	800412a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800405a:	4b37      	ldr	r3, [pc, #220]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f023 0203 	bic.w	r2, r3, #3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	4934      	ldr	r1, [pc, #208]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 8004068:	4313      	orrs	r3, r2
 800406a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800406c:	f7fd ff08 	bl	8001e80 <HAL_GetTick>
 8004070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004072:	e00a      	b.n	800408a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004074:	f7fd ff04 	bl	8001e80 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004082:	4293      	cmp	r3, r2
 8004084:	d901      	bls.n	800408a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e04f      	b.n	800412a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408a:	4b2b      	ldr	r3, [pc, #172]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 020c 	and.w	r2, r3, #12
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	429a      	cmp	r2, r3
 800409a:	d1eb      	bne.n	8004074 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800409c:	4b25      	ldr	r3, [pc, #148]	; (8004134 <HAL_RCC_ClockConfig+0x1b8>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d20c      	bcs.n	80040c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040aa:	4b22      	ldr	r3, [pc, #136]	; (8004134 <HAL_RCC_ClockConfig+0x1b8>)
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b2:	4b20      	ldr	r3, [pc, #128]	; (8004134 <HAL_RCC_ClockConfig+0x1b8>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d001      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e032      	b.n	800412a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d008      	beq.n	80040e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040d0:	4b19      	ldr	r3, [pc, #100]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	4916      	ldr	r1, [pc, #88]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d009      	beq.n	8004102 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ee:	4b12      	ldr	r3, [pc, #72]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	490e      	ldr	r1, [pc, #56]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004102:	f000 f821 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 8004106:	4602      	mov	r2, r0
 8004108:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	091b      	lsrs	r3, r3, #4
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	490a      	ldr	r1, [pc, #40]	; (800413c <HAL_RCC_ClockConfig+0x1c0>)
 8004114:	5ccb      	ldrb	r3, [r1, r3]
 8004116:	fa22 f303 	lsr.w	r3, r2, r3
 800411a:	4a09      	ldr	r2, [pc, #36]	; (8004140 <HAL_RCC_ClockConfig+0x1c4>)
 800411c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800411e:	4b09      	ldr	r3, [pc, #36]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f7fd fe68 	bl	8001df8 <HAL_InitTick>

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	40023c00 	.word	0x40023c00
 8004138:	40023800 	.word	0x40023800
 800413c:	08008228 	.word	0x08008228
 8004140:	20000020 	.word	0x20000020
 8004144:	20000024 	.word	0x20000024

08004148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800414c:	b094      	sub	sp, #80	; 0x50
 800414e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	647b      	str	r3, [r7, #68]	; 0x44
 8004154:	2300      	movs	r3, #0
 8004156:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004158:	2300      	movs	r3, #0
 800415a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004160:	4b79      	ldr	r3, [pc, #484]	; (8004348 <HAL_RCC_GetSysClockFreq+0x200>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 030c 	and.w	r3, r3, #12
 8004168:	2b08      	cmp	r3, #8
 800416a:	d00d      	beq.n	8004188 <HAL_RCC_GetSysClockFreq+0x40>
 800416c:	2b08      	cmp	r3, #8
 800416e:	f200 80e1 	bhi.w	8004334 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <HAL_RCC_GetSysClockFreq+0x34>
 8004176:	2b04      	cmp	r3, #4
 8004178:	d003      	beq.n	8004182 <HAL_RCC_GetSysClockFreq+0x3a>
 800417a:	e0db      	b.n	8004334 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800417c:	4b73      	ldr	r3, [pc, #460]	; (800434c <HAL_RCC_GetSysClockFreq+0x204>)
 800417e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004180:	e0db      	b.n	800433a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004182:	4b73      	ldr	r3, [pc, #460]	; (8004350 <HAL_RCC_GetSysClockFreq+0x208>)
 8004184:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004186:	e0d8      	b.n	800433a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004188:	4b6f      	ldr	r3, [pc, #444]	; (8004348 <HAL_RCC_GetSysClockFreq+0x200>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004190:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004192:	4b6d      	ldr	r3, [pc, #436]	; (8004348 <HAL_RCC_GetSysClockFreq+0x200>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d063      	beq.n	8004266 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800419e:	4b6a      	ldr	r3, [pc, #424]	; (8004348 <HAL_RCC_GetSysClockFreq+0x200>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	099b      	lsrs	r3, r3, #6
 80041a4:	2200      	movs	r2, #0
 80041a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80041a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80041aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041b0:	633b      	str	r3, [r7, #48]	; 0x30
 80041b2:	2300      	movs	r3, #0
 80041b4:	637b      	str	r3, [r7, #52]	; 0x34
 80041b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80041ba:	4622      	mov	r2, r4
 80041bc:	462b      	mov	r3, r5
 80041be:	f04f 0000 	mov.w	r0, #0
 80041c2:	f04f 0100 	mov.w	r1, #0
 80041c6:	0159      	lsls	r1, r3, #5
 80041c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041cc:	0150      	lsls	r0, r2, #5
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	4621      	mov	r1, r4
 80041d4:	1a51      	subs	r1, r2, r1
 80041d6:	6139      	str	r1, [r7, #16]
 80041d8:	4629      	mov	r1, r5
 80041da:	eb63 0301 	sbc.w	r3, r3, r1
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041ec:	4659      	mov	r1, fp
 80041ee:	018b      	lsls	r3, r1, #6
 80041f0:	4651      	mov	r1, sl
 80041f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041f6:	4651      	mov	r1, sl
 80041f8:	018a      	lsls	r2, r1, #6
 80041fa:	4651      	mov	r1, sl
 80041fc:	ebb2 0801 	subs.w	r8, r2, r1
 8004200:	4659      	mov	r1, fp
 8004202:	eb63 0901 	sbc.w	r9, r3, r1
 8004206:	f04f 0200 	mov.w	r2, #0
 800420a:	f04f 0300 	mov.w	r3, #0
 800420e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004212:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004216:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800421a:	4690      	mov	r8, r2
 800421c:	4699      	mov	r9, r3
 800421e:	4623      	mov	r3, r4
 8004220:	eb18 0303 	adds.w	r3, r8, r3
 8004224:	60bb      	str	r3, [r7, #8]
 8004226:	462b      	mov	r3, r5
 8004228:	eb49 0303 	adc.w	r3, r9, r3
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800423a:	4629      	mov	r1, r5
 800423c:	024b      	lsls	r3, r1, #9
 800423e:	4621      	mov	r1, r4
 8004240:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004244:	4621      	mov	r1, r4
 8004246:	024a      	lsls	r2, r1, #9
 8004248:	4610      	mov	r0, r2
 800424a:	4619      	mov	r1, r3
 800424c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800424e:	2200      	movs	r2, #0
 8004250:	62bb      	str	r3, [r7, #40]	; 0x28
 8004252:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004254:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004258:	f7fc f80a 	bl	8000270 <__aeabi_uldivmod>
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	4613      	mov	r3, r2
 8004262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004264:	e058      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004266:	4b38      	ldr	r3, [pc, #224]	; (8004348 <HAL_RCC_GetSysClockFreq+0x200>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	099b      	lsrs	r3, r3, #6
 800426c:	2200      	movs	r2, #0
 800426e:	4618      	mov	r0, r3
 8004270:	4611      	mov	r1, r2
 8004272:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004276:	623b      	str	r3, [r7, #32]
 8004278:	2300      	movs	r3, #0
 800427a:	627b      	str	r3, [r7, #36]	; 0x24
 800427c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004280:	4642      	mov	r2, r8
 8004282:	464b      	mov	r3, r9
 8004284:	f04f 0000 	mov.w	r0, #0
 8004288:	f04f 0100 	mov.w	r1, #0
 800428c:	0159      	lsls	r1, r3, #5
 800428e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004292:	0150      	lsls	r0, r2, #5
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4641      	mov	r1, r8
 800429a:	ebb2 0a01 	subs.w	sl, r2, r1
 800429e:	4649      	mov	r1, r9
 80042a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80042a4:	f04f 0200 	mov.w	r2, #0
 80042a8:	f04f 0300 	mov.w	r3, #0
 80042ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042b8:	ebb2 040a 	subs.w	r4, r2, sl
 80042bc:	eb63 050b 	sbc.w	r5, r3, fp
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	00eb      	lsls	r3, r5, #3
 80042ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042ce:	00e2      	lsls	r2, r4, #3
 80042d0:	4614      	mov	r4, r2
 80042d2:	461d      	mov	r5, r3
 80042d4:	4643      	mov	r3, r8
 80042d6:	18e3      	adds	r3, r4, r3
 80042d8:	603b      	str	r3, [r7, #0]
 80042da:	464b      	mov	r3, r9
 80042dc:	eb45 0303 	adc.w	r3, r5, r3
 80042e0:	607b      	str	r3, [r7, #4]
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042ee:	4629      	mov	r1, r5
 80042f0:	028b      	lsls	r3, r1, #10
 80042f2:	4621      	mov	r1, r4
 80042f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042f8:	4621      	mov	r1, r4
 80042fa:	028a      	lsls	r2, r1, #10
 80042fc:	4610      	mov	r0, r2
 80042fe:	4619      	mov	r1, r3
 8004300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004302:	2200      	movs	r2, #0
 8004304:	61bb      	str	r3, [r7, #24]
 8004306:	61fa      	str	r2, [r7, #28]
 8004308:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800430c:	f7fb ffb0 	bl	8000270 <__aeabi_uldivmod>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4613      	mov	r3, r2
 8004316:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004318:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <HAL_RCC_GetSysClockFreq+0x200>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	0c1b      	lsrs	r3, r3, #16
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	3301      	adds	r3, #1
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004328:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800432a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800432c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004330:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004332:	e002      	b.n	800433a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004334:	4b05      	ldr	r3, [pc, #20]	; (800434c <HAL_RCC_GetSysClockFreq+0x204>)
 8004336:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004338:	bf00      	nop
    }
  }
  return sysclockfreq;
 800433a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800433c:	4618      	mov	r0, r3
 800433e:	3750      	adds	r7, #80	; 0x50
 8004340:	46bd      	mov	sp, r7
 8004342:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004346:	bf00      	nop
 8004348:	40023800 	.word	0x40023800
 800434c:	00f42400 	.word	0x00f42400
 8004350:	007a1200 	.word	0x007a1200

08004354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004358:	4b03      	ldr	r3, [pc, #12]	; (8004368 <HAL_RCC_GetHCLKFreq+0x14>)
 800435a:	681b      	ldr	r3, [r3, #0]
}
 800435c:	4618      	mov	r0, r3
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	20000020 	.word	0x20000020

0800436c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004370:	f7ff fff0 	bl	8004354 <HAL_RCC_GetHCLKFreq>
 8004374:	4602      	mov	r2, r0
 8004376:	4b05      	ldr	r3, [pc, #20]	; (800438c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	0a9b      	lsrs	r3, r3, #10
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	4903      	ldr	r1, [pc, #12]	; (8004390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004382:	5ccb      	ldrb	r3, [r1, r3]
 8004384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004388:	4618      	mov	r0, r3
 800438a:	bd80      	pop	{r7, pc}
 800438c:	40023800 	.word	0x40023800
 8004390:	08008238 	.word	0x08008238

08004394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004398:	f7ff ffdc 	bl	8004354 <HAL_RCC_GetHCLKFreq>
 800439c:	4602      	mov	r2, r0
 800439e:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	0b5b      	lsrs	r3, r3, #13
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	4903      	ldr	r1, [pc, #12]	; (80043b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043aa:	5ccb      	ldrb	r3, [r1, r3]
 80043ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	40023800 	.word	0x40023800
 80043b8:	08008238 	.word	0x08008238

080043bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e07b      	b.n	80044c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d108      	bne.n	80043e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043de:	d009      	beq.n	80043f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	61da      	str	r2, [r3, #28]
 80043e6:	e005      	b.n	80043f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d106      	bne.n	8004414 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fd fb16 	bl	8001a40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800442a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800443c:	431a      	orrs	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004478:	ea42 0103 	orr.w	r1, r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004480:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	0c1b      	lsrs	r3, r3, #16
 8004492:	f003 0104 	and.w	r1, r3, #4
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	f003 0210 	and.w	r2, r3, #16
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69da      	ldr	r2, [r3, #28]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b088      	sub	sp, #32
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	60f8      	str	r0, [r7, #12]
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	603b      	str	r3, [r7, #0]
 80044da:	4613      	mov	r3, r2
 80044dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044de:	2300      	movs	r3, #0
 80044e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d101      	bne.n	80044f0 <HAL_SPI_Transmit+0x22>
 80044ec:	2302      	movs	r3, #2
 80044ee:	e126      	b.n	800473e <HAL_SPI_Transmit+0x270>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044f8:	f7fd fcc2 	bl	8001e80 <HAL_GetTick>
 80044fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80044fe:	88fb      	ldrh	r3, [r7, #6]
 8004500:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b01      	cmp	r3, #1
 800450c:	d002      	beq.n	8004514 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800450e:	2302      	movs	r3, #2
 8004510:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004512:	e10b      	b.n	800472c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <HAL_SPI_Transmit+0x52>
 800451a:	88fb      	ldrh	r3, [r7, #6]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d102      	bne.n	8004526 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004524:	e102      	b.n	800472c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2203      	movs	r2, #3
 800452a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	88fa      	ldrh	r2, [r7, #6]
 800453e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	88fa      	ldrh	r2, [r7, #6]
 8004544:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800456c:	d10f      	bne.n	800458e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800457c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800458c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004598:	2b40      	cmp	r3, #64	; 0x40
 800459a:	d007      	beq.n	80045ac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045b4:	d14b      	bne.n	800464e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <HAL_SPI_Transmit+0xf6>
 80045be:	8afb      	ldrh	r3, [r7, #22]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d13e      	bne.n	8004642 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	881a      	ldrh	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	1c9a      	adds	r2, r3, #2
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045de:	b29b      	uxth	r3, r3
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045e8:	e02b      	b.n	8004642 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d112      	bne.n	800461e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fc:	881a      	ldrh	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004608:	1c9a      	adds	r2, r3, #2
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004612:	b29b      	uxth	r3, r3
 8004614:	3b01      	subs	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	86da      	strh	r2, [r3, #54]	; 0x36
 800461c:	e011      	b.n	8004642 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800461e:	f7fd fc2f 	bl	8001e80 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	429a      	cmp	r2, r3
 800462c:	d803      	bhi.n	8004636 <HAL_SPI_Transmit+0x168>
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004634:	d102      	bne.n	800463c <HAL_SPI_Transmit+0x16e>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d102      	bne.n	8004642 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004640:	e074      	b.n	800472c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004646:	b29b      	uxth	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1ce      	bne.n	80045ea <HAL_SPI_Transmit+0x11c>
 800464c:	e04c      	b.n	80046e8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d002      	beq.n	800465c <HAL_SPI_Transmit+0x18e>
 8004656:	8afb      	ldrh	r3, [r7, #22]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d140      	bne.n	80046de <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	330c      	adds	r3, #12
 8004666:	7812      	ldrb	r2, [r2, #0]
 8004668:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004678:	b29b      	uxth	r3, r3
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004682:	e02c      	b.n	80046de <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b02      	cmp	r3, #2
 8004690:	d113      	bne.n	80046ba <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	330c      	adds	r3, #12
 800469c:	7812      	ldrb	r2, [r2, #0]
 800469e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80046b8:	e011      	b.n	80046de <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046ba:	f7fd fbe1 	bl	8001e80 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d803      	bhi.n	80046d2 <HAL_SPI_Transmit+0x204>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d0:	d102      	bne.n	80046d8 <HAL_SPI_Transmit+0x20a>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d102      	bne.n	80046de <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046dc:	e026      	b.n	800472c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1cd      	bne.n	8004684 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	6839      	ldr	r1, [r7, #0]
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f000 fcf7 	bl	80050e0 <SPI_EndRxTxTransaction>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2220      	movs	r2, #32
 80046fc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10a      	bne.n	800471c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004706:	2300      	movs	r3, #0
 8004708:	613b      	str	r3, [r7, #16]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	613b      	str	r3, [r7, #16]
 800471a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	77fb      	strb	r3, [r7, #31]
 8004728:	e000      	b.n	800472c <HAL_SPI_Transmit+0x25e>
  }

error:
 800472a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800473c:	7ffb      	ldrb	r3, [r7, #31]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3720      	adds	r7, #32
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b088      	sub	sp, #32
 800474a:	af02      	add	r7, sp, #8
 800474c:	60f8      	str	r0, [r7, #12]
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	603b      	str	r3, [r7, #0]
 8004752:	4613      	mov	r3, r2
 8004754:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004756:	2300      	movs	r3, #0
 8004758:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004762:	d112      	bne.n	800478a <HAL_SPI_Receive+0x44>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10e      	bne.n	800478a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2204      	movs	r2, #4
 8004770:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004774:	88fa      	ldrh	r2, [r7, #6]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	4613      	mov	r3, r2
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	68b9      	ldr	r1, [r7, #8]
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 f8f1 	bl	8004968 <HAL_SPI_TransmitReceive>
 8004786:	4603      	mov	r3, r0
 8004788:	e0ea      	b.n	8004960 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004790:	2b01      	cmp	r3, #1
 8004792:	d101      	bne.n	8004798 <HAL_SPI_Receive+0x52>
 8004794:	2302      	movs	r3, #2
 8004796:	e0e3      	b.n	8004960 <HAL_SPI_Receive+0x21a>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047a0:	f7fd fb6e 	bl	8001e80 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d002      	beq.n	80047b8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80047b2:	2302      	movs	r3, #2
 80047b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80047b6:	e0ca      	b.n	800494e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <HAL_SPI_Receive+0x7e>
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d102      	bne.n	80047ca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80047c8:	e0c1      	b.n	800494e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2204      	movs	r2, #4
 80047ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	88fa      	ldrh	r2, [r7, #6]
 80047e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	88fa      	ldrh	r2, [r7, #6]
 80047e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004810:	d10f      	bne.n	8004832 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004820:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004830:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483c:	2b40      	cmp	r3, #64	; 0x40
 800483e:	d007      	beq.n	8004850 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800484e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d162      	bne.n	800491e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004858:	e02e      	b.n	80048b8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b01      	cmp	r3, #1
 8004866:	d115      	bne.n	8004894 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f103 020c 	add.w	r2, r3, #12
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004874:	7812      	ldrb	r2, [r2, #0]
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004888:	b29b      	uxth	r3, r3
 800488a:	3b01      	subs	r3, #1
 800488c:	b29a      	uxth	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004892:	e011      	b.n	80048b8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004894:	f7fd faf4 	bl	8001e80 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d803      	bhi.n	80048ac <HAL_SPI_Receive+0x166>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048aa:	d102      	bne.n	80048b2 <HAL_SPI_Receive+0x16c>
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d102      	bne.n	80048b8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80048b6:	e04a      	b.n	800494e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1cb      	bne.n	800485a <HAL_SPI_Receive+0x114>
 80048c2:	e031      	b.n	8004928 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d113      	bne.n	80048fa <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68da      	ldr	r2, [r3, #12]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048dc:	b292      	uxth	r2, r2
 80048de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	1c9a      	adds	r2, r3, #2
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	3b01      	subs	r3, #1
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048f8:	e011      	b.n	800491e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048fa:	f7fd fac1 	bl	8001e80 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	429a      	cmp	r2, r3
 8004908:	d803      	bhi.n	8004912 <HAL_SPI_Receive+0x1cc>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004910:	d102      	bne.n	8004918 <HAL_SPI_Receive+0x1d2>
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d102      	bne.n	800491e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800491c:	e017      	b.n	800494e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004922:	b29b      	uxth	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1cd      	bne.n	80048c4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	6839      	ldr	r1, [r7, #0]
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 fb71 	bl	8005014 <SPI_EndRxTransaction>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2220      	movs	r2, #32
 800493c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	75fb      	strb	r3, [r7, #23]
 800494a:	e000      	b.n	800494e <HAL_SPI_Receive+0x208>
  }

error :
 800494c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800495e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004960:	4618      	mov	r0, r3
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b08c      	sub	sp, #48	; 0x30
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
 8004974:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004976:	2301      	movs	r3, #1
 8004978:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004986:	2b01      	cmp	r3, #1
 8004988:	d101      	bne.n	800498e <HAL_SPI_TransmitReceive+0x26>
 800498a:	2302      	movs	r3, #2
 800498c:	e18a      	b.n	8004ca4 <HAL_SPI_TransmitReceive+0x33c>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004996:	f7fd fa73 	bl	8001e80 <HAL_GetTick>
 800499a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80049ac:	887b      	ldrh	r3, [r7, #2]
 80049ae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d00f      	beq.n	80049d8 <HAL_SPI_TransmitReceive+0x70>
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049be:	d107      	bne.n	80049d0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d103      	bne.n	80049d0 <HAL_SPI_TransmitReceive+0x68>
 80049c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049cc:	2b04      	cmp	r3, #4
 80049ce:	d003      	beq.n	80049d8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80049d0:	2302      	movs	r3, #2
 80049d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80049d6:	e15b      	b.n	8004c90 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d005      	beq.n	80049ea <HAL_SPI_TransmitReceive+0x82>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <HAL_SPI_TransmitReceive+0x82>
 80049e4:	887b      	ldrh	r3, [r7, #2]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d103      	bne.n	80049f2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80049f0:	e14e      	b.n	8004c90 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d003      	beq.n	8004a06 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2205      	movs	r2, #5
 8004a02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	887a      	ldrh	r2, [r7, #2]
 8004a16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	887a      	ldrh	r2, [r7, #2]
 8004a1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	887a      	ldrh	r2, [r7, #2]
 8004a28:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	887a      	ldrh	r2, [r7, #2]
 8004a2e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a46:	2b40      	cmp	r3, #64	; 0x40
 8004a48:	d007      	beq.n	8004a5a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a62:	d178      	bne.n	8004b56 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d002      	beq.n	8004a72 <HAL_SPI_TransmitReceive+0x10a>
 8004a6c:	8b7b      	ldrh	r3, [r7, #26]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d166      	bne.n	8004b40 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a76:	881a      	ldrh	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a82:	1c9a      	adds	r2, r3, #2
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a96:	e053      	b.n	8004b40 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d11b      	bne.n	8004ade <HAL_SPI_TransmitReceive+0x176>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d016      	beq.n	8004ade <HAL_SPI_TransmitReceive+0x176>
 8004ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d113      	bne.n	8004ade <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aba:	881a      	ldrh	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac6:	1c9a      	adds	r2, r3, #2
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d119      	bne.n	8004b20 <HAL_SPI_TransmitReceive+0x1b8>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d014      	beq.n	8004b20 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b00:	b292      	uxth	r2, r2
 8004b02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	1c9a      	adds	r2, r3, #2
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	3b01      	subs	r3, #1
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b20:	f7fd f9ae 	bl	8001e80 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d807      	bhi.n	8004b40 <HAL_SPI_TransmitReceive+0x1d8>
 8004b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b36:	d003      	beq.n	8004b40 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004b3e:	e0a7      	b.n	8004c90 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1a6      	bne.n	8004a98 <HAL_SPI_TransmitReceive+0x130>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1a1      	bne.n	8004a98 <HAL_SPI_TransmitReceive+0x130>
 8004b54:	e07c      	b.n	8004c50 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <HAL_SPI_TransmitReceive+0x1fc>
 8004b5e:	8b7b      	ldrh	r3, [r7, #26]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d16b      	bne.n	8004c3c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	330c      	adds	r3, #12
 8004b6e:	7812      	ldrb	r2, [r2, #0]
 8004b70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	3b01      	subs	r3, #1
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b8a:	e057      	b.n	8004c3c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d11c      	bne.n	8004bd4 <HAL_SPI_TransmitReceive+0x26c>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d017      	beq.n	8004bd4 <HAL_SPI_TransmitReceive+0x26c>
 8004ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d114      	bne.n	8004bd4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	330c      	adds	r3, #12
 8004bb4:	7812      	ldrb	r2, [r2, #0]
 8004bb6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbc:	1c5a      	adds	r2, r3, #1
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d119      	bne.n	8004c16 <HAL_SPI_TransmitReceive+0x2ae>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d014      	beq.n	8004c16 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c12:	2301      	movs	r3, #1
 8004c14:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c16:	f7fd f933 	bl	8001e80 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d803      	bhi.n	8004c2e <HAL_SPI_TransmitReceive+0x2c6>
 8004c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2c:	d102      	bne.n	8004c34 <HAL_SPI_TransmitReceive+0x2cc>
 8004c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d103      	bne.n	8004c3c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004c3a:	e029      	b.n	8004c90 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1a2      	bne.n	8004b8c <HAL_SPI_TransmitReceive+0x224>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d19d      	bne.n	8004b8c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 fa43 	bl	80050e0 <SPI_EndRxTxTransaction>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d006      	beq.n	8004c6e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004c6c:	e010      	b.n	8004c90 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10b      	bne.n	8004c8e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c76:	2300      	movs	r3, #0
 8004c78:	617b      	str	r3, [r7, #20]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	617b      	str	r3, [r7, #20]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	e000      	b.n	8004c90 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004c8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ca0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3730      	adds	r7, #48	; 0x30
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b088      	sub	sp, #32
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	099b      	lsrs	r3, r3, #6
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10f      	bne.n	8004cf0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	099b      	lsrs	r3, r3, #6
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d004      	beq.n	8004cf0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	4798      	blx	r3
    return;
 8004cee:	e0d7      	b.n	8004ea0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	085b      	lsrs	r3, r3, #1
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <HAL_SPI_IRQHandler+0x66>
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	09db      	lsrs	r3, r3, #7
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d004      	beq.n	8004d12 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	4798      	blx	r3
    return;
 8004d10:	e0c6      	b.n	8004ea0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	095b      	lsrs	r3, r3, #5
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10c      	bne.n	8004d38 <HAL_SPI_IRQHandler+0x8c>
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	099b      	lsrs	r3, r3, #6
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d106      	bne.n	8004d38 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	0a1b      	lsrs	r3, r3, #8
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 80b4 	beq.w	8004ea0 <HAL_SPI_IRQHandler+0x1f4>
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	095b      	lsrs	r3, r3, #5
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 80ad 	beq.w	8004ea0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	099b      	lsrs	r3, r3, #6
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d023      	beq.n	8004d9a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b03      	cmp	r3, #3
 8004d5c:	d011      	beq.n	8004d82 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d62:	f043 0204 	orr.w	r2, r3, #4
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	617b      	str	r3, [r7, #20]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	617b      	str	r3, [r7, #20]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	617b      	str	r3, [r7, #20]
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	e00b      	b.n	8004d9a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d82:	2300      	movs	r3, #0
 8004d84:	613b      	str	r3, [r7, #16]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	613b      	str	r3, [r7, #16]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	613b      	str	r3, [r7, #16]
 8004d96:	693b      	ldr	r3, [r7, #16]
        return;
 8004d98:	e082      	b.n	8004ea0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	095b      	lsrs	r3, r3, #5
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d014      	beq.n	8004dd0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004daa:	f043 0201 	orr.w	r2, r3, #1
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004db2:	2300      	movs	r3, #0
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	60fb      	str	r3, [r7, #12]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	0a1b      	lsrs	r3, r3, #8
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00c      	beq.n	8004df6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de0:	f043 0208 	orr.w	r2, r3, #8
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004de8:	2300      	movs	r3, #0
 8004dea:	60bb      	str	r3, [r7, #8]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	60bb      	str	r3, [r7, #8]
 8004df4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d04f      	beq.n	8004e9e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e0c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d104      	bne.n	8004e2a <HAL_SPI_IRQHandler+0x17e>
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d034      	beq.n	8004e94 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0203 	bic.w	r2, r2, #3
 8004e38:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d011      	beq.n	8004e66 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e46:	4a18      	ldr	r2, [pc, #96]	; (8004ea8 <HAL_SPI_IRQHandler+0x1fc>)
 8004e48:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fe fc29 	bl	80036a6 <HAL_DMA_Abort_IT>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d005      	beq.n	8004e66 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d016      	beq.n	8004e9c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e72:	4a0d      	ldr	r2, [pc, #52]	; (8004ea8 <HAL_SPI_IRQHandler+0x1fc>)
 8004e74:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fe fc13 	bl	80036a6 <HAL_DMA_Abort_IT>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004e92:	e003      	b.n	8004e9c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f809 	bl	8004eac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004e9a:	e000      	b.n	8004e9e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004e9c:	bf00      	nop
    return;
 8004e9e:	bf00      	nop
  }
}
 8004ea0:	3720      	adds	r7, #32
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	08004edd 	.word	0x08004edd

08004eac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ece:	b2db      	uxtb	r3, r3
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f7ff ffd8 	bl	8004eac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004efc:	bf00      	nop
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b088      	sub	sp, #32
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	603b      	str	r3, [r7, #0]
 8004f10:	4613      	mov	r3, r2
 8004f12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f14:	f7fc ffb4 	bl	8001e80 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1c:	1a9b      	subs	r3, r3, r2
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	4413      	add	r3, r2
 8004f22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f24:	f7fc ffac 	bl	8001e80 <HAL_GetTick>
 8004f28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f2a:	4b39      	ldr	r3, [pc, #228]	; (8005010 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	015b      	lsls	r3, r3, #5
 8004f30:	0d1b      	lsrs	r3, r3, #20
 8004f32:	69fa      	ldr	r2, [r7, #28]
 8004f34:	fb02 f303 	mul.w	r3, r2, r3
 8004f38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f3a:	e054      	b.n	8004fe6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f42:	d050      	beq.n	8004fe6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f44:	f7fc ff9c 	bl	8001e80 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	69fa      	ldr	r2, [r7, #28]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d902      	bls.n	8004f5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d13d      	bne.n	8004fd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f72:	d111      	bne.n	8004f98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f7c:	d004      	beq.n	8004f88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f86:	d107      	bne.n	8004f98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fa0:	d10f      	bne.n	8004fc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e017      	b.n	8005006 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	bf0c      	ite	eq
 8004ff6:	2301      	moveq	r3, #1
 8004ff8:	2300      	movne	r3, #0
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	79fb      	ldrb	r3, [r7, #7]
 8005000:	429a      	cmp	r2, r3
 8005002:	d19b      	bne.n	8004f3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3720      	adds	r7, #32
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20000020 	.word	0x20000020

08005014 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af02      	add	r7, sp, #8
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005028:	d111      	bne.n	800504e <SPI_EndRxTransaction+0x3a>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005032:	d004      	beq.n	800503e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800503c:	d107      	bne.n	800504e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800504c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005056:	d12a      	bne.n	80050ae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005060:	d012      	beq.n	8005088 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	2200      	movs	r2, #0
 800506a:	2180      	movs	r1, #128	; 0x80
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f7ff ff49 	bl	8004f04 <SPI_WaitFlagStateUntilTimeout>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d02d      	beq.n	80050d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800507c:	f043 0220 	orr.w	r2, r3, #32
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e026      	b.n	80050d6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2200      	movs	r2, #0
 8005090:	2101      	movs	r1, #1
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f7ff ff36 	bl	8004f04 <SPI_WaitFlagStateUntilTimeout>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d01a      	beq.n	80050d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a2:	f043 0220 	orr.w	r2, r3, #32
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e013      	b.n	80050d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	2200      	movs	r2, #0
 80050b6:	2101      	movs	r1, #1
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f7ff ff23 	bl	8004f04 <SPI_WaitFlagStateUntilTimeout>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d007      	beq.n	80050d4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c8:	f043 0220 	orr.w	r2, r3, #32
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e000      	b.n	80050d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
	...

080050e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b088      	sub	sp, #32
 80050e4:	af02      	add	r7, sp, #8
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80050ec:	4b1b      	ldr	r3, [pc, #108]	; (800515c <SPI_EndRxTxTransaction+0x7c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a1b      	ldr	r2, [pc, #108]	; (8005160 <SPI_EndRxTxTransaction+0x80>)
 80050f2:	fba2 2303 	umull	r2, r3, r2, r3
 80050f6:	0d5b      	lsrs	r3, r3, #21
 80050f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050fc:	fb02 f303 	mul.w	r3, r2, r3
 8005100:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800510a:	d112      	bne.n	8005132 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2200      	movs	r2, #0
 8005114:	2180      	movs	r1, #128	; 0x80
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f7ff fef4 	bl	8004f04 <SPI_WaitFlagStateUntilTimeout>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d016      	beq.n	8005150 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005126:	f043 0220 	orr.w	r2, r3, #32
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e00f      	b.n	8005152 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00a      	beq.n	800514e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	3b01      	subs	r3, #1
 800513c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005148:	2b80      	cmp	r3, #128	; 0x80
 800514a:	d0f2      	beq.n	8005132 <SPI_EndRxTxTransaction+0x52>
 800514c:	e000      	b.n	8005150 <SPI_EndRxTxTransaction+0x70>
        break;
 800514e:	bf00      	nop
  }

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3718      	adds	r7, #24
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	20000020 	.word	0x20000020
 8005160:	165e9f81 	.word	0x165e9f81

08005164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e041      	b.n	80051fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7fc fcd8 	bl	8001b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3304      	adds	r3, #4
 80051a0:	4619      	mov	r1, r3
 80051a2:	4610      	mov	r0, r2
 80051a4:	f000 faa0 	bl	80056e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b01      	cmp	r3, #1
 8005216:	d001      	beq.n	800521c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e04e      	b.n	80052ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0201 	orr.w	r2, r2, #1
 8005232:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a23      	ldr	r2, [pc, #140]	; (80052c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d022      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005246:	d01d      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a1f      	ldr	r2, [pc, #124]	; (80052cc <HAL_TIM_Base_Start_IT+0xc8>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d018      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a1e      	ldr	r2, [pc, #120]	; (80052d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d013      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a1c      	ldr	r2, [pc, #112]	; (80052d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d00e      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a1b      	ldr	r2, [pc, #108]	; (80052d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d009      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a19      	ldr	r2, [pc, #100]	; (80052dc <HAL_TIM_Base_Start_IT+0xd8>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d004      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0x80>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a18      	ldr	r2, [pc, #96]	; (80052e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d111      	bne.n	80052a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 0307 	and.w	r3, r3, #7
 800528e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b06      	cmp	r3, #6
 8005294:	d010      	beq.n	80052b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f042 0201 	orr.w	r2, r2, #1
 80052a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a6:	e007      	b.n	80052b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0201 	orr.w	r2, r2, #1
 80052b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	40010000 	.word	0x40010000
 80052cc:	40000400 	.word	0x40000400
 80052d0:	40000800 	.word	0x40000800
 80052d4:	40000c00 	.word	0x40000c00
 80052d8:	40010400 	.word	0x40010400
 80052dc:	40014000 	.word	0x40014000
 80052e0:	40001800 	.word	0x40001800

080052e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d122      	bne.n	8005340 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b02      	cmp	r3, #2
 8005306:	d11b      	bne.n	8005340 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f06f 0202 	mvn.w	r2, #2
 8005310:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f9bf 	bl	80056aa <HAL_TIM_IC_CaptureCallback>
 800532c:	e005      	b.n	800533a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f9b1 	bl	8005696 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f9c2 	bl	80056be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	f003 0304 	and.w	r3, r3, #4
 800534a:	2b04      	cmp	r3, #4
 800534c:	d122      	bne.n	8005394 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b04      	cmp	r3, #4
 800535a:	d11b      	bne.n	8005394 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f06f 0204 	mvn.w	r2, #4
 8005364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2202      	movs	r2, #2
 800536a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f995 	bl	80056aa <HAL_TIM_IC_CaptureCallback>
 8005380:	e005      	b.n	800538e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f987 	bl	8005696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f998 	bl	80056be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b08      	cmp	r3, #8
 80053a0:	d122      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f003 0308 	and.w	r3, r3, #8
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d11b      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f06f 0208 	mvn.w	r2, #8
 80053b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2204      	movs	r2, #4
 80053be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f96b 	bl	80056aa <HAL_TIM_IC_CaptureCallback>
 80053d4:	e005      	b.n	80053e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f95d 	bl	8005696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f96e 	bl	80056be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	f003 0310 	and.w	r3, r3, #16
 80053f2:	2b10      	cmp	r3, #16
 80053f4:	d122      	bne.n	800543c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f003 0310 	and.w	r3, r3, #16
 8005400:	2b10      	cmp	r3, #16
 8005402:	d11b      	bne.n	800543c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f06f 0210 	mvn.w	r2, #16
 800540c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2208      	movs	r2, #8
 8005412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f941 	bl	80056aa <HAL_TIM_IC_CaptureCallback>
 8005428:	e005      	b.n	8005436 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f933 	bl	8005696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f944 	bl	80056be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b01      	cmp	r3, #1
 8005448:	d10e      	bne.n	8005468 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b01      	cmp	r3, #1
 8005456:	d107      	bne.n	8005468 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f06f 0201 	mvn.w	r2, #1
 8005460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f90d 	bl	8005682 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005472:	2b80      	cmp	r3, #128	; 0x80
 8005474:	d10e      	bne.n	8005494 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005480:	2b80      	cmp	r3, #128	; 0x80
 8005482:	d107      	bne.n	8005494 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800548c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 faea 	bl	8005a68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549e:	2b40      	cmp	r3, #64	; 0x40
 80054a0:	d10e      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ac:	2b40      	cmp	r3, #64	; 0x40
 80054ae:	d107      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f909 	bl	80056d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f003 0320 	and.w	r3, r3, #32
 80054ca:	2b20      	cmp	r3, #32
 80054cc:	d10e      	bne.n	80054ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f003 0320 	and.w	r3, r3, #32
 80054d8:	2b20      	cmp	r3, #32
 80054da:	d107      	bne.n	80054ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f06f 0220 	mvn.w	r2, #32
 80054e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fab4 	bl	8005a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054ec:	bf00      	nop
 80054ee:	3708      	adds	r7, #8
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005508:	2b01      	cmp	r3, #1
 800550a:	d101      	bne.n	8005510 <HAL_TIM_ConfigClockSource+0x1c>
 800550c:	2302      	movs	r3, #2
 800550e:	e0b4      	b.n	800567a <HAL_TIM_ConfigClockSource+0x186>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800552e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005536:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005548:	d03e      	beq.n	80055c8 <HAL_TIM_ConfigClockSource+0xd4>
 800554a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800554e:	f200 8087 	bhi.w	8005660 <HAL_TIM_ConfigClockSource+0x16c>
 8005552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005556:	f000 8086 	beq.w	8005666 <HAL_TIM_ConfigClockSource+0x172>
 800555a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800555e:	d87f      	bhi.n	8005660 <HAL_TIM_ConfigClockSource+0x16c>
 8005560:	2b70      	cmp	r3, #112	; 0x70
 8005562:	d01a      	beq.n	800559a <HAL_TIM_ConfigClockSource+0xa6>
 8005564:	2b70      	cmp	r3, #112	; 0x70
 8005566:	d87b      	bhi.n	8005660 <HAL_TIM_ConfigClockSource+0x16c>
 8005568:	2b60      	cmp	r3, #96	; 0x60
 800556a:	d050      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x11a>
 800556c:	2b60      	cmp	r3, #96	; 0x60
 800556e:	d877      	bhi.n	8005660 <HAL_TIM_ConfigClockSource+0x16c>
 8005570:	2b50      	cmp	r3, #80	; 0x50
 8005572:	d03c      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0xfa>
 8005574:	2b50      	cmp	r3, #80	; 0x50
 8005576:	d873      	bhi.n	8005660 <HAL_TIM_ConfigClockSource+0x16c>
 8005578:	2b40      	cmp	r3, #64	; 0x40
 800557a:	d058      	beq.n	800562e <HAL_TIM_ConfigClockSource+0x13a>
 800557c:	2b40      	cmp	r3, #64	; 0x40
 800557e:	d86f      	bhi.n	8005660 <HAL_TIM_ConfigClockSource+0x16c>
 8005580:	2b30      	cmp	r3, #48	; 0x30
 8005582:	d064      	beq.n	800564e <HAL_TIM_ConfigClockSource+0x15a>
 8005584:	2b30      	cmp	r3, #48	; 0x30
 8005586:	d86b      	bhi.n	8005660 <HAL_TIM_ConfigClockSource+0x16c>
 8005588:	2b20      	cmp	r3, #32
 800558a:	d060      	beq.n	800564e <HAL_TIM_ConfigClockSource+0x15a>
 800558c:	2b20      	cmp	r3, #32
 800558e:	d867      	bhi.n	8005660 <HAL_TIM_ConfigClockSource+0x16c>
 8005590:	2b00      	cmp	r3, #0
 8005592:	d05c      	beq.n	800564e <HAL_TIM_ConfigClockSource+0x15a>
 8005594:	2b10      	cmp	r3, #16
 8005596:	d05a      	beq.n	800564e <HAL_TIM_ConfigClockSource+0x15a>
 8005598:	e062      	b.n	8005660 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6818      	ldr	r0, [r3, #0]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	6899      	ldr	r1, [r3, #8]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f000 f9b7 	bl	800591c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	609a      	str	r2, [r3, #8]
      break;
 80055c6:	e04f      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6818      	ldr	r0, [r3, #0]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	6899      	ldr	r1, [r3, #8]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f000 f9a0 	bl	800591c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689a      	ldr	r2, [r3, #8]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055ea:	609a      	str	r2, [r3, #8]
      break;
 80055ec:	e03c      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6818      	ldr	r0, [r3, #0]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	6859      	ldr	r1, [r3, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	461a      	mov	r2, r3
 80055fc:	f000 f914 	bl	8005828 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2150      	movs	r1, #80	; 0x50
 8005606:	4618      	mov	r0, r3
 8005608:	f000 f96d 	bl	80058e6 <TIM_ITRx_SetConfig>
      break;
 800560c:	e02c      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6818      	ldr	r0, [r3, #0]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	6859      	ldr	r1, [r3, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	461a      	mov	r2, r3
 800561c:	f000 f933 	bl	8005886 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2160      	movs	r1, #96	; 0x60
 8005626:	4618      	mov	r0, r3
 8005628:	f000 f95d 	bl	80058e6 <TIM_ITRx_SetConfig>
      break;
 800562c:	e01c      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6818      	ldr	r0, [r3, #0]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	6859      	ldr	r1, [r3, #4]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	461a      	mov	r2, r3
 800563c:	f000 f8f4 	bl	8005828 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2140      	movs	r1, #64	; 0x40
 8005646:	4618      	mov	r0, r3
 8005648:	f000 f94d 	bl	80058e6 <TIM_ITRx_SetConfig>
      break;
 800564c:	e00c      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4619      	mov	r1, r3
 8005658:	4610      	mov	r0, r2
 800565a:	f000 f944 	bl	80058e6 <TIM_ITRx_SetConfig>
      break;
 800565e:	e003      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	73fb      	strb	r3, [r7, #15]
      break;
 8005664:	e000      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005666:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005678:	7bfb      	ldrb	r3, [r7, #15]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800568a:	bf00      	nop
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800569e:	bf00      	nop
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr

080056d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b083      	sub	sp, #12
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056da:	bf00      	nop
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
	...

080056e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a40      	ldr	r2, [pc, #256]	; (80057fc <TIM_Base_SetConfig+0x114>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d013      	beq.n	8005728 <TIM_Base_SetConfig+0x40>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005706:	d00f      	beq.n	8005728 <TIM_Base_SetConfig+0x40>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a3d      	ldr	r2, [pc, #244]	; (8005800 <TIM_Base_SetConfig+0x118>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d00b      	beq.n	8005728 <TIM_Base_SetConfig+0x40>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a3c      	ldr	r2, [pc, #240]	; (8005804 <TIM_Base_SetConfig+0x11c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d007      	beq.n	8005728 <TIM_Base_SetConfig+0x40>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a3b      	ldr	r2, [pc, #236]	; (8005808 <TIM_Base_SetConfig+0x120>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d003      	beq.n	8005728 <TIM_Base_SetConfig+0x40>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a3a      	ldr	r2, [pc, #232]	; (800580c <TIM_Base_SetConfig+0x124>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d108      	bne.n	800573a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	4313      	orrs	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a2f      	ldr	r2, [pc, #188]	; (80057fc <TIM_Base_SetConfig+0x114>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d02b      	beq.n	800579a <TIM_Base_SetConfig+0xb2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005748:	d027      	beq.n	800579a <TIM_Base_SetConfig+0xb2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a2c      	ldr	r2, [pc, #176]	; (8005800 <TIM_Base_SetConfig+0x118>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d023      	beq.n	800579a <TIM_Base_SetConfig+0xb2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a2b      	ldr	r2, [pc, #172]	; (8005804 <TIM_Base_SetConfig+0x11c>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d01f      	beq.n	800579a <TIM_Base_SetConfig+0xb2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a2a      	ldr	r2, [pc, #168]	; (8005808 <TIM_Base_SetConfig+0x120>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d01b      	beq.n	800579a <TIM_Base_SetConfig+0xb2>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a29      	ldr	r2, [pc, #164]	; (800580c <TIM_Base_SetConfig+0x124>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d017      	beq.n	800579a <TIM_Base_SetConfig+0xb2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a28      	ldr	r2, [pc, #160]	; (8005810 <TIM_Base_SetConfig+0x128>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d013      	beq.n	800579a <TIM_Base_SetConfig+0xb2>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a27      	ldr	r2, [pc, #156]	; (8005814 <TIM_Base_SetConfig+0x12c>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00f      	beq.n	800579a <TIM_Base_SetConfig+0xb2>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a26      	ldr	r2, [pc, #152]	; (8005818 <TIM_Base_SetConfig+0x130>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d00b      	beq.n	800579a <TIM_Base_SetConfig+0xb2>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a25      	ldr	r2, [pc, #148]	; (800581c <TIM_Base_SetConfig+0x134>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d007      	beq.n	800579a <TIM_Base_SetConfig+0xb2>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a24      	ldr	r2, [pc, #144]	; (8005820 <TIM_Base_SetConfig+0x138>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d003      	beq.n	800579a <TIM_Base_SetConfig+0xb2>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a23      	ldr	r2, [pc, #140]	; (8005824 <TIM_Base_SetConfig+0x13c>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d108      	bne.n	80057ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a0a      	ldr	r2, [pc, #40]	; (80057fc <TIM_Base_SetConfig+0x114>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d003      	beq.n	80057e0 <TIM_Base_SetConfig+0xf8>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a0c      	ldr	r2, [pc, #48]	; (800580c <TIM_Base_SetConfig+0x124>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d103      	bne.n	80057e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	691a      	ldr	r2, [r3, #16]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	615a      	str	r2, [r3, #20]
}
 80057ee:	bf00      	nop
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	40010000 	.word	0x40010000
 8005800:	40000400 	.word	0x40000400
 8005804:	40000800 	.word	0x40000800
 8005808:	40000c00 	.word	0x40000c00
 800580c:	40010400 	.word	0x40010400
 8005810:	40014000 	.word	0x40014000
 8005814:	40014400 	.word	0x40014400
 8005818:	40014800 	.word	0x40014800
 800581c:	40001800 	.word	0x40001800
 8005820:	40001c00 	.word	0x40001c00
 8005824:	40002000 	.word	0x40002000

08005828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	f023 0201 	bic.w	r2, r3, #1
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	011b      	lsls	r3, r3, #4
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	4313      	orrs	r3, r2
 800585c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f023 030a 	bic.w	r3, r3, #10
 8005864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	4313      	orrs	r3, r2
 800586c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	621a      	str	r2, [r3, #32]
}
 800587a:	bf00      	nop
 800587c:	371c      	adds	r7, #28
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005886:	b480      	push	{r7}
 8005888:	b087      	sub	sp, #28
 800588a:	af00      	add	r7, sp, #0
 800588c:	60f8      	str	r0, [r7, #12]
 800588e:	60b9      	str	r1, [r7, #8]
 8005890:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	f023 0210 	bic.w	r2, r3, #16
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	031b      	lsls	r3, r3, #12
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	621a      	str	r2, [r3, #32]
}
 80058da:	bf00      	nop
 80058dc:	371c      	adds	r7, #28
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b085      	sub	sp, #20
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4313      	orrs	r3, r2
 8005904:	f043 0307 	orr.w	r3, r3, #7
 8005908:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	609a      	str	r2, [r3, #8]
}
 8005910:	bf00      	nop
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800591c:	b480      	push	{r7}
 800591e:	b087      	sub	sp, #28
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
 8005928:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005936:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	021a      	lsls	r2, r3, #8
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	431a      	orrs	r2, r3
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	4313      	orrs	r3, r2
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	4313      	orrs	r3, r2
 8005948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	609a      	str	r2, [r3, #8]
}
 8005950:	bf00      	nop
 8005952:	371c      	adds	r7, #28
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800596c:	2b01      	cmp	r3, #1
 800596e:	d101      	bne.n	8005974 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005970:	2302      	movs	r3, #2
 8005972:	e05a      	b.n	8005a2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2202      	movs	r2, #2
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a21      	ldr	r2, [pc, #132]	; (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d022      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c0:	d01d      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a1d      	ldr	r2, [pc, #116]	; (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d018      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a1b      	ldr	r2, [pc, #108]	; (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d013      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a1a      	ldr	r2, [pc, #104]	; (8005a44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d00e      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a18      	ldr	r2, [pc, #96]	; (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d009      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a17      	ldr	r2, [pc, #92]	; (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d004      	beq.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a15      	ldr	r2, [pc, #84]	; (8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d10c      	bne.n	8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40010000 	.word	0x40010000
 8005a3c:	40000400 	.word	0x40000400
 8005a40:	40000800 	.word	0x40000800
 8005a44:	40000c00 	.word	0x40000c00
 8005a48:	40010400 	.word	0x40010400
 8005a4c:	40014000 	.word	0x40014000
 8005a50:	40001800 	.word	0x40001800

08005a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e03f      	b.n	8005b0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d106      	bne.n	8005aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7fc f872 	bl	8001b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2224      	movs	r2, #36	; 0x24
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 fd71 	bl	80065a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	691a      	ldr	r2, [r3, #16]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	695a      	ldr	r2, [r3, #20]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68da      	ldr	r2, [r3, #12]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2220      	movs	r2, #32
 8005b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b08a      	sub	sp, #40	; 0x28
 8005b1a:	af02      	add	r7, sp, #8
 8005b1c:	60f8      	str	r0, [r7, #12]
 8005b1e:	60b9      	str	r1, [r7, #8]
 8005b20:	603b      	str	r3, [r7, #0]
 8005b22:	4613      	mov	r3, r2
 8005b24:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b20      	cmp	r3, #32
 8005b34:	d17c      	bne.n	8005c30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <HAL_UART_Transmit+0x2c>
 8005b3c:	88fb      	ldrh	r3, [r7, #6]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e075      	b.n	8005c32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d101      	bne.n	8005b54 <HAL_UART_Transmit+0x3e>
 8005b50:	2302      	movs	r3, #2
 8005b52:	e06e      	b.n	8005c32 <HAL_UART_Transmit+0x11c>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2221      	movs	r2, #33	; 0x21
 8005b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b6a:	f7fc f989 	bl	8001e80 <HAL_GetTick>
 8005b6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	88fa      	ldrh	r2, [r7, #6]
 8005b74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	88fa      	ldrh	r2, [r7, #6]
 8005b7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b84:	d108      	bne.n	8005b98 <HAL_UART_Transmit+0x82>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d104      	bne.n	8005b98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	61bb      	str	r3, [r7, #24]
 8005b96:	e003      	b.n	8005ba0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005ba8:	e02a      	b.n	8005c00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	2180      	movs	r1, #128	; 0x80
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 faef 	bl	8006198 <UART_WaitOnFlagUntilTimeout>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e036      	b.n	8005c32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10b      	bne.n	8005be2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	3302      	adds	r3, #2
 8005bde:	61bb      	str	r3, [r7, #24]
 8005be0:	e007      	b.n	8005bf2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	781a      	ldrb	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1cf      	bne.n	8005baa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2200      	movs	r2, #0
 8005c12:	2140      	movs	r1, #64	; 0x40
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 fabf 	bl	8006198 <UART_WaitOnFlagUntilTimeout>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e006      	b.n	8005c32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2220      	movs	r2, #32
 8005c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	e000      	b.n	8005c32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005c30:	2302      	movs	r3, #2
  }
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3720      	adds	r7, #32
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
	...

08005c3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b0ba      	sub	sp, #232	; 0xe8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c72:	f003 030f 	and.w	r3, r3, #15
 8005c76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005c7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10f      	bne.n	8005ca2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c86:	f003 0320 	and.w	r3, r3, #32
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d009      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x66>
 8005c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c92:	f003 0320 	and.w	r3, r3, #32
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fbc9 	bl	8006432 <UART_Receive_IT>
      return;
 8005ca0:	e256      	b.n	8006150 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005ca2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 80de 	beq.w	8005e68 <HAL_UART_IRQHandler+0x22c>
 8005cac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d106      	bne.n	8005cc6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cbc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 80d1 	beq.w	8005e68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00b      	beq.n	8005cea <HAL_UART_IRQHandler+0xae>
 8005cd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d005      	beq.n	8005cea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce2:	f043 0201 	orr.w	r2, r3, #1
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cee:	f003 0304 	and.w	r3, r3, #4
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00b      	beq.n	8005d0e <HAL_UART_IRQHandler+0xd2>
 8005cf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d005      	beq.n	8005d0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	f043 0202 	orr.w	r2, r3, #2
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00b      	beq.n	8005d32 <HAL_UART_IRQHandler+0xf6>
 8005d1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d005      	beq.n	8005d32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	f043 0204 	orr.w	r2, r3, #4
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d36:	f003 0308 	and.w	r3, r3, #8
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d011      	beq.n	8005d62 <HAL_UART_IRQHandler+0x126>
 8005d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d42:	f003 0320 	and.w	r3, r3, #32
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d105      	bne.n	8005d56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d005      	beq.n	8005d62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5a:	f043 0208 	orr.w	r2, r3, #8
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f000 81ed 	beq.w	8006146 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d70:	f003 0320 	and.w	r3, r3, #32
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d008      	beq.n	8005d8a <HAL_UART_IRQHandler+0x14e>
 8005d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d7c:	f003 0320 	and.w	r3, r3, #32
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fb54 	bl	8006432 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d94:	2b40      	cmp	r3, #64	; 0x40
 8005d96:	bf0c      	ite	eq
 8005d98:	2301      	moveq	r3, #1
 8005d9a:	2300      	movne	r3, #0
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	f003 0308 	and.w	r3, r3, #8
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d103      	bne.n	8005db6 <HAL_UART_IRQHandler+0x17a>
 8005dae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d04f      	beq.n	8005e56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fa5c 	bl	8006274 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc6:	2b40      	cmp	r3, #64	; 0x40
 8005dc8:	d141      	bne.n	8005e4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	3314      	adds	r3, #20
 8005dd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005dd8:	e853 3f00 	ldrex	r3, [r3]
 8005ddc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005de0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005de4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005de8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	3314      	adds	r3, #20
 8005df2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005df6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005dfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e06:	e841 2300 	strex	r3, r2, [r1]
 8005e0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1d9      	bne.n	8005dca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d013      	beq.n	8005e46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e22:	4a7d      	ldr	r2, [pc, #500]	; (8006018 <HAL_UART_IRQHandler+0x3dc>)
 8005e24:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fd fc3b 	bl	80036a6 <HAL_DMA_Abort_IT>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d016      	beq.n	8005e64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e40:	4610      	mov	r0, r2
 8005e42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e44:	e00e      	b.n	8005e64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f990 	bl	800616c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e4c:	e00a      	b.n	8005e64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f98c 	bl	800616c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e54:	e006      	b.n	8005e64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f988 	bl	800616c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005e62:	e170      	b.n	8006146 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e64:	bf00      	nop
    return;
 8005e66:	e16e      	b.n	8006146 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	f040 814a 	bne.w	8006106 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e76:	f003 0310 	and.w	r3, r3, #16
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 8143 	beq.w	8006106 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e84:	f003 0310 	and.w	r3, r3, #16
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 813c 	beq.w	8006106 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60bb      	str	r3, [r7, #8]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	60bb      	str	r3, [r7, #8]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	60bb      	str	r3, [r7, #8]
 8005ea2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eae:	2b40      	cmp	r3, #64	; 0x40
 8005eb0:	f040 80b4 	bne.w	800601c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ec0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 8140 	beq.w	800614a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ece:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	f080 8139 	bcs.w	800614a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ede:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eea:	f000 8088 	beq.w	8005ffe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	330c      	adds	r3, #12
 8005ef4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005efc:	e853 3f00 	ldrex	r3, [r3]
 8005f00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	330c      	adds	r3, #12
 8005f16:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005f1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f2a:	e841 2300 	strex	r3, r2, [r1]
 8005f2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1d9      	bne.n	8005eee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	3314      	adds	r3, #20
 8005f40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f44:	e853 3f00 	ldrex	r3, [r3]
 8005f48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f4c:	f023 0301 	bic.w	r3, r3, #1
 8005f50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3314      	adds	r3, #20
 8005f5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f6a:	e841 2300 	strex	r3, r2, [r1]
 8005f6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1e1      	bne.n	8005f3a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	3314      	adds	r3, #20
 8005f7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	3314      	adds	r3, #20
 8005f96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005fa0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005fa2:	e841 2300 	strex	r3, r2, [r1]
 8005fa6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005fa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1e3      	bne.n	8005f76 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	330c      	adds	r3, #12
 8005fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fc6:	e853 3f00 	ldrex	r3, [r3]
 8005fca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fce:	f023 0310 	bic.w	r3, r3, #16
 8005fd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	330c      	adds	r3, #12
 8005fdc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005fe0:	65ba      	str	r2, [r7, #88]	; 0x58
 8005fe2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005fe6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fe8:	e841 2300 	strex	r3, r2, [r1]
 8005fec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1e3      	bne.n	8005fbc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fd fae4 	bl	80035c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006006:	b29b      	uxth	r3, r3
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	b29b      	uxth	r3, r3
 800600c:	4619      	mov	r1, r3
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f8b6 	bl	8006180 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006014:	e099      	b.n	800614a <HAL_UART_IRQHandler+0x50e>
 8006016:	bf00      	nop
 8006018:	0800633b 	.word	0x0800633b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006024:	b29b      	uxth	r3, r3
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006030:	b29b      	uxth	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	f000 808b 	beq.w	800614e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006038:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 8086 	beq.w	800614e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	330c      	adds	r3, #12
 8006048:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604c:	e853 3f00 	ldrex	r3, [r3]
 8006050:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006054:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006058:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	330c      	adds	r3, #12
 8006062:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006066:	647a      	str	r2, [r7, #68]	; 0x44
 8006068:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800606c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800606e:	e841 2300 	strex	r3, r2, [r1]
 8006072:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1e3      	bne.n	8006042 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3314      	adds	r3, #20
 8006080:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	e853 3f00 	ldrex	r3, [r3]
 8006088:	623b      	str	r3, [r7, #32]
   return(result);
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	f023 0301 	bic.w	r3, r3, #1
 8006090:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	3314      	adds	r3, #20
 800609a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800609e:	633a      	str	r2, [r7, #48]	; 0x30
 80060a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060a6:	e841 2300 	strex	r3, r2, [r1]
 80060aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1e3      	bne.n	800607a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2220      	movs	r2, #32
 80060b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	330c      	adds	r3, #12
 80060c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	e853 3f00 	ldrex	r3, [r3]
 80060ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f023 0310 	bic.w	r3, r3, #16
 80060d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	330c      	adds	r3, #12
 80060e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80060e4:	61fa      	str	r2, [r7, #28]
 80060e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e8:	69b9      	ldr	r1, [r7, #24]
 80060ea:	69fa      	ldr	r2, [r7, #28]
 80060ec:	e841 2300 	strex	r3, r2, [r1]
 80060f0:	617b      	str	r3, [r7, #20]
   return(result);
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1e3      	bne.n	80060c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060fc:	4619      	mov	r1, r3
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f83e 	bl	8006180 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006104:	e023      	b.n	800614e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800610a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800610e:	2b00      	cmp	r3, #0
 8006110:	d009      	beq.n	8006126 <HAL_UART_IRQHandler+0x4ea>
 8006112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f91f 	bl	8006362 <UART_Transmit_IT>
    return;
 8006124:	e014      	b.n	8006150 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800612a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00e      	beq.n	8006150 <HAL_UART_IRQHandler+0x514>
 8006132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613a:	2b00      	cmp	r3, #0
 800613c:	d008      	beq.n	8006150 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f95f 	bl	8006402 <UART_EndTransmit_IT>
    return;
 8006144:	e004      	b.n	8006150 <HAL_UART_IRQHandler+0x514>
    return;
 8006146:	bf00      	nop
 8006148:	e002      	b.n	8006150 <HAL_UART_IRQHandler+0x514>
      return;
 800614a:	bf00      	nop
 800614c:	e000      	b.n	8006150 <HAL_UART_IRQHandler+0x514>
      return;
 800614e:	bf00      	nop
  }
}
 8006150:	37e8      	adds	r7, #232	; 0xe8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop

08006158 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	460b      	mov	r3, r1
 800618a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b090      	sub	sp, #64	; 0x40
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	603b      	str	r3, [r7, #0]
 80061a4:	4613      	mov	r3, r2
 80061a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061a8:	e050      	b.n	800624c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b0:	d04c      	beq.n	800624c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80061b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d007      	beq.n	80061c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80061b8:	f7fb fe62 	bl	8001e80 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d241      	bcs.n	800624c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	330c      	adds	r3, #12
 80061ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d2:	e853 3f00 	ldrex	r3, [r3]
 80061d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	330c      	adds	r3, #12
 80061e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061e8:	637a      	str	r2, [r7, #52]	; 0x34
 80061ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061f0:	e841 2300 	strex	r3, r2, [r1]
 80061f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1e5      	bne.n	80061c8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	3314      	adds	r3, #20
 8006202:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	e853 3f00 	ldrex	r3, [r3]
 800620a:	613b      	str	r3, [r7, #16]
   return(result);
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	f023 0301 	bic.w	r3, r3, #1
 8006212:	63bb      	str	r3, [r7, #56]	; 0x38
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3314      	adds	r3, #20
 800621a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800621c:	623a      	str	r2, [r7, #32]
 800621e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006220:	69f9      	ldr	r1, [r7, #28]
 8006222:	6a3a      	ldr	r2, [r7, #32]
 8006224:	e841 2300 	strex	r3, r2, [r1]
 8006228:	61bb      	str	r3, [r7, #24]
   return(result);
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1e5      	bne.n	80061fc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2220      	movs	r2, #32
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2220      	movs	r2, #32
 800623c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e00f      	b.n	800626c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	4013      	ands	r3, r2
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	429a      	cmp	r2, r3
 800625a:	bf0c      	ite	eq
 800625c:	2301      	moveq	r3, #1
 800625e:	2300      	movne	r3, #0
 8006260:	b2db      	uxtb	r3, r3
 8006262:	461a      	mov	r2, r3
 8006264:	79fb      	ldrb	r3, [r7, #7]
 8006266:	429a      	cmp	r2, r3
 8006268:	d09f      	beq.n	80061aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3740      	adds	r7, #64	; 0x40
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006274:	b480      	push	{r7}
 8006276:	b095      	sub	sp, #84	; 0x54
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	330c      	adds	r3, #12
 8006282:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006286:	e853 3f00 	ldrex	r3, [r3]
 800628a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	330c      	adds	r3, #12
 800629a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800629c:	643a      	str	r2, [r7, #64]	; 0x40
 800629e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062a4:	e841 2300 	strex	r3, r2, [r1]
 80062a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1e5      	bne.n	800627c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	3314      	adds	r3, #20
 80062b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	e853 3f00 	ldrex	r3, [r3]
 80062be:	61fb      	str	r3, [r7, #28]
   return(result);
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	f023 0301 	bic.w	r3, r3, #1
 80062c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3314      	adds	r3, #20
 80062ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062d8:	e841 2300 	strex	r3, r2, [r1]
 80062dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1e5      	bne.n	80062b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d119      	bne.n	8006320 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	330c      	adds	r3, #12
 80062f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	e853 3f00 	ldrex	r3, [r3]
 80062fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f023 0310 	bic.w	r3, r3, #16
 8006302:	647b      	str	r3, [r7, #68]	; 0x44
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	330c      	adds	r3, #12
 800630a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800630c:	61ba      	str	r2, [r7, #24]
 800630e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006310:	6979      	ldr	r1, [r7, #20]
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	e841 2300 	strex	r3, r2, [r1]
 8006318:	613b      	str	r3, [r7, #16]
   return(result);
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1e5      	bne.n	80062ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2220      	movs	r2, #32
 8006324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800632e:	bf00      	nop
 8006330:	3754      	adds	r7, #84	; 0x54
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b084      	sub	sp, #16
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006346:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f7ff ff09 	bl	800616c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800635a:	bf00      	nop
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006362:	b480      	push	{r7}
 8006364:	b085      	sub	sp, #20
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b21      	cmp	r3, #33	; 0x21
 8006374:	d13e      	bne.n	80063f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800637e:	d114      	bne.n	80063aa <UART_Transmit_IT+0x48>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d110      	bne.n	80063aa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	881b      	ldrh	r3, [r3, #0]
 8006392:	461a      	mov	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800639c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	1c9a      	adds	r2, r3, #2
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	621a      	str	r2, [r3, #32]
 80063a8:	e008      	b.n	80063bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	1c59      	adds	r1, r3, #1
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	6211      	str	r1, [r2, #32]
 80063b4:	781a      	ldrb	r2, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	3b01      	subs	r3, #1
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	4619      	mov	r1, r3
 80063ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10f      	bne.n	80063f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68da      	ldr	r2, [r3, #12]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68da      	ldr	r2, [r3, #12]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063f0:	2300      	movs	r3, #0
 80063f2:	e000      	b.n	80063f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063f4:	2302      	movs	r3, #2
  }
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b082      	sub	sp, #8
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68da      	ldr	r2, [r3, #12]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006418:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2220      	movs	r2, #32
 800641e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7ff fe98 	bl	8006158 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3708      	adds	r7, #8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b08c      	sub	sp, #48	; 0x30
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b22      	cmp	r3, #34	; 0x22
 8006444:	f040 80ab 	bne.w	800659e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006450:	d117      	bne.n	8006482 <UART_Receive_IT+0x50>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d113      	bne.n	8006482 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800645a:	2300      	movs	r3, #0
 800645c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006462:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	b29b      	uxth	r3, r3
 800646c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006470:	b29a      	uxth	r2, r3
 8006472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006474:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647a:	1c9a      	adds	r2, r3, #2
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	629a      	str	r2, [r3, #40]	; 0x28
 8006480:	e026      	b.n	80064d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006486:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006488:	2300      	movs	r3, #0
 800648a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006494:	d007      	beq.n	80064a6 <UART_Receive_IT+0x74>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10a      	bne.n	80064b4 <UART_Receive_IT+0x82>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d106      	bne.n	80064b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	b2da      	uxtb	r2, r3
 80064ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b0:	701a      	strb	r2, [r3, #0]
 80064b2:	e008      	b.n	80064c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064c0:	b2da      	uxtb	r2, r3
 80064c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ca:	1c5a      	adds	r2, r3, #1
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	3b01      	subs	r3, #1
 80064d8:	b29b      	uxth	r3, r3
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	4619      	mov	r1, r3
 80064de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d15a      	bne.n	800659a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68da      	ldr	r2, [r3, #12]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f022 0220 	bic.w	r2, r2, #32
 80064f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68da      	ldr	r2, [r3, #12]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006502:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	695a      	ldr	r2, [r3, #20]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 0201 	bic.w	r2, r2, #1
 8006512:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2220      	movs	r2, #32
 8006518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006520:	2b01      	cmp	r3, #1
 8006522:	d135      	bne.n	8006590 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	330c      	adds	r3, #12
 8006530:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	e853 3f00 	ldrex	r3, [r3]
 8006538:	613b      	str	r3, [r7, #16]
   return(result);
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f023 0310 	bic.w	r3, r3, #16
 8006540:	627b      	str	r3, [r7, #36]	; 0x24
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	330c      	adds	r3, #12
 8006548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800654a:	623a      	str	r2, [r7, #32]
 800654c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654e:	69f9      	ldr	r1, [r7, #28]
 8006550:	6a3a      	ldr	r2, [r7, #32]
 8006552:	e841 2300 	strex	r3, r2, [r1]
 8006556:	61bb      	str	r3, [r7, #24]
   return(result);
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1e5      	bne.n	800652a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0310 	and.w	r3, r3, #16
 8006568:	2b10      	cmp	r3, #16
 800656a:	d10a      	bne.n	8006582 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800656c:	2300      	movs	r3, #0
 800656e:	60fb      	str	r3, [r7, #12]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	60fb      	str	r3, [r7, #12]
 8006580:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006586:	4619      	mov	r1, r3
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f7ff fdf9 	bl	8006180 <HAL_UARTEx_RxEventCallback>
 800658e:	e002      	b.n	8006596 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7fa fed1 	bl	8001338 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006596:	2300      	movs	r3, #0
 8006598:	e002      	b.n	80065a0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800659a:	2300      	movs	r3, #0
 800659c:	e000      	b.n	80065a0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800659e:	2302      	movs	r3, #2
  }
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3730      	adds	r7, #48	; 0x30
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065ac:	b0c0      	sub	sp, #256	; 0x100
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80065c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c4:	68d9      	ldr	r1, [r3, #12]
 80065c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	ea40 0301 	orr.w	r3, r0, r1
 80065d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d6:	689a      	ldr	r2, [r3, #8]
 80065d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	431a      	orrs	r2, r3
 80065e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	431a      	orrs	r2, r3
 80065e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006600:	f021 010c 	bic.w	r1, r1, #12
 8006604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800660e:	430b      	orrs	r3, r1
 8006610:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800661e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006622:	6999      	ldr	r1, [r3, #24]
 8006624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	ea40 0301 	orr.w	r3, r0, r1
 800662e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	4b8f      	ldr	r3, [pc, #572]	; (8006874 <UART_SetConfig+0x2cc>)
 8006638:	429a      	cmp	r2, r3
 800663a:	d005      	beq.n	8006648 <UART_SetConfig+0xa0>
 800663c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	4b8d      	ldr	r3, [pc, #564]	; (8006878 <UART_SetConfig+0x2d0>)
 8006644:	429a      	cmp	r2, r3
 8006646:	d104      	bne.n	8006652 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006648:	f7fd fea4 	bl	8004394 <HAL_RCC_GetPCLK2Freq>
 800664c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006650:	e003      	b.n	800665a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006652:	f7fd fe8b 	bl	800436c <HAL_RCC_GetPCLK1Freq>
 8006656:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800665a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800665e:	69db      	ldr	r3, [r3, #28]
 8006660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006664:	f040 810c 	bne.w	8006880 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006668:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800666c:	2200      	movs	r2, #0
 800666e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006672:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006676:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800667a:	4622      	mov	r2, r4
 800667c:	462b      	mov	r3, r5
 800667e:	1891      	adds	r1, r2, r2
 8006680:	65b9      	str	r1, [r7, #88]	; 0x58
 8006682:	415b      	adcs	r3, r3
 8006684:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006686:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800668a:	4621      	mov	r1, r4
 800668c:	eb12 0801 	adds.w	r8, r2, r1
 8006690:	4629      	mov	r1, r5
 8006692:	eb43 0901 	adc.w	r9, r3, r1
 8006696:	f04f 0200 	mov.w	r2, #0
 800669a:	f04f 0300 	mov.w	r3, #0
 800669e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066aa:	4690      	mov	r8, r2
 80066ac:	4699      	mov	r9, r3
 80066ae:	4623      	mov	r3, r4
 80066b0:	eb18 0303 	adds.w	r3, r8, r3
 80066b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066b8:	462b      	mov	r3, r5
 80066ba:	eb49 0303 	adc.w	r3, r9, r3
 80066be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80066c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80066d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80066d6:	460b      	mov	r3, r1
 80066d8:	18db      	adds	r3, r3, r3
 80066da:	653b      	str	r3, [r7, #80]	; 0x50
 80066dc:	4613      	mov	r3, r2
 80066de:	eb42 0303 	adc.w	r3, r2, r3
 80066e2:	657b      	str	r3, [r7, #84]	; 0x54
 80066e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80066e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80066ec:	f7f9 fdc0 	bl	8000270 <__aeabi_uldivmod>
 80066f0:	4602      	mov	r2, r0
 80066f2:	460b      	mov	r3, r1
 80066f4:	4b61      	ldr	r3, [pc, #388]	; (800687c <UART_SetConfig+0x2d4>)
 80066f6:	fba3 2302 	umull	r2, r3, r3, r2
 80066fa:	095b      	lsrs	r3, r3, #5
 80066fc:	011c      	lsls	r4, r3, #4
 80066fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006702:	2200      	movs	r2, #0
 8006704:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006708:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800670c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006710:	4642      	mov	r2, r8
 8006712:	464b      	mov	r3, r9
 8006714:	1891      	adds	r1, r2, r2
 8006716:	64b9      	str	r1, [r7, #72]	; 0x48
 8006718:	415b      	adcs	r3, r3
 800671a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800671c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006720:	4641      	mov	r1, r8
 8006722:	eb12 0a01 	adds.w	sl, r2, r1
 8006726:	4649      	mov	r1, r9
 8006728:	eb43 0b01 	adc.w	fp, r3, r1
 800672c:	f04f 0200 	mov.w	r2, #0
 8006730:	f04f 0300 	mov.w	r3, #0
 8006734:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006738:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800673c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006740:	4692      	mov	sl, r2
 8006742:	469b      	mov	fp, r3
 8006744:	4643      	mov	r3, r8
 8006746:	eb1a 0303 	adds.w	r3, sl, r3
 800674a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800674e:	464b      	mov	r3, r9
 8006750:	eb4b 0303 	adc.w	r3, fp, r3
 8006754:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006764:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006768:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800676c:	460b      	mov	r3, r1
 800676e:	18db      	adds	r3, r3, r3
 8006770:	643b      	str	r3, [r7, #64]	; 0x40
 8006772:	4613      	mov	r3, r2
 8006774:	eb42 0303 	adc.w	r3, r2, r3
 8006778:	647b      	str	r3, [r7, #68]	; 0x44
 800677a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800677e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006782:	f7f9 fd75 	bl	8000270 <__aeabi_uldivmod>
 8006786:	4602      	mov	r2, r0
 8006788:	460b      	mov	r3, r1
 800678a:	4611      	mov	r1, r2
 800678c:	4b3b      	ldr	r3, [pc, #236]	; (800687c <UART_SetConfig+0x2d4>)
 800678e:	fba3 2301 	umull	r2, r3, r3, r1
 8006792:	095b      	lsrs	r3, r3, #5
 8006794:	2264      	movs	r2, #100	; 0x64
 8006796:	fb02 f303 	mul.w	r3, r2, r3
 800679a:	1acb      	subs	r3, r1, r3
 800679c:	00db      	lsls	r3, r3, #3
 800679e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80067a2:	4b36      	ldr	r3, [pc, #216]	; (800687c <UART_SetConfig+0x2d4>)
 80067a4:	fba3 2302 	umull	r2, r3, r3, r2
 80067a8:	095b      	lsrs	r3, r3, #5
 80067aa:	005b      	lsls	r3, r3, #1
 80067ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067b0:	441c      	add	r4, r3
 80067b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067b6:	2200      	movs	r2, #0
 80067b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80067c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80067c4:	4642      	mov	r2, r8
 80067c6:	464b      	mov	r3, r9
 80067c8:	1891      	adds	r1, r2, r2
 80067ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80067cc:	415b      	adcs	r3, r3
 80067ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80067d4:	4641      	mov	r1, r8
 80067d6:	1851      	adds	r1, r2, r1
 80067d8:	6339      	str	r1, [r7, #48]	; 0x30
 80067da:	4649      	mov	r1, r9
 80067dc:	414b      	adcs	r3, r1
 80067de:	637b      	str	r3, [r7, #52]	; 0x34
 80067e0:	f04f 0200 	mov.w	r2, #0
 80067e4:	f04f 0300 	mov.w	r3, #0
 80067e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80067ec:	4659      	mov	r1, fp
 80067ee:	00cb      	lsls	r3, r1, #3
 80067f0:	4651      	mov	r1, sl
 80067f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067f6:	4651      	mov	r1, sl
 80067f8:	00ca      	lsls	r2, r1, #3
 80067fa:	4610      	mov	r0, r2
 80067fc:	4619      	mov	r1, r3
 80067fe:	4603      	mov	r3, r0
 8006800:	4642      	mov	r2, r8
 8006802:	189b      	adds	r3, r3, r2
 8006804:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006808:	464b      	mov	r3, r9
 800680a:	460a      	mov	r2, r1
 800680c:	eb42 0303 	adc.w	r3, r2, r3
 8006810:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006820:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006824:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006828:	460b      	mov	r3, r1
 800682a:	18db      	adds	r3, r3, r3
 800682c:	62bb      	str	r3, [r7, #40]	; 0x28
 800682e:	4613      	mov	r3, r2
 8006830:	eb42 0303 	adc.w	r3, r2, r3
 8006834:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006836:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800683a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800683e:	f7f9 fd17 	bl	8000270 <__aeabi_uldivmod>
 8006842:	4602      	mov	r2, r0
 8006844:	460b      	mov	r3, r1
 8006846:	4b0d      	ldr	r3, [pc, #52]	; (800687c <UART_SetConfig+0x2d4>)
 8006848:	fba3 1302 	umull	r1, r3, r3, r2
 800684c:	095b      	lsrs	r3, r3, #5
 800684e:	2164      	movs	r1, #100	; 0x64
 8006850:	fb01 f303 	mul.w	r3, r1, r3
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	00db      	lsls	r3, r3, #3
 8006858:	3332      	adds	r3, #50	; 0x32
 800685a:	4a08      	ldr	r2, [pc, #32]	; (800687c <UART_SetConfig+0x2d4>)
 800685c:	fba2 2303 	umull	r2, r3, r2, r3
 8006860:	095b      	lsrs	r3, r3, #5
 8006862:	f003 0207 	and.w	r2, r3, #7
 8006866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4422      	add	r2, r4
 800686e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006870:	e105      	b.n	8006a7e <UART_SetConfig+0x4d6>
 8006872:	bf00      	nop
 8006874:	40011000 	.word	0x40011000
 8006878:	40011400 	.word	0x40011400
 800687c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006880:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006884:	2200      	movs	r2, #0
 8006886:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800688a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800688e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006892:	4642      	mov	r2, r8
 8006894:	464b      	mov	r3, r9
 8006896:	1891      	adds	r1, r2, r2
 8006898:	6239      	str	r1, [r7, #32]
 800689a:	415b      	adcs	r3, r3
 800689c:	627b      	str	r3, [r7, #36]	; 0x24
 800689e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80068a2:	4641      	mov	r1, r8
 80068a4:	1854      	adds	r4, r2, r1
 80068a6:	4649      	mov	r1, r9
 80068a8:	eb43 0501 	adc.w	r5, r3, r1
 80068ac:	f04f 0200 	mov.w	r2, #0
 80068b0:	f04f 0300 	mov.w	r3, #0
 80068b4:	00eb      	lsls	r3, r5, #3
 80068b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068ba:	00e2      	lsls	r2, r4, #3
 80068bc:	4614      	mov	r4, r2
 80068be:	461d      	mov	r5, r3
 80068c0:	4643      	mov	r3, r8
 80068c2:	18e3      	adds	r3, r4, r3
 80068c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80068c8:	464b      	mov	r3, r9
 80068ca:	eb45 0303 	adc.w	r3, r5, r3
 80068ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80068d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80068de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80068e2:	f04f 0200 	mov.w	r2, #0
 80068e6:	f04f 0300 	mov.w	r3, #0
 80068ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80068ee:	4629      	mov	r1, r5
 80068f0:	008b      	lsls	r3, r1, #2
 80068f2:	4621      	mov	r1, r4
 80068f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068f8:	4621      	mov	r1, r4
 80068fa:	008a      	lsls	r2, r1, #2
 80068fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006900:	f7f9 fcb6 	bl	8000270 <__aeabi_uldivmod>
 8006904:	4602      	mov	r2, r0
 8006906:	460b      	mov	r3, r1
 8006908:	4b60      	ldr	r3, [pc, #384]	; (8006a8c <UART_SetConfig+0x4e4>)
 800690a:	fba3 2302 	umull	r2, r3, r3, r2
 800690e:	095b      	lsrs	r3, r3, #5
 8006910:	011c      	lsls	r4, r3, #4
 8006912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006916:	2200      	movs	r2, #0
 8006918:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800691c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006920:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006924:	4642      	mov	r2, r8
 8006926:	464b      	mov	r3, r9
 8006928:	1891      	adds	r1, r2, r2
 800692a:	61b9      	str	r1, [r7, #24]
 800692c:	415b      	adcs	r3, r3
 800692e:	61fb      	str	r3, [r7, #28]
 8006930:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006934:	4641      	mov	r1, r8
 8006936:	1851      	adds	r1, r2, r1
 8006938:	6139      	str	r1, [r7, #16]
 800693a:	4649      	mov	r1, r9
 800693c:	414b      	adcs	r3, r1
 800693e:	617b      	str	r3, [r7, #20]
 8006940:	f04f 0200 	mov.w	r2, #0
 8006944:	f04f 0300 	mov.w	r3, #0
 8006948:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800694c:	4659      	mov	r1, fp
 800694e:	00cb      	lsls	r3, r1, #3
 8006950:	4651      	mov	r1, sl
 8006952:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006956:	4651      	mov	r1, sl
 8006958:	00ca      	lsls	r2, r1, #3
 800695a:	4610      	mov	r0, r2
 800695c:	4619      	mov	r1, r3
 800695e:	4603      	mov	r3, r0
 8006960:	4642      	mov	r2, r8
 8006962:	189b      	adds	r3, r3, r2
 8006964:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006968:	464b      	mov	r3, r9
 800696a:	460a      	mov	r2, r1
 800696c:	eb42 0303 	adc.w	r3, r2, r3
 8006970:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	67bb      	str	r3, [r7, #120]	; 0x78
 800697e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006980:	f04f 0200 	mov.w	r2, #0
 8006984:	f04f 0300 	mov.w	r3, #0
 8006988:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800698c:	4649      	mov	r1, r9
 800698e:	008b      	lsls	r3, r1, #2
 8006990:	4641      	mov	r1, r8
 8006992:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006996:	4641      	mov	r1, r8
 8006998:	008a      	lsls	r2, r1, #2
 800699a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800699e:	f7f9 fc67 	bl	8000270 <__aeabi_uldivmod>
 80069a2:	4602      	mov	r2, r0
 80069a4:	460b      	mov	r3, r1
 80069a6:	4b39      	ldr	r3, [pc, #228]	; (8006a8c <UART_SetConfig+0x4e4>)
 80069a8:	fba3 1302 	umull	r1, r3, r3, r2
 80069ac:	095b      	lsrs	r3, r3, #5
 80069ae:	2164      	movs	r1, #100	; 0x64
 80069b0:	fb01 f303 	mul.w	r3, r1, r3
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	011b      	lsls	r3, r3, #4
 80069b8:	3332      	adds	r3, #50	; 0x32
 80069ba:	4a34      	ldr	r2, [pc, #208]	; (8006a8c <UART_SetConfig+0x4e4>)
 80069bc:	fba2 2303 	umull	r2, r3, r2, r3
 80069c0:	095b      	lsrs	r3, r3, #5
 80069c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069c6:	441c      	add	r4, r3
 80069c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069cc:	2200      	movs	r2, #0
 80069ce:	673b      	str	r3, [r7, #112]	; 0x70
 80069d0:	677a      	str	r2, [r7, #116]	; 0x74
 80069d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80069d6:	4642      	mov	r2, r8
 80069d8:	464b      	mov	r3, r9
 80069da:	1891      	adds	r1, r2, r2
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	415b      	adcs	r3, r3
 80069e0:	60fb      	str	r3, [r7, #12]
 80069e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069e6:	4641      	mov	r1, r8
 80069e8:	1851      	adds	r1, r2, r1
 80069ea:	6039      	str	r1, [r7, #0]
 80069ec:	4649      	mov	r1, r9
 80069ee:	414b      	adcs	r3, r1
 80069f0:	607b      	str	r3, [r7, #4]
 80069f2:	f04f 0200 	mov.w	r2, #0
 80069f6:	f04f 0300 	mov.w	r3, #0
 80069fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069fe:	4659      	mov	r1, fp
 8006a00:	00cb      	lsls	r3, r1, #3
 8006a02:	4651      	mov	r1, sl
 8006a04:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a08:	4651      	mov	r1, sl
 8006a0a:	00ca      	lsls	r2, r1, #3
 8006a0c:	4610      	mov	r0, r2
 8006a0e:	4619      	mov	r1, r3
 8006a10:	4603      	mov	r3, r0
 8006a12:	4642      	mov	r2, r8
 8006a14:	189b      	adds	r3, r3, r2
 8006a16:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a18:	464b      	mov	r3, r9
 8006a1a:	460a      	mov	r2, r1
 8006a1c:	eb42 0303 	adc.w	r3, r2, r3
 8006a20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	663b      	str	r3, [r7, #96]	; 0x60
 8006a2c:	667a      	str	r2, [r7, #100]	; 0x64
 8006a2e:	f04f 0200 	mov.w	r2, #0
 8006a32:	f04f 0300 	mov.w	r3, #0
 8006a36:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006a3a:	4649      	mov	r1, r9
 8006a3c:	008b      	lsls	r3, r1, #2
 8006a3e:	4641      	mov	r1, r8
 8006a40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a44:	4641      	mov	r1, r8
 8006a46:	008a      	lsls	r2, r1, #2
 8006a48:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006a4c:	f7f9 fc10 	bl	8000270 <__aeabi_uldivmod>
 8006a50:	4602      	mov	r2, r0
 8006a52:	460b      	mov	r3, r1
 8006a54:	4b0d      	ldr	r3, [pc, #52]	; (8006a8c <UART_SetConfig+0x4e4>)
 8006a56:	fba3 1302 	umull	r1, r3, r3, r2
 8006a5a:	095b      	lsrs	r3, r3, #5
 8006a5c:	2164      	movs	r1, #100	; 0x64
 8006a5e:	fb01 f303 	mul.w	r3, r1, r3
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	011b      	lsls	r3, r3, #4
 8006a66:	3332      	adds	r3, #50	; 0x32
 8006a68:	4a08      	ldr	r2, [pc, #32]	; (8006a8c <UART_SetConfig+0x4e4>)
 8006a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a6e:	095b      	lsrs	r3, r3, #5
 8006a70:	f003 020f 	and.w	r2, r3, #15
 8006a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4422      	add	r2, r4
 8006a7c:	609a      	str	r2, [r3, #8]
}
 8006a7e:	bf00      	nop
 8006a80:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006a84:	46bd      	mov	sp, r7
 8006a86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a8a:	bf00      	nop
 8006a8c:	51eb851f 	.word	0x51eb851f

08006a90 <__errno>:
 8006a90:	4b01      	ldr	r3, [pc, #4]	; (8006a98 <__errno+0x8>)
 8006a92:	6818      	ldr	r0, [r3, #0]
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	2000002c 	.word	0x2000002c

08006a9c <__libc_init_array>:
 8006a9c:	b570      	push	{r4, r5, r6, lr}
 8006a9e:	4d0d      	ldr	r5, [pc, #52]	; (8006ad4 <__libc_init_array+0x38>)
 8006aa0:	4c0d      	ldr	r4, [pc, #52]	; (8006ad8 <__libc_init_array+0x3c>)
 8006aa2:	1b64      	subs	r4, r4, r5
 8006aa4:	10a4      	asrs	r4, r4, #2
 8006aa6:	2600      	movs	r6, #0
 8006aa8:	42a6      	cmp	r6, r4
 8006aaa:	d109      	bne.n	8006ac0 <__libc_init_array+0x24>
 8006aac:	4d0b      	ldr	r5, [pc, #44]	; (8006adc <__libc_init_array+0x40>)
 8006aae:	4c0c      	ldr	r4, [pc, #48]	; (8006ae0 <__libc_init_array+0x44>)
 8006ab0:	f000 fc8e 	bl	80073d0 <_init>
 8006ab4:	1b64      	subs	r4, r4, r5
 8006ab6:	10a4      	asrs	r4, r4, #2
 8006ab8:	2600      	movs	r6, #0
 8006aba:	42a6      	cmp	r6, r4
 8006abc:	d105      	bne.n	8006aca <__libc_init_array+0x2e>
 8006abe:	bd70      	pop	{r4, r5, r6, pc}
 8006ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ac4:	4798      	blx	r3
 8006ac6:	3601      	adds	r6, #1
 8006ac8:	e7ee      	b.n	8006aa8 <__libc_init_array+0xc>
 8006aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ace:	4798      	blx	r3
 8006ad0:	3601      	adds	r6, #1
 8006ad2:	e7f2      	b.n	8006aba <__libc_init_array+0x1e>
 8006ad4:	0800827c 	.word	0x0800827c
 8006ad8:	0800827c 	.word	0x0800827c
 8006adc:	0800827c 	.word	0x0800827c
 8006ae0:	08008280 	.word	0x08008280

08006ae4 <memset>:
 8006ae4:	4402      	add	r2, r0
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d100      	bne.n	8006aee <memset+0xa>
 8006aec:	4770      	bx	lr
 8006aee:	f803 1b01 	strb.w	r1, [r3], #1
 8006af2:	e7f9      	b.n	8006ae8 <memset+0x4>

08006af4 <siprintf>:
 8006af4:	b40e      	push	{r1, r2, r3}
 8006af6:	b500      	push	{lr}
 8006af8:	b09c      	sub	sp, #112	; 0x70
 8006afa:	ab1d      	add	r3, sp, #116	; 0x74
 8006afc:	9002      	str	r0, [sp, #8]
 8006afe:	9006      	str	r0, [sp, #24]
 8006b00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b04:	4809      	ldr	r0, [pc, #36]	; (8006b2c <siprintf+0x38>)
 8006b06:	9107      	str	r1, [sp, #28]
 8006b08:	9104      	str	r1, [sp, #16]
 8006b0a:	4909      	ldr	r1, [pc, #36]	; (8006b30 <siprintf+0x3c>)
 8006b0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b10:	9105      	str	r1, [sp, #20]
 8006b12:	6800      	ldr	r0, [r0, #0]
 8006b14:	9301      	str	r3, [sp, #4]
 8006b16:	a902      	add	r1, sp, #8
 8006b18:	f000 f868 	bl	8006bec <_svfiprintf_r>
 8006b1c:	9b02      	ldr	r3, [sp, #8]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	701a      	strb	r2, [r3, #0]
 8006b22:	b01c      	add	sp, #112	; 0x70
 8006b24:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b28:	b003      	add	sp, #12
 8006b2a:	4770      	bx	lr
 8006b2c:	2000002c 	.word	0x2000002c
 8006b30:	ffff0208 	.word	0xffff0208

08006b34 <__ssputs_r>:
 8006b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b38:	688e      	ldr	r6, [r1, #8]
 8006b3a:	429e      	cmp	r6, r3
 8006b3c:	4682      	mov	sl, r0
 8006b3e:	460c      	mov	r4, r1
 8006b40:	4690      	mov	r8, r2
 8006b42:	461f      	mov	r7, r3
 8006b44:	d838      	bhi.n	8006bb8 <__ssputs_r+0x84>
 8006b46:	898a      	ldrh	r2, [r1, #12]
 8006b48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b4c:	d032      	beq.n	8006bb4 <__ssputs_r+0x80>
 8006b4e:	6825      	ldr	r5, [r4, #0]
 8006b50:	6909      	ldr	r1, [r1, #16]
 8006b52:	eba5 0901 	sub.w	r9, r5, r1
 8006b56:	6965      	ldr	r5, [r4, #20]
 8006b58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b60:	3301      	adds	r3, #1
 8006b62:	444b      	add	r3, r9
 8006b64:	106d      	asrs	r5, r5, #1
 8006b66:	429d      	cmp	r5, r3
 8006b68:	bf38      	it	cc
 8006b6a:	461d      	movcc	r5, r3
 8006b6c:	0553      	lsls	r3, r2, #21
 8006b6e:	d531      	bpl.n	8006bd4 <__ssputs_r+0xa0>
 8006b70:	4629      	mov	r1, r5
 8006b72:	f000 fb63 	bl	800723c <_malloc_r>
 8006b76:	4606      	mov	r6, r0
 8006b78:	b950      	cbnz	r0, 8006b90 <__ssputs_r+0x5c>
 8006b7a:	230c      	movs	r3, #12
 8006b7c:	f8ca 3000 	str.w	r3, [sl]
 8006b80:	89a3      	ldrh	r3, [r4, #12]
 8006b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b86:	81a3      	strh	r3, [r4, #12]
 8006b88:	f04f 30ff 	mov.w	r0, #4294967295
 8006b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b90:	6921      	ldr	r1, [r4, #16]
 8006b92:	464a      	mov	r2, r9
 8006b94:	f000 fabe 	bl	8007114 <memcpy>
 8006b98:	89a3      	ldrh	r3, [r4, #12]
 8006b9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ba2:	81a3      	strh	r3, [r4, #12]
 8006ba4:	6126      	str	r6, [r4, #16]
 8006ba6:	6165      	str	r5, [r4, #20]
 8006ba8:	444e      	add	r6, r9
 8006baa:	eba5 0509 	sub.w	r5, r5, r9
 8006bae:	6026      	str	r6, [r4, #0]
 8006bb0:	60a5      	str	r5, [r4, #8]
 8006bb2:	463e      	mov	r6, r7
 8006bb4:	42be      	cmp	r6, r7
 8006bb6:	d900      	bls.n	8006bba <__ssputs_r+0x86>
 8006bb8:	463e      	mov	r6, r7
 8006bba:	6820      	ldr	r0, [r4, #0]
 8006bbc:	4632      	mov	r2, r6
 8006bbe:	4641      	mov	r1, r8
 8006bc0:	f000 fab6 	bl	8007130 <memmove>
 8006bc4:	68a3      	ldr	r3, [r4, #8]
 8006bc6:	1b9b      	subs	r3, r3, r6
 8006bc8:	60a3      	str	r3, [r4, #8]
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	4433      	add	r3, r6
 8006bce:	6023      	str	r3, [r4, #0]
 8006bd0:	2000      	movs	r0, #0
 8006bd2:	e7db      	b.n	8006b8c <__ssputs_r+0x58>
 8006bd4:	462a      	mov	r2, r5
 8006bd6:	f000 fba5 	bl	8007324 <_realloc_r>
 8006bda:	4606      	mov	r6, r0
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	d1e1      	bne.n	8006ba4 <__ssputs_r+0x70>
 8006be0:	6921      	ldr	r1, [r4, #16]
 8006be2:	4650      	mov	r0, sl
 8006be4:	f000 fabe 	bl	8007164 <_free_r>
 8006be8:	e7c7      	b.n	8006b7a <__ssputs_r+0x46>
	...

08006bec <_svfiprintf_r>:
 8006bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf0:	4698      	mov	r8, r3
 8006bf2:	898b      	ldrh	r3, [r1, #12]
 8006bf4:	061b      	lsls	r3, r3, #24
 8006bf6:	b09d      	sub	sp, #116	; 0x74
 8006bf8:	4607      	mov	r7, r0
 8006bfa:	460d      	mov	r5, r1
 8006bfc:	4614      	mov	r4, r2
 8006bfe:	d50e      	bpl.n	8006c1e <_svfiprintf_r+0x32>
 8006c00:	690b      	ldr	r3, [r1, #16]
 8006c02:	b963      	cbnz	r3, 8006c1e <_svfiprintf_r+0x32>
 8006c04:	2140      	movs	r1, #64	; 0x40
 8006c06:	f000 fb19 	bl	800723c <_malloc_r>
 8006c0a:	6028      	str	r0, [r5, #0]
 8006c0c:	6128      	str	r0, [r5, #16]
 8006c0e:	b920      	cbnz	r0, 8006c1a <_svfiprintf_r+0x2e>
 8006c10:	230c      	movs	r3, #12
 8006c12:	603b      	str	r3, [r7, #0]
 8006c14:	f04f 30ff 	mov.w	r0, #4294967295
 8006c18:	e0d1      	b.n	8006dbe <_svfiprintf_r+0x1d2>
 8006c1a:	2340      	movs	r3, #64	; 0x40
 8006c1c:	616b      	str	r3, [r5, #20]
 8006c1e:	2300      	movs	r3, #0
 8006c20:	9309      	str	r3, [sp, #36]	; 0x24
 8006c22:	2320      	movs	r3, #32
 8006c24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c28:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c2c:	2330      	movs	r3, #48	; 0x30
 8006c2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006dd8 <_svfiprintf_r+0x1ec>
 8006c32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c36:	f04f 0901 	mov.w	r9, #1
 8006c3a:	4623      	mov	r3, r4
 8006c3c:	469a      	mov	sl, r3
 8006c3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c42:	b10a      	cbz	r2, 8006c48 <_svfiprintf_r+0x5c>
 8006c44:	2a25      	cmp	r2, #37	; 0x25
 8006c46:	d1f9      	bne.n	8006c3c <_svfiprintf_r+0x50>
 8006c48:	ebba 0b04 	subs.w	fp, sl, r4
 8006c4c:	d00b      	beq.n	8006c66 <_svfiprintf_r+0x7a>
 8006c4e:	465b      	mov	r3, fp
 8006c50:	4622      	mov	r2, r4
 8006c52:	4629      	mov	r1, r5
 8006c54:	4638      	mov	r0, r7
 8006c56:	f7ff ff6d 	bl	8006b34 <__ssputs_r>
 8006c5a:	3001      	adds	r0, #1
 8006c5c:	f000 80aa 	beq.w	8006db4 <_svfiprintf_r+0x1c8>
 8006c60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c62:	445a      	add	r2, fp
 8006c64:	9209      	str	r2, [sp, #36]	; 0x24
 8006c66:	f89a 3000 	ldrb.w	r3, [sl]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f000 80a2 	beq.w	8006db4 <_svfiprintf_r+0x1c8>
 8006c70:	2300      	movs	r3, #0
 8006c72:	f04f 32ff 	mov.w	r2, #4294967295
 8006c76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c7a:	f10a 0a01 	add.w	sl, sl, #1
 8006c7e:	9304      	str	r3, [sp, #16]
 8006c80:	9307      	str	r3, [sp, #28]
 8006c82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c86:	931a      	str	r3, [sp, #104]	; 0x68
 8006c88:	4654      	mov	r4, sl
 8006c8a:	2205      	movs	r2, #5
 8006c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c90:	4851      	ldr	r0, [pc, #324]	; (8006dd8 <_svfiprintf_r+0x1ec>)
 8006c92:	f7f9 fa9d 	bl	80001d0 <memchr>
 8006c96:	9a04      	ldr	r2, [sp, #16]
 8006c98:	b9d8      	cbnz	r0, 8006cd2 <_svfiprintf_r+0xe6>
 8006c9a:	06d0      	lsls	r0, r2, #27
 8006c9c:	bf44      	itt	mi
 8006c9e:	2320      	movmi	r3, #32
 8006ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ca4:	0711      	lsls	r1, r2, #28
 8006ca6:	bf44      	itt	mi
 8006ca8:	232b      	movmi	r3, #43	; 0x2b
 8006caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cae:	f89a 3000 	ldrb.w	r3, [sl]
 8006cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8006cb4:	d015      	beq.n	8006ce2 <_svfiprintf_r+0xf6>
 8006cb6:	9a07      	ldr	r2, [sp, #28]
 8006cb8:	4654      	mov	r4, sl
 8006cba:	2000      	movs	r0, #0
 8006cbc:	f04f 0c0a 	mov.w	ip, #10
 8006cc0:	4621      	mov	r1, r4
 8006cc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cc6:	3b30      	subs	r3, #48	; 0x30
 8006cc8:	2b09      	cmp	r3, #9
 8006cca:	d94e      	bls.n	8006d6a <_svfiprintf_r+0x17e>
 8006ccc:	b1b0      	cbz	r0, 8006cfc <_svfiprintf_r+0x110>
 8006cce:	9207      	str	r2, [sp, #28]
 8006cd0:	e014      	b.n	8006cfc <_svfiprintf_r+0x110>
 8006cd2:	eba0 0308 	sub.w	r3, r0, r8
 8006cd6:	fa09 f303 	lsl.w	r3, r9, r3
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	9304      	str	r3, [sp, #16]
 8006cde:	46a2      	mov	sl, r4
 8006ce0:	e7d2      	b.n	8006c88 <_svfiprintf_r+0x9c>
 8006ce2:	9b03      	ldr	r3, [sp, #12]
 8006ce4:	1d19      	adds	r1, r3, #4
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	9103      	str	r1, [sp, #12]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	bfbb      	ittet	lt
 8006cee:	425b      	neglt	r3, r3
 8006cf0:	f042 0202 	orrlt.w	r2, r2, #2
 8006cf4:	9307      	strge	r3, [sp, #28]
 8006cf6:	9307      	strlt	r3, [sp, #28]
 8006cf8:	bfb8      	it	lt
 8006cfa:	9204      	strlt	r2, [sp, #16]
 8006cfc:	7823      	ldrb	r3, [r4, #0]
 8006cfe:	2b2e      	cmp	r3, #46	; 0x2e
 8006d00:	d10c      	bne.n	8006d1c <_svfiprintf_r+0x130>
 8006d02:	7863      	ldrb	r3, [r4, #1]
 8006d04:	2b2a      	cmp	r3, #42	; 0x2a
 8006d06:	d135      	bne.n	8006d74 <_svfiprintf_r+0x188>
 8006d08:	9b03      	ldr	r3, [sp, #12]
 8006d0a:	1d1a      	adds	r2, r3, #4
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	9203      	str	r2, [sp, #12]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	bfb8      	it	lt
 8006d14:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d18:	3402      	adds	r4, #2
 8006d1a:	9305      	str	r3, [sp, #20]
 8006d1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006de8 <_svfiprintf_r+0x1fc>
 8006d20:	7821      	ldrb	r1, [r4, #0]
 8006d22:	2203      	movs	r2, #3
 8006d24:	4650      	mov	r0, sl
 8006d26:	f7f9 fa53 	bl	80001d0 <memchr>
 8006d2a:	b140      	cbz	r0, 8006d3e <_svfiprintf_r+0x152>
 8006d2c:	2340      	movs	r3, #64	; 0x40
 8006d2e:	eba0 000a 	sub.w	r0, r0, sl
 8006d32:	fa03 f000 	lsl.w	r0, r3, r0
 8006d36:	9b04      	ldr	r3, [sp, #16]
 8006d38:	4303      	orrs	r3, r0
 8006d3a:	3401      	adds	r4, #1
 8006d3c:	9304      	str	r3, [sp, #16]
 8006d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d42:	4826      	ldr	r0, [pc, #152]	; (8006ddc <_svfiprintf_r+0x1f0>)
 8006d44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d48:	2206      	movs	r2, #6
 8006d4a:	f7f9 fa41 	bl	80001d0 <memchr>
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	d038      	beq.n	8006dc4 <_svfiprintf_r+0x1d8>
 8006d52:	4b23      	ldr	r3, [pc, #140]	; (8006de0 <_svfiprintf_r+0x1f4>)
 8006d54:	bb1b      	cbnz	r3, 8006d9e <_svfiprintf_r+0x1b2>
 8006d56:	9b03      	ldr	r3, [sp, #12]
 8006d58:	3307      	adds	r3, #7
 8006d5a:	f023 0307 	bic.w	r3, r3, #7
 8006d5e:	3308      	adds	r3, #8
 8006d60:	9303      	str	r3, [sp, #12]
 8006d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d64:	4433      	add	r3, r6
 8006d66:	9309      	str	r3, [sp, #36]	; 0x24
 8006d68:	e767      	b.n	8006c3a <_svfiprintf_r+0x4e>
 8006d6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d6e:	460c      	mov	r4, r1
 8006d70:	2001      	movs	r0, #1
 8006d72:	e7a5      	b.n	8006cc0 <_svfiprintf_r+0xd4>
 8006d74:	2300      	movs	r3, #0
 8006d76:	3401      	adds	r4, #1
 8006d78:	9305      	str	r3, [sp, #20]
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	f04f 0c0a 	mov.w	ip, #10
 8006d80:	4620      	mov	r0, r4
 8006d82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d86:	3a30      	subs	r2, #48	; 0x30
 8006d88:	2a09      	cmp	r2, #9
 8006d8a:	d903      	bls.n	8006d94 <_svfiprintf_r+0x1a8>
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d0c5      	beq.n	8006d1c <_svfiprintf_r+0x130>
 8006d90:	9105      	str	r1, [sp, #20]
 8006d92:	e7c3      	b.n	8006d1c <_svfiprintf_r+0x130>
 8006d94:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d98:	4604      	mov	r4, r0
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e7f0      	b.n	8006d80 <_svfiprintf_r+0x194>
 8006d9e:	ab03      	add	r3, sp, #12
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	462a      	mov	r2, r5
 8006da4:	4b0f      	ldr	r3, [pc, #60]	; (8006de4 <_svfiprintf_r+0x1f8>)
 8006da6:	a904      	add	r1, sp, #16
 8006da8:	4638      	mov	r0, r7
 8006daa:	f3af 8000 	nop.w
 8006dae:	1c42      	adds	r2, r0, #1
 8006db0:	4606      	mov	r6, r0
 8006db2:	d1d6      	bne.n	8006d62 <_svfiprintf_r+0x176>
 8006db4:	89ab      	ldrh	r3, [r5, #12]
 8006db6:	065b      	lsls	r3, r3, #25
 8006db8:	f53f af2c 	bmi.w	8006c14 <_svfiprintf_r+0x28>
 8006dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dbe:	b01d      	add	sp, #116	; 0x74
 8006dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc4:	ab03      	add	r3, sp, #12
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	462a      	mov	r2, r5
 8006dca:	4b06      	ldr	r3, [pc, #24]	; (8006de4 <_svfiprintf_r+0x1f8>)
 8006dcc:	a904      	add	r1, sp, #16
 8006dce:	4638      	mov	r0, r7
 8006dd0:	f000 f87a 	bl	8006ec8 <_printf_i>
 8006dd4:	e7eb      	b.n	8006dae <_svfiprintf_r+0x1c2>
 8006dd6:	bf00      	nop
 8006dd8:	08008240 	.word	0x08008240
 8006ddc:	0800824a 	.word	0x0800824a
 8006de0:	00000000 	.word	0x00000000
 8006de4:	08006b35 	.word	0x08006b35
 8006de8:	08008246 	.word	0x08008246

08006dec <_printf_common>:
 8006dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006df0:	4616      	mov	r6, r2
 8006df2:	4699      	mov	r9, r3
 8006df4:	688a      	ldr	r2, [r1, #8]
 8006df6:	690b      	ldr	r3, [r1, #16]
 8006df8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	bfb8      	it	lt
 8006e00:	4613      	movlt	r3, r2
 8006e02:	6033      	str	r3, [r6, #0]
 8006e04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e08:	4607      	mov	r7, r0
 8006e0a:	460c      	mov	r4, r1
 8006e0c:	b10a      	cbz	r2, 8006e12 <_printf_common+0x26>
 8006e0e:	3301      	adds	r3, #1
 8006e10:	6033      	str	r3, [r6, #0]
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	0699      	lsls	r1, r3, #26
 8006e16:	bf42      	ittt	mi
 8006e18:	6833      	ldrmi	r3, [r6, #0]
 8006e1a:	3302      	addmi	r3, #2
 8006e1c:	6033      	strmi	r3, [r6, #0]
 8006e1e:	6825      	ldr	r5, [r4, #0]
 8006e20:	f015 0506 	ands.w	r5, r5, #6
 8006e24:	d106      	bne.n	8006e34 <_printf_common+0x48>
 8006e26:	f104 0a19 	add.w	sl, r4, #25
 8006e2a:	68e3      	ldr	r3, [r4, #12]
 8006e2c:	6832      	ldr	r2, [r6, #0]
 8006e2e:	1a9b      	subs	r3, r3, r2
 8006e30:	42ab      	cmp	r3, r5
 8006e32:	dc26      	bgt.n	8006e82 <_printf_common+0x96>
 8006e34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e38:	1e13      	subs	r3, r2, #0
 8006e3a:	6822      	ldr	r2, [r4, #0]
 8006e3c:	bf18      	it	ne
 8006e3e:	2301      	movne	r3, #1
 8006e40:	0692      	lsls	r2, r2, #26
 8006e42:	d42b      	bmi.n	8006e9c <_printf_common+0xb0>
 8006e44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e48:	4649      	mov	r1, r9
 8006e4a:	4638      	mov	r0, r7
 8006e4c:	47c0      	blx	r8
 8006e4e:	3001      	adds	r0, #1
 8006e50:	d01e      	beq.n	8006e90 <_printf_common+0xa4>
 8006e52:	6823      	ldr	r3, [r4, #0]
 8006e54:	68e5      	ldr	r5, [r4, #12]
 8006e56:	6832      	ldr	r2, [r6, #0]
 8006e58:	f003 0306 	and.w	r3, r3, #6
 8006e5c:	2b04      	cmp	r3, #4
 8006e5e:	bf08      	it	eq
 8006e60:	1aad      	subeq	r5, r5, r2
 8006e62:	68a3      	ldr	r3, [r4, #8]
 8006e64:	6922      	ldr	r2, [r4, #16]
 8006e66:	bf0c      	ite	eq
 8006e68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e6c:	2500      	movne	r5, #0
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	bfc4      	itt	gt
 8006e72:	1a9b      	subgt	r3, r3, r2
 8006e74:	18ed      	addgt	r5, r5, r3
 8006e76:	2600      	movs	r6, #0
 8006e78:	341a      	adds	r4, #26
 8006e7a:	42b5      	cmp	r5, r6
 8006e7c:	d11a      	bne.n	8006eb4 <_printf_common+0xc8>
 8006e7e:	2000      	movs	r0, #0
 8006e80:	e008      	b.n	8006e94 <_printf_common+0xa8>
 8006e82:	2301      	movs	r3, #1
 8006e84:	4652      	mov	r2, sl
 8006e86:	4649      	mov	r1, r9
 8006e88:	4638      	mov	r0, r7
 8006e8a:	47c0      	blx	r8
 8006e8c:	3001      	adds	r0, #1
 8006e8e:	d103      	bne.n	8006e98 <_printf_common+0xac>
 8006e90:	f04f 30ff 	mov.w	r0, #4294967295
 8006e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e98:	3501      	adds	r5, #1
 8006e9a:	e7c6      	b.n	8006e2a <_printf_common+0x3e>
 8006e9c:	18e1      	adds	r1, r4, r3
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	2030      	movs	r0, #48	; 0x30
 8006ea2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ea6:	4422      	add	r2, r4
 8006ea8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006eac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006eb0:	3302      	adds	r3, #2
 8006eb2:	e7c7      	b.n	8006e44 <_printf_common+0x58>
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	4622      	mov	r2, r4
 8006eb8:	4649      	mov	r1, r9
 8006eba:	4638      	mov	r0, r7
 8006ebc:	47c0      	blx	r8
 8006ebe:	3001      	adds	r0, #1
 8006ec0:	d0e6      	beq.n	8006e90 <_printf_common+0xa4>
 8006ec2:	3601      	adds	r6, #1
 8006ec4:	e7d9      	b.n	8006e7a <_printf_common+0x8e>
	...

08006ec8 <_printf_i>:
 8006ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ecc:	7e0f      	ldrb	r7, [r1, #24]
 8006ece:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ed0:	2f78      	cmp	r7, #120	; 0x78
 8006ed2:	4691      	mov	r9, r2
 8006ed4:	4680      	mov	r8, r0
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	469a      	mov	sl, r3
 8006eda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ede:	d807      	bhi.n	8006ef0 <_printf_i+0x28>
 8006ee0:	2f62      	cmp	r7, #98	; 0x62
 8006ee2:	d80a      	bhi.n	8006efa <_printf_i+0x32>
 8006ee4:	2f00      	cmp	r7, #0
 8006ee6:	f000 80d8 	beq.w	800709a <_printf_i+0x1d2>
 8006eea:	2f58      	cmp	r7, #88	; 0x58
 8006eec:	f000 80a3 	beq.w	8007036 <_printf_i+0x16e>
 8006ef0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ef4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ef8:	e03a      	b.n	8006f70 <_printf_i+0xa8>
 8006efa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006efe:	2b15      	cmp	r3, #21
 8006f00:	d8f6      	bhi.n	8006ef0 <_printf_i+0x28>
 8006f02:	a101      	add	r1, pc, #4	; (adr r1, 8006f08 <_printf_i+0x40>)
 8006f04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f08:	08006f61 	.word	0x08006f61
 8006f0c:	08006f75 	.word	0x08006f75
 8006f10:	08006ef1 	.word	0x08006ef1
 8006f14:	08006ef1 	.word	0x08006ef1
 8006f18:	08006ef1 	.word	0x08006ef1
 8006f1c:	08006ef1 	.word	0x08006ef1
 8006f20:	08006f75 	.word	0x08006f75
 8006f24:	08006ef1 	.word	0x08006ef1
 8006f28:	08006ef1 	.word	0x08006ef1
 8006f2c:	08006ef1 	.word	0x08006ef1
 8006f30:	08006ef1 	.word	0x08006ef1
 8006f34:	08007081 	.word	0x08007081
 8006f38:	08006fa5 	.word	0x08006fa5
 8006f3c:	08007063 	.word	0x08007063
 8006f40:	08006ef1 	.word	0x08006ef1
 8006f44:	08006ef1 	.word	0x08006ef1
 8006f48:	080070a3 	.word	0x080070a3
 8006f4c:	08006ef1 	.word	0x08006ef1
 8006f50:	08006fa5 	.word	0x08006fa5
 8006f54:	08006ef1 	.word	0x08006ef1
 8006f58:	08006ef1 	.word	0x08006ef1
 8006f5c:	0800706b 	.word	0x0800706b
 8006f60:	682b      	ldr	r3, [r5, #0]
 8006f62:	1d1a      	adds	r2, r3, #4
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	602a      	str	r2, [r5, #0]
 8006f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f70:	2301      	movs	r3, #1
 8006f72:	e0a3      	b.n	80070bc <_printf_i+0x1f4>
 8006f74:	6820      	ldr	r0, [r4, #0]
 8006f76:	6829      	ldr	r1, [r5, #0]
 8006f78:	0606      	lsls	r6, r0, #24
 8006f7a:	f101 0304 	add.w	r3, r1, #4
 8006f7e:	d50a      	bpl.n	8006f96 <_printf_i+0xce>
 8006f80:	680e      	ldr	r6, [r1, #0]
 8006f82:	602b      	str	r3, [r5, #0]
 8006f84:	2e00      	cmp	r6, #0
 8006f86:	da03      	bge.n	8006f90 <_printf_i+0xc8>
 8006f88:	232d      	movs	r3, #45	; 0x2d
 8006f8a:	4276      	negs	r6, r6
 8006f8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f90:	485e      	ldr	r0, [pc, #376]	; (800710c <_printf_i+0x244>)
 8006f92:	230a      	movs	r3, #10
 8006f94:	e019      	b.n	8006fca <_printf_i+0x102>
 8006f96:	680e      	ldr	r6, [r1, #0]
 8006f98:	602b      	str	r3, [r5, #0]
 8006f9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f9e:	bf18      	it	ne
 8006fa0:	b236      	sxthne	r6, r6
 8006fa2:	e7ef      	b.n	8006f84 <_printf_i+0xbc>
 8006fa4:	682b      	ldr	r3, [r5, #0]
 8006fa6:	6820      	ldr	r0, [r4, #0]
 8006fa8:	1d19      	adds	r1, r3, #4
 8006faa:	6029      	str	r1, [r5, #0]
 8006fac:	0601      	lsls	r1, r0, #24
 8006fae:	d501      	bpl.n	8006fb4 <_printf_i+0xec>
 8006fb0:	681e      	ldr	r6, [r3, #0]
 8006fb2:	e002      	b.n	8006fba <_printf_i+0xf2>
 8006fb4:	0646      	lsls	r6, r0, #25
 8006fb6:	d5fb      	bpl.n	8006fb0 <_printf_i+0xe8>
 8006fb8:	881e      	ldrh	r6, [r3, #0]
 8006fba:	4854      	ldr	r0, [pc, #336]	; (800710c <_printf_i+0x244>)
 8006fbc:	2f6f      	cmp	r7, #111	; 0x6f
 8006fbe:	bf0c      	ite	eq
 8006fc0:	2308      	moveq	r3, #8
 8006fc2:	230a      	movne	r3, #10
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fca:	6865      	ldr	r5, [r4, #4]
 8006fcc:	60a5      	str	r5, [r4, #8]
 8006fce:	2d00      	cmp	r5, #0
 8006fd0:	bfa2      	ittt	ge
 8006fd2:	6821      	ldrge	r1, [r4, #0]
 8006fd4:	f021 0104 	bicge.w	r1, r1, #4
 8006fd8:	6021      	strge	r1, [r4, #0]
 8006fda:	b90e      	cbnz	r6, 8006fe0 <_printf_i+0x118>
 8006fdc:	2d00      	cmp	r5, #0
 8006fde:	d04d      	beq.n	800707c <_printf_i+0x1b4>
 8006fe0:	4615      	mov	r5, r2
 8006fe2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006fe6:	fb03 6711 	mls	r7, r3, r1, r6
 8006fea:	5dc7      	ldrb	r7, [r0, r7]
 8006fec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ff0:	4637      	mov	r7, r6
 8006ff2:	42bb      	cmp	r3, r7
 8006ff4:	460e      	mov	r6, r1
 8006ff6:	d9f4      	bls.n	8006fe2 <_printf_i+0x11a>
 8006ff8:	2b08      	cmp	r3, #8
 8006ffa:	d10b      	bne.n	8007014 <_printf_i+0x14c>
 8006ffc:	6823      	ldr	r3, [r4, #0]
 8006ffe:	07de      	lsls	r6, r3, #31
 8007000:	d508      	bpl.n	8007014 <_printf_i+0x14c>
 8007002:	6923      	ldr	r3, [r4, #16]
 8007004:	6861      	ldr	r1, [r4, #4]
 8007006:	4299      	cmp	r1, r3
 8007008:	bfde      	ittt	le
 800700a:	2330      	movle	r3, #48	; 0x30
 800700c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007010:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007014:	1b52      	subs	r2, r2, r5
 8007016:	6122      	str	r2, [r4, #16]
 8007018:	f8cd a000 	str.w	sl, [sp]
 800701c:	464b      	mov	r3, r9
 800701e:	aa03      	add	r2, sp, #12
 8007020:	4621      	mov	r1, r4
 8007022:	4640      	mov	r0, r8
 8007024:	f7ff fee2 	bl	8006dec <_printf_common>
 8007028:	3001      	adds	r0, #1
 800702a:	d14c      	bne.n	80070c6 <_printf_i+0x1fe>
 800702c:	f04f 30ff 	mov.w	r0, #4294967295
 8007030:	b004      	add	sp, #16
 8007032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007036:	4835      	ldr	r0, [pc, #212]	; (800710c <_printf_i+0x244>)
 8007038:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800703c:	6829      	ldr	r1, [r5, #0]
 800703e:	6823      	ldr	r3, [r4, #0]
 8007040:	f851 6b04 	ldr.w	r6, [r1], #4
 8007044:	6029      	str	r1, [r5, #0]
 8007046:	061d      	lsls	r5, r3, #24
 8007048:	d514      	bpl.n	8007074 <_printf_i+0x1ac>
 800704a:	07df      	lsls	r7, r3, #31
 800704c:	bf44      	itt	mi
 800704e:	f043 0320 	orrmi.w	r3, r3, #32
 8007052:	6023      	strmi	r3, [r4, #0]
 8007054:	b91e      	cbnz	r6, 800705e <_printf_i+0x196>
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	f023 0320 	bic.w	r3, r3, #32
 800705c:	6023      	str	r3, [r4, #0]
 800705e:	2310      	movs	r3, #16
 8007060:	e7b0      	b.n	8006fc4 <_printf_i+0xfc>
 8007062:	6823      	ldr	r3, [r4, #0]
 8007064:	f043 0320 	orr.w	r3, r3, #32
 8007068:	6023      	str	r3, [r4, #0]
 800706a:	2378      	movs	r3, #120	; 0x78
 800706c:	4828      	ldr	r0, [pc, #160]	; (8007110 <_printf_i+0x248>)
 800706e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007072:	e7e3      	b.n	800703c <_printf_i+0x174>
 8007074:	0659      	lsls	r1, r3, #25
 8007076:	bf48      	it	mi
 8007078:	b2b6      	uxthmi	r6, r6
 800707a:	e7e6      	b.n	800704a <_printf_i+0x182>
 800707c:	4615      	mov	r5, r2
 800707e:	e7bb      	b.n	8006ff8 <_printf_i+0x130>
 8007080:	682b      	ldr	r3, [r5, #0]
 8007082:	6826      	ldr	r6, [r4, #0]
 8007084:	6961      	ldr	r1, [r4, #20]
 8007086:	1d18      	adds	r0, r3, #4
 8007088:	6028      	str	r0, [r5, #0]
 800708a:	0635      	lsls	r5, r6, #24
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	d501      	bpl.n	8007094 <_printf_i+0x1cc>
 8007090:	6019      	str	r1, [r3, #0]
 8007092:	e002      	b.n	800709a <_printf_i+0x1d2>
 8007094:	0670      	lsls	r0, r6, #25
 8007096:	d5fb      	bpl.n	8007090 <_printf_i+0x1c8>
 8007098:	8019      	strh	r1, [r3, #0]
 800709a:	2300      	movs	r3, #0
 800709c:	6123      	str	r3, [r4, #16]
 800709e:	4615      	mov	r5, r2
 80070a0:	e7ba      	b.n	8007018 <_printf_i+0x150>
 80070a2:	682b      	ldr	r3, [r5, #0]
 80070a4:	1d1a      	adds	r2, r3, #4
 80070a6:	602a      	str	r2, [r5, #0]
 80070a8:	681d      	ldr	r5, [r3, #0]
 80070aa:	6862      	ldr	r2, [r4, #4]
 80070ac:	2100      	movs	r1, #0
 80070ae:	4628      	mov	r0, r5
 80070b0:	f7f9 f88e 	bl	80001d0 <memchr>
 80070b4:	b108      	cbz	r0, 80070ba <_printf_i+0x1f2>
 80070b6:	1b40      	subs	r0, r0, r5
 80070b8:	6060      	str	r0, [r4, #4]
 80070ba:	6863      	ldr	r3, [r4, #4]
 80070bc:	6123      	str	r3, [r4, #16]
 80070be:	2300      	movs	r3, #0
 80070c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070c4:	e7a8      	b.n	8007018 <_printf_i+0x150>
 80070c6:	6923      	ldr	r3, [r4, #16]
 80070c8:	462a      	mov	r2, r5
 80070ca:	4649      	mov	r1, r9
 80070cc:	4640      	mov	r0, r8
 80070ce:	47d0      	blx	sl
 80070d0:	3001      	adds	r0, #1
 80070d2:	d0ab      	beq.n	800702c <_printf_i+0x164>
 80070d4:	6823      	ldr	r3, [r4, #0]
 80070d6:	079b      	lsls	r3, r3, #30
 80070d8:	d413      	bmi.n	8007102 <_printf_i+0x23a>
 80070da:	68e0      	ldr	r0, [r4, #12]
 80070dc:	9b03      	ldr	r3, [sp, #12]
 80070de:	4298      	cmp	r0, r3
 80070e0:	bfb8      	it	lt
 80070e2:	4618      	movlt	r0, r3
 80070e4:	e7a4      	b.n	8007030 <_printf_i+0x168>
 80070e6:	2301      	movs	r3, #1
 80070e8:	4632      	mov	r2, r6
 80070ea:	4649      	mov	r1, r9
 80070ec:	4640      	mov	r0, r8
 80070ee:	47d0      	blx	sl
 80070f0:	3001      	adds	r0, #1
 80070f2:	d09b      	beq.n	800702c <_printf_i+0x164>
 80070f4:	3501      	adds	r5, #1
 80070f6:	68e3      	ldr	r3, [r4, #12]
 80070f8:	9903      	ldr	r1, [sp, #12]
 80070fa:	1a5b      	subs	r3, r3, r1
 80070fc:	42ab      	cmp	r3, r5
 80070fe:	dcf2      	bgt.n	80070e6 <_printf_i+0x21e>
 8007100:	e7eb      	b.n	80070da <_printf_i+0x212>
 8007102:	2500      	movs	r5, #0
 8007104:	f104 0619 	add.w	r6, r4, #25
 8007108:	e7f5      	b.n	80070f6 <_printf_i+0x22e>
 800710a:	bf00      	nop
 800710c:	08008251 	.word	0x08008251
 8007110:	08008262 	.word	0x08008262

08007114 <memcpy>:
 8007114:	440a      	add	r2, r1
 8007116:	4291      	cmp	r1, r2
 8007118:	f100 33ff 	add.w	r3, r0, #4294967295
 800711c:	d100      	bne.n	8007120 <memcpy+0xc>
 800711e:	4770      	bx	lr
 8007120:	b510      	push	{r4, lr}
 8007122:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007126:	f803 4f01 	strb.w	r4, [r3, #1]!
 800712a:	4291      	cmp	r1, r2
 800712c:	d1f9      	bne.n	8007122 <memcpy+0xe>
 800712e:	bd10      	pop	{r4, pc}

08007130 <memmove>:
 8007130:	4288      	cmp	r0, r1
 8007132:	b510      	push	{r4, lr}
 8007134:	eb01 0402 	add.w	r4, r1, r2
 8007138:	d902      	bls.n	8007140 <memmove+0x10>
 800713a:	4284      	cmp	r4, r0
 800713c:	4623      	mov	r3, r4
 800713e:	d807      	bhi.n	8007150 <memmove+0x20>
 8007140:	1e43      	subs	r3, r0, #1
 8007142:	42a1      	cmp	r1, r4
 8007144:	d008      	beq.n	8007158 <memmove+0x28>
 8007146:	f811 2b01 	ldrb.w	r2, [r1], #1
 800714a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800714e:	e7f8      	b.n	8007142 <memmove+0x12>
 8007150:	4402      	add	r2, r0
 8007152:	4601      	mov	r1, r0
 8007154:	428a      	cmp	r2, r1
 8007156:	d100      	bne.n	800715a <memmove+0x2a>
 8007158:	bd10      	pop	{r4, pc}
 800715a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800715e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007162:	e7f7      	b.n	8007154 <memmove+0x24>

08007164 <_free_r>:
 8007164:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007166:	2900      	cmp	r1, #0
 8007168:	d044      	beq.n	80071f4 <_free_r+0x90>
 800716a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800716e:	9001      	str	r0, [sp, #4]
 8007170:	2b00      	cmp	r3, #0
 8007172:	f1a1 0404 	sub.w	r4, r1, #4
 8007176:	bfb8      	it	lt
 8007178:	18e4      	addlt	r4, r4, r3
 800717a:	f000 f913 	bl	80073a4 <__malloc_lock>
 800717e:	4a1e      	ldr	r2, [pc, #120]	; (80071f8 <_free_r+0x94>)
 8007180:	9801      	ldr	r0, [sp, #4]
 8007182:	6813      	ldr	r3, [r2, #0]
 8007184:	b933      	cbnz	r3, 8007194 <_free_r+0x30>
 8007186:	6063      	str	r3, [r4, #4]
 8007188:	6014      	str	r4, [r2, #0]
 800718a:	b003      	add	sp, #12
 800718c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007190:	f000 b90e 	b.w	80073b0 <__malloc_unlock>
 8007194:	42a3      	cmp	r3, r4
 8007196:	d908      	bls.n	80071aa <_free_r+0x46>
 8007198:	6825      	ldr	r5, [r4, #0]
 800719a:	1961      	adds	r1, r4, r5
 800719c:	428b      	cmp	r3, r1
 800719e:	bf01      	itttt	eq
 80071a0:	6819      	ldreq	r1, [r3, #0]
 80071a2:	685b      	ldreq	r3, [r3, #4]
 80071a4:	1949      	addeq	r1, r1, r5
 80071a6:	6021      	streq	r1, [r4, #0]
 80071a8:	e7ed      	b.n	8007186 <_free_r+0x22>
 80071aa:	461a      	mov	r2, r3
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	b10b      	cbz	r3, 80071b4 <_free_r+0x50>
 80071b0:	42a3      	cmp	r3, r4
 80071b2:	d9fa      	bls.n	80071aa <_free_r+0x46>
 80071b4:	6811      	ldr	r1, [r2, #0]
 80071b6:	1855      	adds	r5, r2, r1
 80071b8:	42a5      	cmp	r5, r4
 80071ba:	d10b      	bne.n	80071d4 <_free_r+0x70>
 80071bc:	6824      	ldr	r4, [r4, #0]
 80071be:	4421      	add	r1, r4
 80071c0:	1854      	adds	r4, r2, r1
 80071c2:	42a3      	cmp	r3, r4
 80071c4:	6011      	str	r1, [r2, #0]
 80071c6:	d1e0      	bne.n	800718a <_free_r+0x26>
 80071c8:	681c      	ldr	r4, [r3, #0]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	6053      	str	r3, [r2, #4]
 80071ce:	4421      	add	r1, r4
 80071d0:	6011      	str	r1, [r2, #0]
 80071d2:	e7da      	b.n	800718a <_free_r+0x26>
 80071d4:	d902      	bls.n	80071dc <_free_r+0x78>
 80071d6:	230c      	movs	r3, #12
 80071d8:	6003      	str	r3, [r0, #0]
 80071da:	e7d6      	b.n	800718a <_free_r+0x26>
 80071dc:	6825      	ldr	r5, [r4, #0]
 80071de:	1961      	adds	r1, r4, r5
 80071e0:	428b      	cmp	r3, r1
 80071e2:	bf04      	itt	eq
 80071e4:	6819      	ldreq	r1, [r3, #0]
 80071e6:	685b      	ldreq	r3, [r3, #4]
 80071e8:	6063      	str	r3, [r4, #4]
 80071ea:	bf04      	itt	eq
 80071ec:	1949      	addeq	r1, r1, r5
 80071ee:	6021      	streq	r1, [r4, #0]
 80071f0:	6054      	str	r4, [r2, #4]
 80071f2:	e7ca      	b.n	800718a <_free_r+0x26>
 80071f4:	b003      	add	sp, #12
 80071f6:	bd30      	pop	{r4, r5, pc}
 80071f8:	20000280 	.word	0x20000280

080071fc <sbrk_aligned>:
 80071fc:	b570      	push	{r4, r5, r6, lr}
 80071fe:	4e0e      	ldr	r6, [pc, #56]	; (8007238 <sbrk_aligned+0x3c>)
 8007200:	460c      	mov	r4, r1
 8007202:	6831      	ldr	r1, [r6, #0]
 8007204:	4605      	mov	r5, r0
 8007206:	b911      	cbnz	r1, 800720e <sbrk_aligned+0x12>
 8007208:	f000 f8bc 	bl	8007384 <_sbrk_r>
 800720c:	6030      	str	r0, [r6, #0]
 800720e:	4621      	mov	r1, r4
 8007210:	4628      	mov	r0, r5
 8007212:	f000 f8b7 	bl	8007384 <_sbrk_r>
 8007216:	1c43      	adds	r3, r0, #1
 8007218:	d00a      	beq.n	8007230 <sbrk_aligned+0x34>
 800721a:	1cc4      	adds	r4, r0, #3
 800721c:	f024 0403 	bic.w	r4, r4, #3
 8007220:	42a0      	cmp	r0, r4
 8007222:	d007      	beq.n	8007234 <sbrk_aligned+0x38>
 8007224:	1a21      	subs	r1, r4, r0
 8007226:	4628      	mov	r0, r5
 8007228:	f000 f8ac 	bl	8007384 <_sbrk_r>
 800722c:	3001      	adds	r0, #1
 800722e:	d101      	bne.n	8007234 <sbrk_aligned+0x38>
 8007230:	f04f 34ff 	mov.w	r4, #4294967295
 8007234:	4620      	mov	r0, r4
 8007236:	bd70      	pop	{r4, r5, r6, pc}
 8007238:	20000284 	.word	0x20000284

0800723c <_malloc_r>:
 800723c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007240:	1ccd      	adds	r5, r1, #3
 8007242:	f025 0503 	bic.w	r5, r5, #3
 8007246:	3508      	adds	r5, #8
 8007248:	2d0c      	cmp	r5, #12
 800724a:	bf38      	it	cc
 800724c:	250c      	movcc	r5, #12
 800724e:	2d00      	cmp	r5, #0
 8007250:	4607      	mov	r7, r0
 8007252:	db01      	blt.n	8007258 <_malloc_r+0x1c>
 8007254:	42a9      	cmp	r1, r5
 8007256:	d905      	bls.n	8007264 <_malloc_r+0x28>
 8007258:	230c      	movs	r3, #12
 800725a:	603b      	str	r3, [r7, #0]
 800725c:	2600      	movs	r6, #0
 800725e:	4630      	mov	r0, r6
 8007260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007264:	4e2e      	ldr	r6, [pc, #184]	; (8007320 <_malloc_r+0xe4>)
 8007266:	f000 f89d 	bl	80073a4 <__malloc_lock>
 800726a:	6833      	ldr	r3, [r6, #0]
 800726c:	461c      	mov	r4, r3
 800726e:	bb34      	cbnz	r4, 80072be <_malloc_r+0x82>
 8007270:	4629      	mov	r1, r5
 8007272:	4638      	mov	r0, r7
 8007274:	f7ff ffc2 	bl	80071fc <sbrk_aligned>
 8007278:	1c43      	adds	r3, r0, #1
 800727a:	4604      	mov	r4, r0
 800727c:	d14d      	bne.n	800731a <_malloc_r+0xde>
 800727e:	6834      	ldr	r4, [r6, #0]
 8007280:	4626      	mov	r6, r4
 8007282:	2e00      	cmp	r6, #0
 8007284:	d140      	bne.n	8007308 <_malloc_r+0xcc>
 8007286:	6823      	ldr	r3, [r4, #0]
 8007288:	4631      	mov	r1, r6
 800728a:	4638      	mov	r0, r7
 800728c:	eb04 0803 	add.w	r8, r4, r3
 8007290:	f000 f878 	bl	8007384 <_sbrk_r>
 8007294:	4580      	cmp	r8, r0
 8007296:	d13a      	bne.n	800730e <_malloc_r+0xd2>
 8007298:	6821      	ldr	r1, [r4, #0]
 800729a:	3503      	adds	r5, #3
 800729c:	1a6d      	subs	r5, r5, r1
 800729e:	f025 0503 	bic.w	r5, r5, #3
 80072a2:	3508      	adds	r5, #8
 80072a4:	2d0c      	cmp	r5, #12
 80072a6:	bf38      	it	cc
 80072a8:	250c      	movcc	r5, #12
 80072aa:	4629      	mov	r1, r5
 80072ac:	4638      	mov	r0, r7
 80072ae:	f7ff ffa5 	bl	80071fc <sbrk_aligned>
 80072b2:	3001      	adds	r0, #1
 80072b4:	d02b      	beq.n	800730e <_malloc_r+0xd2>
 80072b6:	6823      	ldr	r3, [r4, #0]
 80072b8:	442b      	add	r3, r5
 80072ba:	6023      	str	r3, [r4, #0]
 80072bc:	e00e      	b.n	80072dc <_malloc_r+0xa0>
 80072be:	6822      	ldr	r2, [r4, #0]
 80072c0:	1b52      	subs	r2, r2, r5
 80072c2:	d41e      	bmi.n	8007302 <_malloc_r+0xc6>
 80072c4:	2a0b      	cmp	r2, #11
 80072c6:	d916      	bls.n	80072f6 <_malloc_r+0xba>
 80072c8:	1961      	adds	r1, r4, r5
 80072ca:	42a3      	cmp	r3, r4
 80072cc:	6025      	str	r5, [r4, #0]
 80072ce:	bf18      	it	ne
 80072d0:	6059      	strne	r1, [r3, #4]
 80072d2:	6863      	ldr	r3, [r4, #4]
 80072d4:	bf08      	it	eq
 80072d6:	6031      	streq	r1, [r6, #0]
 80072d8:	5162      	str	r2, [r4, r5]
 80072da:	604b      	str	r3, [r1, #4]
 80072dc:	4638      	mov	r0, r7
 80072de:	f104 060b 	add.w	r6, r4, #11
 80072e2:	f000 f865 	bl	80073b0 <__malloc_unlock>
 80072e6:	f026 0607 	bic.w	r6, r6, #7
 80072ea:	1d23      	adds	r3, r4, #4
 80072ec:	1af2      	subs	r2, r6, r3
 80072ee:	d0b6      	beq.n	800725e <_malloc_r+0x22>
 80072f0:	1b9b      	subs	r3, r3, r6
 80072f2:	50a3      	str	r3, [r4, r2]
 80072f4:	e7b3      	b.n	800725e <_malloc_r+0x22>
 80072f6:	6862      	ldr	r2, [r4, #4]
 80072f8:	42a3      	cmp	r3, r4
 80072fa:	bf0c      	ite	eq
 80072fc:	6032      	streq	r2, [r6, #0]
 80072fe:	605a      	strne	r2, [r3, #4]
 8007300:	e7ec      	b.n	80072dc <_malloc_r+0xa0>
 8007302:	4623      	mov	r3, r4
 8007304:	6864      	ldr	r4, [r4, #4]
 8007306:	e7b2      	b.n	800726e <_malloc_r+0x32>
 8007308:	4634      	mov	r4, r6
 800730a:	6876      	ldr	r6, [r6, #4]
 800730c:	e7b9      	b.n	8007282 <_malloc_r+0x46>
 800730e:	230c      	movs	r3, #12
 8007310:	603b      	str	r3, [r7, #0]
 8007312:	4638      	mov	r0, r7
 8007314:	f000 f84c 	bl	80073b0 <__malloc_unlock>
 8007318:	e7a1      	b.n	800725e <_malloc_r+0x22>
 800731a:	6025      	str	r5, [r4, #0]
 800731c:	e7de      	b.n	80072dc <_malloc_r+0xa0>
 800731e:	bf00      	nop
 8007320:	20000280 	.word	0x20000280

08007324 <_realloc_r>:
 8007324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007328:	4680      	mov	r8, r0
 800732a:	4614      	mov	r4, r2
 800732c:	460e      	mov	r6, r1
 800732e:	b921      	cbnz	r1, 800733a <_realloc_r+0x16>
 8007330:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007334:	4611      	mov	r1, r2
 8007336:	f7ff bf81 	b.w	800723c <_malloc_r>
 800733a:	b92a      	cbnz	r2, 8007348 <_realloc_r+0x24>
 800733c:	f7ff ff12 	bl	8007164 <_free_r>
 8007340:	4625      	mov	r5, r4
 8007342:	4628      	mov	r0, r5
 8007344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007348:	f000 f838 	bl	80073bc <_malloc_usable_size_r>
 800734c:	4284      	cmp	r4, r0
 800734e:	4607      	mov	r7, r0
 8007350:	d802      	bhi.n	8007358 <_realloc_r+0x34>
 8007352:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007356:	d812      	bhi.n	800737e <_realloc_r+0x5a>
 8007358:	4621      	mov	r1, r4
 800735a:	4640      	mov	r0, r8
 800735c:	f7ff ff6e 	bl	800723c <_malloc_r>
 8007360:	4605      	mov	r5, r0
 8007362:	2800      	cmp	r0, #0
 8007364:	d0ed      	beq.n	8007342 <_realloc_r+0x1e>
 8007366:	42bc      	cmp	r4, r7
 8007368:	4622      	mov	r2, r4
 800736a:	4631      	mov	r1, r6
 800736c:	bf28      	it	cs
 800736e:	463a      	movcs	r2, r7
 8007370:	f7ff fed0 	bl	8007114 <memcpy>
 8007374:	4631      	mov	r1, r6
 8007376:	4640      	mov	r0, r8
 8007378:	f7ff fef4 	bl	8007164 <_free_r>
 800737c:	e7e1      	b.n	8007342 <_realloc_r+0x1e>
 800737e:	4635      	mov	r5, r6
 8007380:	e7df      	b.n	8007342 <_realloc_r+0x1e>
	...

08007384 <_sbrk_r>:
 8007384:	b538      	push	{r3, r4, r5, lr}
 8007386:	4d06      	ldr	r5, [pc, #24]	; (80073a0 <_sbrk_r+0x1c>)
 8007388:	2300      	movs	r3, #0
 800738a:	4604      	mov	r4, r0
 800738c:	4608      	mov	r0, r1
 800738e:	602b      	str	r3, [r5, #0]
 8007390:	f7fa fc9e 	bl	8001cd0 <_sbrk>
 8007394:	1c43      	adds	r3, r0, #1
 8007396:	d102      	bne.n	800739e <_sbrk_r+0x1a>
 8007398:	682b      	ldr	r3, [r5, #0]
 800739a:	b103      	cbz	r3, 800739e <_sbrk_r+0x1a>
 800739c:	6023      	str	r3, [r4, #0]
 800739e:	bd38      	pop	{r3, r4, r5, pc}
 80073a0:	20000288 	.word	0x20000288

080073a4 <__malloc_lock>:
 80073a4:	4801      	ldr	r0, [pc, #4]	; (80073ac <__malloc_lock+0x8>)
 80073a6:	f000 b811 	b.w	80073cc <__retarget_lock_acquire_recursive>
 80073aa:	bf00      	nop
 80073ac:	2000028c 	.word	0x2000028c

080073b0 <__malloc_unlock>:
 80073b0:	4801      	ldr	r0, [pc, #4]	; (80073b8 <__malloc_unlock+0x8>)
 80073b2:	f000 b80c 	b.w	80073ce <__retarget_lock_release_recursive>
 80073b6:	bf00      	nop
 80073b8:	2000028c 	.word	0x2000028c

080073bc <_malloc_usable_size_r>:
 80073bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073c0:	1f18      	subs	r0, r3, #4
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	bfbc      	itt	lt
 80073c6:	580b      	ldrlt	r3, [r1, r0]
 80073c8:	18c0      	addlt	r0, r0, r3
 80073ca:	4770      	bx	lr

080073cc <__retarget_lock_acquire_recursive>:
 80073cc:	4770      	bx	lr

080073ce <__retarget_lock_release_recursive>:
 80073ce:	4770      	bx	lr

080073d0 <_init>:
 80073d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073d2:	bf00      	nop
 80073d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073d6:	bc08      	pop	{r3}
 80073d8:	469e      	mov	lr, r3
 80073da:	4770      	bx	lr

080073dc <_fini>:
 80073dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073de:	bf00      	nop
 80073e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073e2:	bc08      	pop	{r3}
 80073e4:	469e      	mov	lr, r3
 80073e6:	4770      	bx	lr
